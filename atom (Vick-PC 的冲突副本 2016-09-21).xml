<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vick&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-20T11:14:28.089Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Vick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown 入门</title>
    <link href="http://yoursite.com/learn-markdown/"/>
    <id>http://yoursite.com/learn-markdown/</id>
    <published>2016-09-20T04:47:54.000Z</published>
    <updated>2016-09-20T11:14:28.089Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="什么是Markdown语法？"><a href="#什么是Markdown语法？" class="headerlink" title="什么是Markdown语法？"></a>什么是Markdown语法？</h3> Markdown 是一种轻量级标记语言，目标是实现「易读易写」。越来越多的网站开始采用了Markdown语法，比如 GitHub、Coding、简书、有道云笔记 等。<a id="more"></a></li>
<li><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p> 在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zypdyzhwj20gf09cq3i.jpg" alt=""></p>
</li>
<li><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p> Hexo 会针对每个标题，在解析时都会添加锚点id，如</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># 锚点</div></pre></td></tr></table></figure>
<p> 会被解析成：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"user-content-锚点"</span>&gt;</span>锚点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 注意:我们添加了一个user-content-的前缀所以如果要自己添加跳转链接要使用markdown的形式，且链接要加一个’user-content-‘前缀，如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[问内链接](#user-content-锚点);</div></pre></td></tr></table></figure>
</li>
<li><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p> Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式，只需要在整个段落的第一行最前面加上 &gt; :</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; GitHub 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zyuw2sw6j20ge02v74p.jpg" alt=""></p>
<p> 区块引用可以嵌套，只要根据层次加上不同数量的 &gt; ：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 这是第一级引用。</div><div class="line">&gt;</div><div class="line">&gt; &gt; 这是第二级引用。</div><div class="line">&gt;</div><div class="line">&gt; 现在回到第一级引用。</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zyw0q9oqj20gk04eaa9.jpg" alt=""></p>
<p> 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; ## 这是一个标题。</div><div class="line">&gt;</div><div class="line">&gt; 1. 这是第一行列表项。</div><div class="line">&gt; 2. 这是第二行列表项。</div><div class="line">&gt;</div><div class="line">&gt; 给出一些例子代码：</div><div class="line">&gt;</div><div class="line">&gt; return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zyyay4vlj20gq06st9d.jpg" alt=""></p>
</li>
<li><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p> 列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。</p>
<ul>
<li><p>无序列表：使用星号、加号或是减号作为列表标记</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Red</div><div class="line">- Green</div><div class="line">- Blue</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz0fooujj20go03rwei.jpg" alt=""></p>
</li>
<li><p>有序列表：使用数字接着一个英文句点</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. Red</div><div class="line">2. Green</div><div class="line">3. Blue</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzg35wtij20gf03pq2z.jpg" alt=""></p>
</li>
<li><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*  Coding.net有以下主要功能:</div><div class="line">&gt; 代码托管平台</div><div class="line">&gt; 在线运行环境    </div><div class="line">&gt; 代码质量监控    </div><div class="line">&gt; 项目管理平台</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz3rludnj20gi066wev.jpg" alt=""></p>
</li>
<li><p>代办列表: 表示列表是否勾选状态</p>
  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>[ ] 不勾选</div><div class="line"><span class="bullet">- </span>[x] 勾选</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz5kunayj20iu036glo.jpg" alt=""></p>
</li>
</ul>
</li>
<li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p> 只要把你的代码块包裹在 ```之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f803bs0ejcj20fi03k3yl.jpg" alt=""></p>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zz7wkcrzj20gi03yaad.jpg" alt=""></p>
</li>
<li><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p> 在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。</p>
<ul>
<li><p>斜体：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*Coding，让开发更简单*</div><div class="line">_Coding，让开发更简单_</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zzamysjqj20gi030q34.jpg" alt=""></p>
</li>
<li><p>加粗：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**Coding，让开发更简单**</div><div class="line">__Coding，让开发更简单__</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww3.sinaimg.cn/large/9460f058gw1f7zzbkl3ktj20gj02umxd.jpg" alt=""></p>
</li>
</ul>
</li>
<li><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p> 方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[超强大的云开发平台Coding](http://coding.net)</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzekwr8pj20gn02wgln.jpg" alt=""></p>
<p> 或者也可以直接用&lt; &gt;，将网址或者邮箱地址放在中间，也能将地址直接转成链接：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;support@coding.net&gt;</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzhmtclzj20go02tt8q.jpg" alt=""></p>
</li>
<li><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p> 在 Markdown 中，可以制作表格，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header | Second Header | Third Header</div><div class="line">------------ | ------------- | ------------</div><div class="line">Content Cell | Content Cell  | Content Cell</div><div class="line">Content Cell | Content Cell  | Content Cell</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww3.sinaimg.cn/large/9460f058gw1f800qn8m10j20b603o74o.jpg" alt=""></p>
<p> 或者也可以让表格两边内容对齐，中间内容居中，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header | Second Header | Third Header</div><div class="line">:----------- | :-----------: | -----------:</div><div class="line">Left         | Center        | Right</div><div class="line">Left         | Center        | Right</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f800tewbbhj20b203kdg2.jpg" alt=""></p>
</li>
<li><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在 Markdown 中，可以制作分割线，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/9460f058gw1f800v7u0inj20go04qq36.jpg" alt=""></p>
</li>
<li><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.</p>
<ul>
<li><p>内联图片语法如下:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div></pre></td></tr></table></figure>
<p>  或</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure>
<p>  也就是:</p>
<p>  一个感叹号: ! ; 紧跟一对方括号, 包含了可选填的图片 alt 属性; 紧跟一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.</p>
</li>
<li><p>引用图片语法如下:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text][id]</div></pre></td></tr></table></figure>
<p>  “id” 是图片引用的名称. 图片引用使用链接定义的相同语法:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id]: url/to/image &quot;Optional title attribute&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h3 id="符号转义"><a href="#符号转义" class="headerlink" title="符号转义"></a>符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <em> # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \</em> # * 进行避免。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\_不想这里的文本变斜体\_</div><div class="line">\*\*不想这里的文本被加粗\*\*</div></pre></td></tr></table></figure>
</li>
<li><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Markdown 编辑器语法指南 - <a href="https://segmentfault.com/markdown" target="_blank" rel="external">https://segmentfault.com/markdown</a></p>
<p>Markdown 语法说明 (简体中文版) - <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
</li>
</ol>
<p><em>本文转载自<a href="https://coding.net/help/doc/project/markdown.html#section-2" target="_blank" rel="external">https://coding.net/help/doc/project/markdown.html#section-2</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;什么是Markdown语法？&quot;&gt;&lt;a href=&quot;#什么是Markdown语法？&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown语法？&quot;&gt;&lt;/a&gt;什么是Markdown语法？&lt;/h3&gt; Markdown 是一种轻量级标记语言，目标是实现「易读易写」。越来越多的网站开始采用了Markdown语法，比如 GitHub、Coding、简书、有道云笔记 等。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo在GitHub上搭建自己的bolg</title>
    <link href="http://yoursite.com/create-hexo-blog-on-github/"/>
    <id>http://yoursite.com/create-hexo-blog-on-github/</id>
    <published>2016-09-19T16:41:53.000Z</published>
    <updated>2016-09-20T11:55:29.911Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="前言：搭建博客的几大要素"><a href="#前言：搭建博客的几大要素" class="headerlink" title="前言：搭建博客的几大要素"></a>前言：搭建博客的几大要素</h3><ul>
<li>一个服务器（即博客的代码存放的地方，这里选用github）</li>
<li>一个Blog生成工具（这里选用Hexo，类似的还有 WordPress，jekyll）<a id="more"></a></li>
</ul>
</li>
<li><h3 id="介绍Git和GitHub"><a href="#介绍Git和GitHub" class="headerlink" title="介绍Git和GitHub"></a>介绍Git和GitHub</h3><p> Git，一个非常强大的版本管理工具。</p>
<p> GitHub,一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。</p>
<p> 你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码</p>
</li>
<li><h3 id="Github的安装和配置"><a href="#Github的安装和配置" class="headerlink" title="Github的安装和配置"></a>Github的安装和配置</h3><ol>
<li>注册，这个总会吧，官网-<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>安装及配置可以看<a href="http://vickchen.win/about-git-installation/" target="_blank" rel="external">这里</a></li>
</ol>
</li>
<li><h3 id="使用Github-Pages生成博客"><a href="#使用Github-Pages生成博客" class="headerlink" title="使用Github Pages生成博客"></a>使用Github Pages生成博客</h3><ol>
<li>在Github网站上新建一个仓库（repository），网站右上角：<br><img src="http://ww3.sinaimg.cn/large/9460f058gw1f7zaho97v0j20bo06ddgc.jpg" alt=""></li>
<li>输入库的名字，注意：一定要以这种形式yourname.github.com进行命名，比如我的用户名是vickchen1992，于是我的命名就是vickchen1992.github.com<br><img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zaho1bv9j20ke0ebtbh.jpg" alt=""></li>
<li>创建完成之后进入这个界面后点击右边的设置。<br><img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zahndv9nj20qu046wfc.jpg" alt=""></li>
<li>把界面往下拉就可以看到一个“页面自动生成”按钮了，点击该按钮<br><img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zaho7n5fj20mp0k2jvw.jpg" alt=""></li>
<li>然后进入Github自带的Markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮Continue to Layouts。</li>
<li>然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！</li>
<li>试着在地址栏输入<code>http://yourname.github.io/</code> 就可以进入你刚刚创建的博客。</li>
</ol>
</li>
<li><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul>
<li>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="http://nodejs.org/" target="_blank" rel="external">下载</a>安装文件并执行即可完成安装。</li>
</ul>
</li>
<li><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol>
<li><p>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择 Git bash ）</p>
<p> <code>npm install -g hexo</code></p>
</li>
<li><p>创建hexo文件夹</p>
<p> 安装完成后，在你喜爱的文件夹下（如 D:\hexo），点击鼠标右键，选择 Git bash 执行以下指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>
<p> <code>hexo init</code></p>
</li>
<li><p>安装依赖包</p>
<p> <code>npm install</code></p>
</li>
<li><p>本地预览</p>
<p> 现在我们已经搭建起本地的hexo博客了，先在本地看看怎么样。在hexo安装的目录执行以下命令启动服务</p>
<p> <code>hexo generate</code> //生成静态网页，简写方式为 hexo g</p>
<p> <code>hexo server</code>  //启动本地服务，简写方式为 hexo s</p>
<p> 然后到浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>即可</p>
<p> 至此，本地博客已经搭建起来了。</p>
</li>
</ol>
</li>
<li><h3 id="博客部署到Github"><a href="#博客部署到Github" class="headerlink" title="博客部署到Github"></a>博客部署到Github</h3><ul>
<li><p>修改配置文件</p>
<p>  打开安装目录下的 _config.yml(在 D:\hexo下)，找到deploy并进行如下修改，记得把相应的地方改成你自己的账号或URL。</p>
<blockquote>
<p>别告诉我你不知道你github pages的git提交地址。。。好吧，我还是附上一张截图吧，进入到你的github刚创建好的那个github pages仓库就能看到了。</p>
</blockquote>
<p>  <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zbcc4ekrj20g908cmyl.jpg" alt=""></p>
<p>  <strong>执行下列指令完成部署</strong></p>
<p>  <code>hexo generate</code> //可简写为 hexo g</p>
<p>  <code>hexo deploy</code> //发布至GitHub 可简写为 hexo d</p>
</li>
<li><p>注意</p>
<p>  <strong>每次修改本地文件后，需要 hexo generate才能保存。每次使用命令时，都要在 D:\hexo目录下。</strong></p>
<p>OK,我们的博客已经完全搭建起来了，在浏览器访问 <a href="http://yourname.github.io/" target="_blank" rel="external">http://yourname.github.io/</a> 就能看到你的成果了！</p>
<p>还有一点，有一些用户在hexo deploy之后会有个这个提示</p>
<p><img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zbi1z5y7j20fa06zjs5.jpg" alt=""></p>
<p>那么我们要输入我们在git上验证的邮箱，再次hexo deploy便成功发布上去。<br>就可以访问我们的网站了。</p>
</li>
</ul>
</li>
<li><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>配置文件_config.yml 编辑了title subtile之类的信息保存后，在git下输入hexo server(或其他指令)，出现大量报错，形如’…can not read a block mapping entry…‘？</p>
<p> 解决方法：检查_config.yml内容，<strong>特别注意冒号后面需要有一个空格</strong></p>
</li>
<li><p>hexo deploy之后报错 ERROR Deployer not found: github ?</p>
<p> 解决方法：在安装目录下（D:\hexo）右键Git Bash执行命令</p>
<p> <code>npm install hexo -deployer -git --save</code></p>
<p> 然后检查根目录下配置文件_config.yml，将deploy 的 type由github改为git</p>
</li>
<li><p>hexo deploy之后出现 fatal: ‘username.github.io’ does not appear to be a git repository？</p>
<p> 解决方法：一是检查 repo 的名字是否合乎规范、是否含有大写字母、config.yml 中的 deploy 配置是否正确，二是把 git bash 关掉，重新打开再执行命令。</p>
</li>
<li><p>右键菜单中没有 git bash选项？</p>
<p> 解决方法：可以进入开始菜单找到 git bash，然后通过 cd进入相应目录执行命令。</p>
</li>
<li><p>在github部署完成之后，马上访问出现404错误？</p>
<p> 解决方法：这是正常的，（最多）等待十分钟左右就可以访问了。如果还不行，那很可能是 github 发送给你的验证邮件你没有打开看，验证后就没问题了。</p>
</li>
<li>shell 命令中输入密码时，你输入之后密码是不显示的，这是为了安全，并非是你没输上。</li>
<li>出现乱码的，不要使用 windows 中的「记事本」打开并编辑文件，推荐使用 VS Code</li>
<li>遇到什么其他的问题，不妨删除.deploy 和db.json 再重新生成试一试。</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;前言：搭建博客的几大要素&quot;&gt;&lt;a href=&quot;#前言：搭建博客的几大要素&quot; class=&quot;headerlink&quot; title=&quot;前言：搭建博客的几大要素&quot;&gt;&lt;/a&gt;前言：搭建博客的几大要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个服务器（即博客的代码存放的地方，这里选用github）&lt;/li&gt;
&lt;li&gt;一个Blog生成工具（这里选用Hexo，类似的还有 WordPress，jekyll）
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>SVN 与 Git 的区别</title>
    <link href="http://yoursite.com/why-git/"/>
    <id>http://yoursite.com/why-git/</id>
    <published>2016-09-18T16:15:12.000Z</published>
    <updated>2016-09-20T07:09:50.685Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="合并对提交过程的保留"><a href="#合并对提交过程的保留" class="headerlink" title="合并对提交过程的保留"></a>合并对提交过程的保留</h3><ul>
<li><code>Git</code>: 合并操作保留原有的提交过程（即保留了合并来源的作者、提交次数、分离提交的内容）。</li>
<li><p><code>SVN</code>: 合并操作把来源多个提交合并成了一个合并提交，即在提交历史中Crash了自然的提交过程。</p>
<p>  保留原有的提交过程，可以无需繁琐追踪历史就方便实现以下目的：</p>
<ol>
<li>跟踪修改过程。        </li>
<li>自然的提交过程。这极大方便了代码细节演进过程的查看。</li>
<li>极大方便查出那行提交是什么时间、谁做出的。svn因为合并Crash了自然的提交过程，要追踪很痛苦。<a id="more"></a></li>
</ol>
</li>
</ul>
</li>
<li><h3 id="修正提交"><a href="#修正提交" class="headerlink" title="修正提交"></a>修正提交</h3><ul>
<li><p><code>Git</code>: 可以修正提交。</p>
<p>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</p>
</li>
<li><p><code>SVN</code>: 一旦提交就到服务器上，实际使用中就是不能修改。</p>
<p><em><code>SVN</code>可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做</em></p>
<p>实际使用中会有误提交的情况（如提交了一个不该提交的日志文件），对于svn来说，就是让大家一遍又一遍看到这个垃圾文件。</p>
<p>没有干净的提交，严重影响了Code Review，增加成本。</p>
<p>另外对于想了解演进过程的同学，垃圾提交影响了了解效果。</p>
</li>
</ul>
</li>
<li><h3 id="廉价好用的本地分支"><a href="#廉价好用的本地分支" class="headerlink" title="廉价好用的本地分支"></a>廉价好用的本地分支</h3><ul>
<li><code>Git</code>: 有本地分支</li>
<li><p><code>SVN</code>: 无本地分支</p>
<p>git可以方便创建本地分支，且瞬间就可以完成创建。由于分支可以是本地的，也就不存在svn目录权限的问题。</p>
<p>可以从想要工作点闪电般创建本地分支，本地实验不确定的修改，创建分支如此之廉价，git推荐创建分支来隔离修改。</p>
</li>
</ul>
</li>
<li><h3 id="更强大智能的合并能力"><a href="#更强大智能的合并能力" class="headerlink" title="更强大智能的合并能力"></a>更强大智能的合并能力</h3><ul>
<li><code>Git</code>: 重命名（无论文件还是目录）提交可以合并上文件重命名前的这些文件的提交。</li>
<li><p><code>SVN</code>: 重命名（无论文件还是目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时，恭喜，你会碰上传说中难搞的树冲突！</p>
<p>因为惧怕svn树冲突，在包名调整（重命名目录）或类名调整（重命名文件）前，我不得不先向一起开发的组员广播：</p>
</li>
</ul>
<ol>
<li>提交你的修改</li>
<li>暂停相关类的修改</li>
<li>我开始做调整</li>
<li><p>等我修改好后，你再开始修改</p>
<p>因为这个过程烦琐，结果就是影响了大家去做这样重构操作的积极性，进而影响项目的代码质量改进</p>
</li>
</ol>
</li>
<li><h3 id="灵活、迅速"><a href="#灵活、迅速" class="headerlink" title="灵活、迅速"></a>灵活、迅速</h3><ul>
<li><p>打断开发</p>
<p>  在开发新功能过程中，突然需要你去修复一个Bug，使用Git，你可以直接 保存贮藏/提交当前改动到本地，然后切换到主分支去修复Bug，之后 弹出贮藏/切换回你原来的分支 继续开发。</p>
</li>
<li><p>小步提交，互不干扰</p>
<p>  并行开发过程中各开发人员可以随时多次commit代码且互不影响，最后在merage到主分支，并且能记录所有成员的所有commint记录。SVN只能大量的一次性提交到中心库。</p>
</li>
</ul>
</li>
<li><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><ul>
<li><code>Git</code>: 本地包含了完整的日志，速度极快（并且无需网络)</li>
<li><code>SVN</code>: 需要从服务拉取。</li>
</ul>
</li>
<li><h3 id="Github-全球最大的开源社区"><a href="#Github-全球最大的开源社区" class="headerlink" title="Github-全球最大的开源社区"></a>Github-全球最大的开源社区</h3><ul>
<li><p>全球顶级科技公司纷纷加入 GitHub ，并贡献他们自己的项目代码</p>
<p>  Google: <a href="https://github.com/google" target="_blank" rel="external">https://github.com/google</a><br>  苹果: <a href="https://github.com/apple" target="_blank" rel="external">https://github.com/apple</a><br>  Facebook: <a href="https://github.com/facebook" target="_blank" rel="external">https://github.com/facebook</a><br>  Twitter：<a href="https://github.com/twitter" target="_blank" rel="external">https://github.com/twitter</a><br>  微软：<a href="https://github.com/microsoft" target="_blank" rel="external">https://github.com/microsoft</a><br>  Square：<a href="https://github.com/square" target="_blank" rel="external">https://github.com/square</a><br>  阿里：<a href="https://github.com/alibaba" target="_blank" rel="external">https://github.com/alibaba</a><br>  …</p>
</li>
<li><p>全球顶级开源项目都优先选择在 GitHub 上开源</p>
<p>  Linux：<a href="https://github.com/torvalds/linux" target="_blank" rel="external">https://github.com/torvalds/linux</a><br>  Android：<a href="https://github.com/owncloud/android" target="_blank" rel="external">https://github.com/owncloud/android</a><br>  Rails：<a href="https://github.com/rails/rails" target="_blank" rel="external">https://github.com/rails/rails</a><br>  Nodejs：<a href="https://github.com/nodejs/node" target="_blank" rel="external">https://github.com/nodejs/node</a><br>  Swift：<a href="https://github.com/apple/swift" target="_blank" rel="external">https://github.com/apple/swift</a><br>  CoffeeScript：<a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="external">https://github.com/jashkenas/coffeescript</a><br>  Ruby：<a href="https://github.com/ruby/ruby" target="_blank" rel="external">https://github.com/ruby/ruby</a><br>  …</p>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;合并对提交过程的保留&quot;&gt;&lt;a href=&quot;#合并对提交过程的保留&quot; class=&quot;headerlink&quot; title=&quot;合并对提交过程的保留&quot;&gt;&lt;/a&gt;合并对提交过程的保留&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Git&lt;/code&gt;: 合并操作保留原有的提交过程（即保留了合并来源的作者、提交次数、分离提交的内容）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SVN&lt;/code&gt;: 合并操作把来源多个提交合并成了一个合并提交，即在提交历史中Crash了自然的提交过程。&lt;/p&gt;
&lt;p&gt;  保留原有的提交过程，可以无需繁琐追踪历史就方便实现以下目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跟踪修改过程。        &lt;/li&gt;
&lt;li&gt;自然的提交过程。这极大方便了代码细节演进过程的查看。&lt;/li&gt;
&lt;li&gt;极大方便查出那行提交是什么时间、谁做出的。svn因为合并Crash了自然的提交过程，要追踪很痛苦。
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="SVN" scheme="http://yoursite.com/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>Git的安装与配置</title>
    <link href="http://yoursite.com/about-git-installation/"/>
    <id>http://yoursite.com/about-git-installation/</id>
    <published>2016-09-16T19:49:38.000Z</published>
    <updated>2016-09-20T10:05:27.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在2005年的某一天，Linux之父Linus Torvalds 发布了他的又一个里程碑作品——Git。它的出现改变了软件开发流程，大大地提高了开发流畅度，直到现在仍十分流行，完全没有衰退的迹象。其实一般情况下，只需要掌握Git的几个常用命令即可，但是在使用的过程中难免会遇到各种复杂的需求，这时候经常需要搜索，非常麻烦，故总结了一下自己平常会用到的Git操作。本文根据团队实践记录Git入门指南和Git常用命令，文章中不仅记录了Git的搭建和使用教程，还参考了大量Git团队使用规范上的经验，希望大家可以结合自己团队的实际应用场景让Git协作优雅的落地。<br><a id="more"></a></p>
<h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><blockquote>
<p>Git 是由 Linux 之父 Linus Tovalds 为了更好地管理linux内核开发而创立的分布式版本控制／软件配置管理软件。</p>
</blockquote>
<p>简单来说，Git 是一个管理你的「代码的历史记录」的工具。</p>
<blockquote>
<p>“Git是目前世界上最先进的分布式版本控制系统”</p>
</blockquote>
<h2 id="SVN与Git的最主要的区别"><a href="#SVN与Git的最主要的区别" class="headerlink" title="SVN与Git的最主要的区别"></a>SVN与Git的最主要的区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<blockquote>
<p>“SVN没有后悔药，Git有一堆后悔药”</p>
</blockquote>
<p>更多差异可以参考: <a href="http://vickchen.win/why-git/" target="_blank" rel="external">SVN 与 Git 的区别</a></p>
<h2 id="Git与Github的区别"><a href="#Git与Github的区别" class="headerlink" title="Git与Github的区别"></a>Git与Github的区别</h2><p>Git是一个版本控制的工具，而Github有点类似于远程仓库，用于存放用Git管理的各种项目。</p>
<h2 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h2><ol>
<li><h3 id="Git客户端下载地址-https-git-scm-com-，下载后安装。"><a href="#Git客户端下载地址-https-git-scm-com-，下载后安装。" class="headerlink" title="Git客户端下载地址: https://git-scm.com/ ，下载后安装。"></a>Git客户端下载地址: <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> ，下载后安装。</h3></li>
<li><h3 id="配置环境变量-新版的Git貌似可以自动设置环境变量"><a href="#配置环境变量-新版的Git貌似可以自动设置环境变量" class="headerlink" title="配置环境变量 (新版的Git貌似可以自动设置环境变量)"></a>配置环境变量 (<em>新版的Git貌似可以自动设置环境变量</em>)</h3><ol>
<li><p>鼠标在桌面右键“我的电脑”&gt;属性&gt;高级系统设置&gt;</p>
</li>
<li><p>点击“环境变量”按钮</p>
</li>
<li><p>新建系统变量，变量名为 GIT_HOME，变量值为你刚刚安装的GIT所在目录（比如D:\Program Files\Git）</p>
<p><img src="http://ww4.sinaimg.cn/mw690/9460f058gw1f7xnwm9o5cj20cp0hnmzl.jpg" alt=""></p>
</li>
<li><p>编辑系统Path变量 新增一向 %GIT_HOME%\bin (注意使用”;”半角分号来分割变量)</p>
<p><img src="http://ww1.sinaimg.cn/mw690/9460f058gw1f7xnw8s2bwj20cl080gn3.jpg" alt=""></p>
</li>
<li><p>确定并保存</p>
</li>
<li><p>以上方法设置完成后，你可以新开一个CMD窗口，输入Git命令 ，如图即表示环境变量以及GIT客户端安装正确。</p>
<p><img src="http://ww2.sinaimg.cn/large/9460f058gw1f7xnv4z0sij20it0a70va.jpg" alt=""></p>
</li>
</ol>
</li>
<li><p>配置ssh公钥 </p>
<p> 单单是安装完成了，GIT还不能直接使用，我们还需要配置一下公钥，不然会每次都让输入账号密码，或拒绝你登录。</p>
<ol>
<li>首先启动一个Git Bash窗口（非Windows用户直接打开终端）</li>
<li>执行 <code>cd ~/.ssh</code> 跳转至存储ssh密钥的目录，用于检测是否已生成ssh密钥<br>如果返回“… No such file or directory”，说明没有生成过SSH Key，直接进入第4步。否则进入第3步备份</li>
<li>备份 <code>mkdir key_backup mv id_isa* key_backup</code></li>
<li><code>git config --global user.name &quot;demo&quot;</code> 设置你的用户名，替换demo为自己的名字，<strong>不是注册账号</strong></li>
<li><code>git config --global user.email &quot;demo@qq.com&quot;</code> 引号内的内容替换为你自己的邮箱 </li>
<li><p><code>ssh-keygen -t rsa -C &quot;demo@qq.com&quot;</code> 生成密钥 <strong>-C 为大写</strong>  </p>
<p> 输出显示</p>
<blockquote>
<p>Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</p>
</blockquote>
<p>  直接回车，不要修改默认路径</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase): Enter same passphrase again:</p>
</blockquote>
<p>  设置一个密码短语，在每次远程操作之前会要求输入此密码。觉得麻烦也可以直接回车，不设置。</p>
<p>  <em>注意:输入密码不会有任何显示 直接输入就可以了</em></p>
</li>
<li><p>成功:</p>
<blockquote>
<p>Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa. Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub. The key fingerprint is: … …</p>
</blockquote>
</li>
<li><p>提交公钥:</p>
<ol>
<li><p>找到.ssh文件夹，用文本编辑器打开“id_rsa.pub”文件，复制内容到剪贴板。</p>
</li>
<li><p>打开 <a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> ，点击 New SSH Key 按钮，粘贴进去保存即可</p>
</li>
</ol>
</li>
<li><p>测试:</p>
<p> 可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改:</p>
<p> <code>ssh -T git@github.com</code><br> 如果是下面的反馈:</p>
<blockquote>
<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br> Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p> 不要紧张，输入yes就好，然后会看到:</p>
<blockquote>
<p>Hi cnfeat! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h2 id="Git使用规范提醒"><a href="#Git使用规范提醒" class="headerlink" title="Git使用规范提醒"></a>Git使用规范提醒</h2><ul>
<li>使用Git过程中，必须通过创建分支进行开发，坚决禁止在主干分支上直接开发。review的同事有责任检查其他同事是否遵循分支规范。</li>
<li>在Git中，默认是不会提交空目录的，如果想提交某个空目录到版本库中，需要在该目录下新建一个 .gitignore 的空白文件，就可以提交了</li>
<li>把外部文件纳入到自己的 Git 分支来的时候一定要记得是先比对，确认所有修改都是自己修改的，然后再纳入。不然，容易出现代码回溯</li>
<li>多人协作时，不要各自在自己的 Git 分支开发，然后发文件合并。正确的方法应该是开一个远程分支，然后一起在远程分支里协作。不然，容易出现代码回溯（即别人的代码被覆盖的情况）</li>
<li>每个人提交代码是一定要 Git diff 看提交的东西是不是都是自己修改的。如果有不是自己修改的内容，很可能就是代码回溯</li>
<li>review 代码的时候如果看到有被删除掉的代码，一定要确实是否是写代码的同事自己删除的。如果不是，很可能就是代码回溯</li>
</ul>
<h3 id="Git客户端"><a href="#Git客户端" class="headerlink" title="Git客户端"></a>Git客户端</h3><blockquote>
<p>Git客户端可以按个人习惯来选择，遵守团队协作中的Git规范标准才是更重要的</p>
</blockquote>
<p>Git - <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p>
<pre><code>使用Git必须安装，可以与TortoiseGit配合使用。熟悉了Git的各种操作指令后可以尝试单独使用
</code></pre><p>TortoiseGit - <a href="https://tortoisegit.org/" target="_blank" rel="external">https://tortoisegit.org/</a></p>
<pre><code>与TortoiseSVN操作类似，但是功能更加强大。
</code></pre><p><strong>扩展阅读</strong></p>
<p>git简明指南 - <a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></p>
<p>常用 Git 命令清单 - <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<p>猴子都能懂的GIT入门 - <a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">http://backlogtool.com/git-guide/cn/</a></p>
<p>Git教程 - <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在2005年的某一天，Linux之父Linus Torvalds 发布了他的又一个里程碑作品——Git。它的出现改变了软件开发流程，大大地提高了开发流畅度，直到现在仍十分流行，完全没有衰退的迹象。其实一般情况下，只需要掌握Git的几个常用命令即可，但是在使用的过程中难免会遇到各种复杂的需求，这时候经常需要搜索，非常麻烦，故总结了一下自己平常会用到的Git操作。本文根据团队实践记录Git入门指南和Git常用命令，文章中不仅记录了Git的搭建和使用教程，还参考了大量Git团队使用规范上的经验，希望大家可以结合自己团队的实际应用场景让Git协作优雅的落地。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
