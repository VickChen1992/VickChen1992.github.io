<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vick&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="VickChen.win/"/>
  <updated>2019-01-23T02:59:42.072Z</updated>
  <id>VickChen.win/</id>
  
  <author>
    <name>Vick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debian 安装 Redis、MySql</title>
    <link href="VickChen.win/2019/Debian-installation-Redis-MySql/"/>
    <id>VickChen.win/2019/Debian-installation-Redis-MySql/</id>
    <published>2019-01-22T05:40:32.000Z</published>
    <updated>2019-01-23T02:59:42.072Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要用到的三件套安装、配置以及常见错误</p>
<a id="more"></a>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 是一个高性能的key-value数据库。 在部分场合可以对关系数据库起到很好的补充作用。是当前比较热门的NOSQL系统之一。它提供了C#，Java，PHP，JavaScript，Python，Ruby等客户端，使用很方便。</p>
<h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 跳转至目录</span></div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line"><span class="comment"># 下载</span></div><div class="line">wget http://download.redis.io/releases/redis-stable.tar.gz</div><div class="line"><span class="comment"># 解压</span></div><div class="line">tar xzf redis-stable.tar.gz</div></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>Redis基于C开发，因此确保电脑安装有gcc和make。</p>
<ol>
<li>安装make命令  <code>sudo apt-get install make</code></li>
<li>安装sysv-rc-conf命令  <code>sudo apt-get install sysv-rc-conf</code></li>
<li>安装GCC:  <code>sudo apt-get install gcc</code></li>
</ol>
<p>完成之后，编译步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-stable</div><div class="line">make <span class="built_in">test</span> <span class="comment"># 可忽略，测试主机性能</span></div><div class="line">make</div><div class="line">sudo make install</div><div class="line">sudo ./install_server.sh</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>接下来会出来redis配置，按照提示一步步设置端口，日志路径，配置文件等。<br>系统服务位于/etc/init.d/redis_6379，可以更名为/etc/inti.d/reids-server.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo mv /etc/init.d/redis&#123;_6379,-server&#125;</div><div class="line"><span class="comment"># 启动：</span></div><div class="line">sudo redis-server</div><div class="line"><span class="comment">#关闭命令-建议使用客户端停止</span></div><div class="line">redis-cli shutdown</div></pre></td></tr></table></figure>
<h3 id="测试和连接"><a href="#测试和连接" class="headerlink" title="测试和连接"></a>测试和连接</h3><p>使用redis客户端测试服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-cli ping</div><div class="line">PONG</div></pre></td></tr></table></figure>
<h3 id="修改Redis配置"><a href="#修改Redis配置" class="headerlink" title="修改Redis配置"></a>修改Redis配置</h3><h4 id="设置访问账号"><a href="#设置访问账号" class="headerlink" title="设置访问账号"></a>设置访问账号</h4><p>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为password。</p>
<p>用vi打开Redis服务器的配置文件redis.conf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/redis/redis.conf</div><div class="line"><span class="comment">#取消注释requirepass</span></div><div class="line">requirepass password</div></pre></td></tr></table></figure>
<h4 id="设置Redis可被远程访问"><a href="#设置Redis可被远程访问" class="headerlink" title="设置Redis可被远程访问"></a>设置Redis可被远程访问</h4><p>默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。用vi打开Redis服务器的配置文件redis.conf </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/redis/redis.conf</div><div class="line"><span class="comment">#注释bind</span></div><div class="line"><span class="comment">#bind 127.0.0.1</span></div></pre></td></tr></table></figure>
<p>修改后，重启Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-cli shutdown</div><div class="line">sudo redis-server</div></pre></td></tr></table></figure>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>本机登陆Redis服务器，输入密码</p>
<p><code>redis-cli -a password</code></p>
<p>远程访问，主机为x.x.x.x</p>
<p><code>redis-cli -a password -h x.x.x.x</code></p>
<h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><p>MySql是目前最受欢迎的关系型数据库之一。 由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，很多中小型网站的开发都选择将 MySql作为网站数据库。</p>
<h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><p>debian下安装软件的指令为apt-get，在使用apt-get安装之前，需要先下载官网提供的Deb包，以将MySql的仓库添加到apt-get的源中。</p>
<ol>
<li><p>获取下载链接</p>
<p>打开网站<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2Frepo%2Fapt%2F" target="_blank" rel="external">MySQL APT Respository</a></p>
<p><img src="https://ws1.sinaimg.cn/large/9460f058ly1fzgaj3o70yj20s005fjrp.jpg" alt=""></p>
</li>
<li><p>点击Download，跳转到下载页面</p>
<p><img src="https://ws1.sinaimg.cn/large/9460f058ly1fzgalkchhrj20ob0gsabk.jpg" alt=""></p>
</li>
<li><p>右键点击No thanks，just start my download复制链接</p>
</li>
<li><p>进入工作目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div></pre></td></tr></table></figure>
</li>
<li><p>下载Deb文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</div></pre></td></tr></table></figure>
</li>
<li><p>将该文件添加至apt-get的源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i ./mysql-apt-config_0.8.12-1_all.deb</div></pre></td></tr></table></figure>
</li>
<li><p>然后会弹出MySql的源配置界面</p>
<p><img src="http://ww1.sinaimg.cn/large/9460f058ly1fzgaf3wc54j20rs0d447p.jpg" alt=""></p>
<p>我们仅需选择版本，下面两个选项默认即可</p>
</li>
<li><p>更新源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div></pre></td></tr></table></figure>
<p>这一步可能会提示错误:</p>
<p><img src="https://ws1.sinaimg.cn/large/9460f058gy1fzgav214e7j20h504pmz9.jpg" alt=""></p>
<p>可以换个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo aptitude install &lt;mysql-server&gt;</div></pre></td></tr></table></figure>
<p>因为aptitude会自动把所有依赖的库都帮你顺着找到，并下载好。</p>
<p>而apt-get下载某个包中它的所有依赖项都必须存在。</p>
<p>这就是为什么我们每次执行apt-get的时候都需要先<code>apt-get update</code>的更新软件包的原因。</p>
<p>如果提示找不到aptitude，可以先使用<code>sudo apt-get install aptitude</code>进行下载</p>
<p>然后就是漫长的等待，因为安装包200多M…..</p>
<p>中途会让你输入root密码，自己输入一个记住就行了。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li><p>开启MySql服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql start</div></pre></td></tr></table></figure>
</li>
<li><p>关闭服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql stop</div></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysql restart</div></pre></td></tr></table></figure>
</li>
<li><p>登陆</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<p>输入密码即可登陆</p>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为MySql刚安装完成不允许从远程访问而且只有一个root用户，这对于开发不太友好也比较不安全。</p>
<p>所以我们应该创建一个用于开发的数据库账户，并且为它设置远程访问权限。</p>
<p>当然，<strong>在真正投入生成环境之后，我们应该移除远程访问的权限</strong></p>
<ol>
<li><p>登录MySql</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
</li>
<li><p>输入密码登录之后，新建一个用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>完成之后为该用户分配所有权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>接着刷新权限即可使用新用户在任意host登录数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
</li>
<li><p>如果还是不行的话，打开下面的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/mysql/mysql.conf.d/mysqlld.cnf</div></pre></td></tr></table></figure>
</li>
<li><p>把bind-adress那一行的127.0.0.1改成0.0.0.0 </p>
<p><strong>切记：投入生产时记得改回来</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># By default we only accept connections from localhost</span></div><div class="line"><span class="comment"># bind-address    = 127.0.0.1 #先注释此行</span></div><div class="line"><span class="built_in">bind</span>-address    = 0.0.0.0</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中需要用到的三件套安装、配置以及常见错误&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
      <category term="Redis" scheme="VickChen.win/tags/Redis/"/>
    
      <category term="MySql" scheme="VickChen.win/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 VMware Tools</title>
    <link href="VickChen.win/2018/Debian-installation-VMware-Tools/"/>
    <id>VickChen.win/2018/Debian-installation-VMware-Tools/</id>
    <published>2018-12-23T16:20:11.000Z</published>
    <updated>2019-01-16T03:42:47.802Z</updated>
    
    <content type="html"><![CDATA[<p>VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先选择VMware导航栏的 虚拟机&gt;安装VMware Tools</p>
<p>之后打开  文件&gt;VMware Tools</p>
<p>将VMwareTools.tar.gz文件复制至home目录下</p>
<p>打开home文件中打开命令行,利用tar -zxvf解压VMwareTools.tar.gz</p>
<p><code>tar zxvf VMwareTools.tar.gz</code></p>
<p>将会得到VMware-Tools-distrib文件夹</p>
<p>然后将VMware-Tools-distrib放至/usr/src目录</p>
<p>sudo cp -r /home/vick/VMware-Tools-distrib /usr/src/</p>
<p>因为debian默认并没有带有ifconfig命令,因此在安装VMware Tools前需要安装net-tools</p>
<p>安装net-tools</p>
<p><code>sudo apt-get install net-tools</code></p>
<p>开始安装VMwareTools</p>
<p><code>sudo /usr/src/VMware-Tools-distrib/vmware-install.pl</code></p>
<p>之后一直按回车键,直到安装完成后重启</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>debian 9解决安装vm tools 不生效</p>
<p><code>apt install open-vm-tools open-vm-tools-desktop open-vm-tools-dkmsb</code></p>
</li>
<li><p>卸载</p>
<p>查找其卸载程序位置</p>
<p><code>find / ./vmware-uninstall-tools.pl</code></p>
<p>一般是在/usr/bin/目录下，找到后在其所在目录执行它。</p>
<p><code>./vmware-uninstall-tools.pl</code></p>
<p>完全删除其配置文件命令如下(请谨慎使用，勿敲错！数据无价，本人概不负责)。</p>
<p><code>find / vmware*  -exec rm -rfv {} \;</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
      <category term="VMware" scheme="VickChen.win/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>使用Debian时遇到的问题</title>
    <link href="VickChen.win/2018/problems-when-using-Debian/"/>
    <id>VickChen.win/2018/problems-when-using-Debian/</id>
    <published>2018-12-19T17:10:05.000Z</published>
    <updated>2018-12-23T14:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前在学习Debian，然后发现一路都是坑，与之前接触的Ubuntu在使用上还是有点差别的。Debian更加原生，也更加稳定，坑也更多。为了防止后来者继续踩坑，特意写了此文用于记录总结初学者在学习过程中遇到的各种问题。</p>
<a id="more"></a>
<h2 id="切换系统语言环境"><a href="#切换系统语言环境" class="headerlink" title="切换系统语言环境"></a>切换系统语言环境</h2><p>在Debian系统中，若是设置了中文环境后，在终端进行操作时，将会遇到中文错误提示等信息显示为乱码的问题。这时候，部分朋友选择了重新安装系统。然而，其实并不用重新安装，只要进行语言的切换就可以了。</p>
<p>命令行执行：</p>
<p><code>$ sudo dpkg-reconfigure locales</code></p>
<p>将打开一个选择语言的窗口，在此窗口中选择英文环境的字符集项，此例中选择en_US.utf-8，即按空格选中复选框，将中文环境的包 (<code>zh_CN.utf-8</code>) ，将复选框去掉选择后敲回车，确定安装即可。</p>
<p>可使用以下命令查看是否安装成功：</p>
<p><code>$ locale -a</code></p>
<p>系统将输出如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C</div><div class="line">C.UTF-8</div><div class="line">POSIX</div><div class="line">en_US.UTF-8</div></pre></td></tr></table></figure>
<p>然后输入<code>$ reboot</code> 重启系统即可。</p>
<p>若是担心英文环境下操作不方便也可切换为繁体中文(<code>zh_HK.utf-8</code>)</p>
<h2 id="gedit找不到命令"><a href="#gedit找不到命令" class="headerlink" title="gedit找不到命令"></a>gedit找不到命令</h2><p>直接重装下gedit即可。</p>
<p>打开终端，输入代码：</p>
<p><code>sudo apt-get  remove gedit</code></p>
<p>回车后输入：</p>
<p><code>sudo apt-get install gedit</code></p>
<h2 id="中文输入法不可用"><a href="#中文输入法不可用" class="headerlink" title="中文输入法不可用"></a>中文输入法不可用</h2><p>系统刚刚装好后随即安装了fcitx-googlepinyin输入法，发现输入法各种ctrl+space或者ctrl+shift一通乱按就是什么也看不到，几经折腾发现是因为根本就没有Ui控件…</p>
<p>还需要安装输入法前端所需要的ui动态库</p>
<p>打开终端，输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install fcitx-ui-classic &amp;&amp; apt-get install fcitx-ui-light</div></pre></td></tr></table></figure>
<p>安装完成后打开fcitx的配置工具，根据需要删除掉不需要的输入法。</p>
<p>然后<code>reboot</code> 重启系统，就可以看到按下快捷键后输入法弹出来了。然而这里又有一个坑，因为 <strong>输入法默认字号是零</strong> ，记得在Appearance页签内重新设置字号。</p>
<h2 id="更新163源"><a href="#更新163源" class="headerlink" title="更新163源"></a>更新163源</h2><p>终端输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gedit /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>复制以下内容保存即可</p>
<blockquote>
<p> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="external">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br> deb <a href="http://mirrors.163.com/debian-security/" target="_blank" rel="external">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian-security/" target="_blank" rel="external">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib</p>
</blockquote>
<p>直接保存即可</p>
<p>然后运行下面的命令用于更新配置</p>
<p><code>apt-get update</code></p>
<h2 id="切换系统用户"><a href="#切换系统用户" class="headerlink" title="切换系统用户"></a>切换系统用户</h2><p>更新源的时候可能会遇到无法保存的问题，是因为这个权限不够，这时候有两个办法。</p>
<p>这里先说第一个办法，切换系统用户到root后再执行上述命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su root</div></pre></td></tr></table></figure>
<p>然后会让你输入root用户密码，此处密码无输入效果。输入后按回车即可。</p>
<p>然后就可以看到看到系统用户已经成功改为root最高权限用户了。</p>
<p>以此类推，切换回原来用户只需要再执行一遍<code>su username</code> 指令后输入该用户对应的密码即可。</p>
<p>另外，<code>sudo su</code> 指令同样可以切换用户。但是可能会报下面的错误</p>
<h2 id="sudo指令报错"><a href="#sudo指令报错" class="headerlink" title="sudo指令报错"></a>sudo指令报错</h2><p>上面说的另一个办法就是在语句前加sudo 用临时权限执行。</p>
<p>初次使用这个指令可能会报错：</p>
<blockquote>
<p>当前用户不在sudoers文件(/etc/sudoers)里面，直接使用sudo命令是不允许的，会被系统记录并向root反馈</p>
</blockquote>
<p>处理这个问题很简单，但应该先理解其原理再操作。<br>首先要明白root的密码一般用户是不应改知道的，但一般用户有时可能要用到root的一些权限。<br>这里就有了一个 /etc/sudoers 文件，用来保存一些用户，使这些用户可以通过sudo命令来暂时获取root的权限。这些用户使用sudo时输入的密码是当前用户密码，而不是root密码。还可一在sudoers文件里限制一般用户的权限，这样就有了安全保证。</p>
<p>那么我们就来解决这个问题：</p>
<ol>
<li><p>切换到root用户</p>
<p><code>$ su root</code></p>
</li>
<li><p>查看/etc/sudoers权限</p>
<p><code>$ ls -all /etc/sudoers</code></p>
</li>
<li><p>更改权限为777</p>
<p><code>$ chmod 777 /etc/sudoers</code></p>
</li>
<li><p>编辑/etc/sudoers</p>
<p><code>$ vi /etc/sudoers</code></p>
<p>这个命令的意思是使用vi编辑器打开文件。</p>
</li>
<li><p>添加当前用户</p>
<p>可以看到打开的文件内容为：</p>
<blockquote>
<p>root ALL=(ALL:ALL) ALL</p>
</blockquote>
<p>在后面追加一行</p>
<blockquote>
<p>vick ALL=(ALL:ALL) ALL</p>
</blockquote>
<p>vi中刚进去是命令模式 按 <code>i</code> 或者 <code>insert</code> 进入编辑模式，编辑完了之后按ctrl+c或者esc退出编辑模式。之后输入命令 <code>:wq</code> ，保存离开。</p>
</li>
<li><p>把/etc/sudoers权限改回原来数据</p>
<p><code>$ chmod 690 /etc/sudoers</code></p>
</li>
</ol>
<p><strong>亲测：这里也可以不查看及修改权限，直接用root用户打开并修改文件后，使用<code>:wq!</code> 指令强制保存并离开。不过最好重新打开看下有没有保存成功</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在学习Debian，然后发现一路都是坑，与之前接触的Ubuntu在使用上还是有点差别的。Debian更加原生，也更加稳定，坑也更多。为了防止后来者继续踩坑，特意写了此文用于记录总结初学者在学习过程中遇到的各种问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core使用mailket收取和发送邮件</title>
    <link href="VickChen.win/2018/use-mailket-to-receive-and-send-mail/"/>
    <id>VickChen.win/2018/use-mailket-to-receive-and-send-mail/</id>
    <published>2018-11-22T18:12:00.000Z</published>
    <updated>2018-12-14T11:18:10.927Z</updated>
    
    <content type="html"><![CDATA[<p>邮件服务是一般的系统都会拥有和需要的功能，但是对于.Net项目来说，邮件服务的创建和使用会较为的麻烦。.NET对于邮件功能提供了System.Net.Mail用于创建邮件服务，该基础服务提供邮件的基础操作，并且使用也较为的简单。对于真正将该功能使用于项目的人，就会慢慢发现其中的优缺点，甚至有些时候不能忍受其中的问题。在这里介绍一种微软用于替代System.Net.Mail的邮件服务组件MailKit和MimeKit，官网地址：<a href="http://www.mimekit.net/" target="_blank" rel="external">http://www.mimekit.net/</a> GitHub地址：<a href="https://github.com/jstedfast/MimeKit" target="_blank" rel="external">https://github.com/jstedfast/MimeKit</a></p>
<a id="more"></a>
<h2 id="MailKit和MimeKit基础概述"><a href="#MailKit和MimeKit基础概述" class="headerlink" title="MailKit和MimeKit基础概述"></a>MailKit和MimeKit基础概述</h2><p>MailKit组件是一个免费开源的邮箱类库，简单来说MailKit帮我们封装了有关邮箱的一些帮助类，提供方法让我们更容易使用邮箱的SMTP、POP3、IMAP等协议。该组件是一个跨平台的Email组件，该组件支持.Net Core 、.Net FrameWork、Xamarin.Android、Xamarin.iOS、Windows Phone等等平台。</p>
<p>MimeKit提供了一个MIME解析器，组件具备的解析特性灵活、性能高、很好的处理各种各样的破碎的MIME格式化。MimeKit的性能实际上与GMime相当。</p>
<p>该组件在安全性的还是比较高的，处理安全的方式较多，SASL认证、支持S / MIME v3.2、支持OpenPGP、支持DKIM签名等等方式。Mailkit组件可以通过CancellationToken取消对应的操作，CancellationToken传播应取消操作的通知，一个的CancellationToken使线程，线程池工作项目之间，或取消合作任务的对象。过实例化CancellationTokenSource对象来创建取消令牌，该对象管理从其CancellationTokenSource.Token属性检索的取消令牌。然后，将取消令牌传递到应该收到取消通知的任意数量的线程，任务或操作。令牌不能用于启动取消。<br> MailKit组件支持异步操作，在内部编写的有关I/O异步操作的类</p>
<h2 id="创建基础邮件服务"><a href="#创建基础邮件服务" class="headerlink" title="创建基础邮件服务"></a>创建基础邮件服务</h2><p>介绍过MailKit和MimeKit组建的基础信息，接下来就介绍一下如何使用两个组件的基本功能，在这里我将基本操作做了一个简单的封装，一般的项目可以直接引用封装好的类，大家可以根据实际的情况对该组件进行扩展。</p>
<h3 id="基础实体类"><a href="#基础实体类" class="headerlink" title="基础实体类"></a>基础实体类</h3><h4 id="邮件实体类"><a href="#邮件实体类" class="headerlink" title="邮件实体类"></a>邮件实体类</h4><p>用于保存邮件至数据库</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailBoxEntity</span> : <span class="title">BaseEntity</span> &#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 该邮件所属邮箱账号</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> OwnerMailAccount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件主题</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Subject &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件文本内容</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailTextBody &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件html内容</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailHtmlBody &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件内容类型</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailBodyType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"html"</span>;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件附件文件路径</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailFilePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 收件人地址</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Recipients &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 收件人名字</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RecipientsName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 抄送</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Cc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 密送</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Bcc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 发件人</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Sender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 发件人地址</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SenderAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件类型</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MailType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 收件/发件时间</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件标识</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 是否已读，是否回复，是否删除</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> Flag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 是否已读</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsRead &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 是否已经回复</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsAnswered &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件唯一标识</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MessageId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件唯一查询标识</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span>? UniqueId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 引用邮件唯一标识</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> References &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件所属邮箱服务器的文件夹标识</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> inbox(收件箱),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> archive(档案箱),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> drafts(草稿箱),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> flagged(标记的),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> junk(垃圾箱),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> sent(发件箱),</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> trash(回收箱)</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FolderType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 文件夹名称</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 一般用于区别Inbox文件夹下用户自定义的文件夹</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FolderName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 附件个数</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? AttaCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [NotMapped]</div><div class="line">    <span class="keyword">public</span> List&lt;MailBoxEntity&gt; MailBoxList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="邮箱发送服务器配置"><a href="#邮箱发送服务器配置" class="headerlink" title="邮箱发送服务器配置"></a>邮箱发送服务器配置</h4><p>此表用于保存邮箱的账号信息及不同邮箱服务器的SMTP端口等信息</p>
<p>当然，这些信息可以拆分成两个表存储。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailConfigEntity</span> : <span class="title">BaseEntity</span> &#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮箱显示名</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> DisplayName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 发件SMTP服务器地址</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SmtpHost &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 收件Imtp服务器地址</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ImapHost &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 发件SMTP服务器端口</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? SmtpPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 收件Imtp服务器端口</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? ImapPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 是否启用SSL</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsSsl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮件编码</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailEncoding &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮箱账号</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Account &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 邮箱密码/授权码</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 平台ID</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> PlatId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 更新到的日期</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> UpdateTo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 总发件数量</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> SentCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">0</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 员工自定义的文件夹列表</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    [NotMapped]</div><div class="line">    <span class="keyword">public</span> List&lt;MailFolderEntity&gt; MailFolders &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="邮件发送结果信息"><a href="#邮件发送结果信息" class="headerlink" title="邮件发送结果信息"></a>邮件发送结果信息</h4><p>用于保存每一封邮件的发送状态，后续也可以关联其它业务表，与自动发送邮件任务配合，记录更多相关信息</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SendResultEntity</span> : <span class="title">BaseEntity</span> &#123;</div><div class="line">    <span class="comment">// [MaxLength (50)]</span></div><div class="line">    <span class="comment">// public string OrderId &#123; get; set; &#125;</span></div><div class="line">    <span class="comment">// [MaxLength (50)]</span></div><div class="line">    <span class="comment">// public string ReviewId &#123; get; set; &#125;</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MailId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 结果信息</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ResultInformation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"发送成功！"</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 结果状态</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> ResultStatus &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="邮件操作服务"><a href="#邮件操作服务" class="headerlink" title="邮件操作服务"></a>邮件操作服务</h3><h4 id="配置基础信息"><a href="#配置基础信息" class="headerlink" title="配置基础信息"></a>配置基础信息</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 账户认证</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Authenticate</span> (<span class="params">MailConfigEntity mailConfigEntity, SmtpClient client, SendResultEntity sendResultEntity</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        client.Authenticate (mailConfigEntity.Account, mailConfigEntity.Password);</div><div class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"无效的用户名或密码:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试验证错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试验证时的协议错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"账户认证错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 获取SMTP基础信息</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> MailServerInformationEntity <span class="title">SmtpClientBaseMessage</span> (<span class="params">SmtpClient client</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> mailServerInformation = <span class="keyword">new</span> MailServerInformationEntity &#123;</div><div class="line">        Authentication = client.Capabilities.HasFlag (SmtpCapabilities.Authentication),</div><div class="line">        BinaryMime = client.Capabilities.HasFlag (SmtpCapabilities.BinaryMime),</div><div class="line">        Dsn = client.Capabilities.HasFlag (SmtpCapabilities.Dsn),</div><div class="line">        EightBitMime = client.Capabilities.HasFlag (SmtpCapabilities.EightBitMime),</div><div class="line">        Size = client.MaxSize</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> mailServerInformation;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 连接服务器</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Connection</span> (<span class="params">MailConfigEntity sendServerConfiguration, SmtpClient client, SendResultEntity sendResultEntity</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        client.Connect (sendServerConfiguration.SmtpHost, sendServerConfiguration.SmtpPort.Value);</div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试连接时出错:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试连接时的协议错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"服务器连接错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"> <span class="comment"><span class="doctag">///</span> 设置发件人信息</span></div><div class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"> <span class="function"><span class="keyword">private</span> SmtpClient <span class="title">SmtpClientInit</span> (<span class="params"><span class="keyword">int</span> accountId</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> m = _mailConfigService.GetAsNoTracking ();</div><div class="line">     MailConfigEntity mailConfig = m.FirstOrDefault (a =&gt; a.FID == accountId);</div><div class="line">     SmtpClient client = <span class="keyword">new</span> SmtpClient () &#123;</div><div class="line">         ServerCertificateValidationCallback = (s, c, h, e) =&gt; <span class="literal">true</span></div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">var</span> sendResultEntity = <span class="keyword">new</span> SendResultEntity ();</div><div class="line">     Connection (mailConfig, client, sendResultEntity);</div><div class="line">     <span class="keyword">if</span> (sendResultEntity.ResultStatus == <span class="literal">false</span>)</div><div class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">     SmtpClientBaseMessage (client);</div><div class="line">     Authenticate (mailConfig, client, sendResultEntity);</div><div class="line">     <span class="keyword">return</span> sendResultEntity.ResultStatus == <span class="literal">false</span> ? <span class="literal">null</span> : client;</div><div class="line"> &#125;</div><div class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"> <span class="comment"><span class="doctag">///</span> 设置收件人信息</span></div><div class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> ImapClient <span class="title">ImapClientInit</span> (<span class="params"><span class="keyword">int</span> AccountId</span>) </span>&#123;</div><div class="line">    MailConfigEntity mailConfig = _mailConfigService.GetAsNoTracking ().FirstOrDefault (a =&gt; a.FID == AccountId);</div><div class="line">    ImapClient client = <span class="keyword">new</span> ImapClient ();</div><div class="line">    client.Connect (mailConfig.ImapHost, mailConfig.ImapPort.Value,</div><div class="line">        SecureSocketOptions.SslOnConnect);</div><div class="line">    client.Authenticate (mailConfig.Account, mailConfig.Password);</div><div class="line">    <span class="meta">#<span class="meta-keyword">region</span> 网易邮箱需要此语句，用于验证客户端身份</span></div><div class="line">    <span class="keyword">if</span> (mailConfig.ImapHost == <span class="string">"imap.126.com"</span> || mailConfig.ImapHost == <span class="string">"imap.163.com"</span>) &#123;</div><div class="line">        <span class="keyword">var</span> clientImplementation = <span class="keyword">new</span> ImapImplementation &#123;</div><div class="line">        Name = <span class="string">"MeSince"</span>,</div><div class="line">        Version = <span class="string">"2.0"</span></div><div class="line">        &#125;;</div><div class="line">        client.Identify (clientImplementation);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></div><div class="line">    <span class="keyword">return</span> client;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><p><em>Mailkit使用时会遇到“附件文件名不能为中文”和“附件文件名长度不能超过41字符”的Bug，这里我顺便参照网上的解决了</em></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 组装邮件文本/附件邮件信息</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> MimeMessage <span class="title">AssemblyMailMessage</span> (<span class="params">MailBoxEntity mailBoxEntity</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mailBoxEntity == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException (<span class="keyword">nameof</span> (mailBoxEntity));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> message = <span class="keyword">new</span> MimeMessage ();</div><div class="line">    <span class="comment">//设置邮件基本信息</span></div><div class="line">    SetMailBaseMessage (message, mailBoxEntity);</div><div class="line">    <span class="keyword">var</span> multipart = <span class="keyword">new</span> Multipart (<span class="string">"mixed"</span>);</div><div class="line">    <span class="comment">//插入文本消息</span></div><div class="line">    <span class="keyword">if</span> (mailBoxEntity.MailHtmlBody.IsNotNullAndWhiteSpace ()) &#123;</div><div class="line">        multipart.Add (<span class="keyword">new</span> MultipartAlternative &#123;</div><div class="line">            AssemblyMailTextMessage (mailBoxEntity.MailHtmlBody, mailBoxEntity.MailBodyType)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//插入附件信息</span></div><div class="line">    <span class="keyword">if</span> (mailBoxEntity.MailFilePath.IsNotNullAndWhiteSpace ()) &#123;</div><div class="line">        List&lt;FileStream&gt; list = <span class="keyword">new</span> List&lt;FileStream&gt; ();</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> path <span class="keyword">in</span> mailBoxEntity.MailFilePath.Split (<span class="string">'|'</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (!File.Exists (path))</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException (<span class="string">"文件未找到"</span>, path);</div><div class="line">            <span class="keyword">string</span>[] contentTypeArr = MimeTypes.GetMimeType (path).Split (<span class="string">'/'</span>);</div><div class="line">            FileStream file = File.Open (path, FileMode.Open);</div><div class="line">            list.Add (file);</div><div class="line">            ContentType contentType = <span class="keyword">new</span> ContentType (contentTypeArr[<span class="number">0</span>], contentTypeArr[<span class="number">1</span>]);</div><div class="line">            MimePart mimePart = <span class="keyword">new</span> MimePart (contentType) &#123;</div><div class="line">                Content = <span class="keyword">new</span> MimeContent (file),</div><div class="line">                ContentDisposition = <span class="keyword">new</span> ContentDisposition (ContentDisposition.Attachment),</div><div class="line">                ContentTransferEncoding = ContentEncoding.Base64,</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">//解决文件名不能为中文</span></div><div class="line">            mimePart.ContentType.Parameters.Add (<span class="string">"GB18030"</span>, <span class="string">"name"</span>, Path.GetFileName (path));</div><div class="line">            mimePart.ContentDisposition.Parameters.Add (<span class="string">"GB18030"</span>, <span class="string">"filename"</span>, Path.GetFileName (path));</div><div class="line">            <span class="comment">//解决文件名长度限制</span></div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> param <span class="keyword">in</span> mimePart.ContentDisposition.Parameters)</div><div class="line">                param.EncodingMethod = ParameterEncodingMethod.Rfc2047;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> param <span class="keyword">in</span> mimePart.ContentType.Parameters)</div><div class="line">                param.EncodingMethod = ParameterEncodingMethod.Rfc2047;</div><div class="line">            multipart.Add (mimePart);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//组合邮件内容</span></div><div class="line">    message.Body = multipart;</div><div class="line">    <span class="keyword">return</span> message;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 设置邮件基础信息</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> MimeMessage <span class="title">SetMailBaseMessage</span> (<span class="params">MimeMessage minMessag, MailBoxEntity mailBoxEntity</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (minMessag == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</div><div class="line">    <span class="keyword">if</span> (mailBoxEntity == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</div><div class="line">    <span class="comment">//插入发件人</span></div><div class="line">    minMessag.From.Add (<span class="keyword">new</span> MailboxAddress (mailBoxEntity.Sender, mailBoxEntity.SenderAddress));</div><div class="line"></div><div class="line">    <span class="comment">//插入收件人</span></div><div class="line">    <span class="keyword">string</span>[] _recipients = mailBoxEntity.Recipients.Split (<span class="string">"|"</span>);</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> recipients <span class="keyword">in</span> _recipients) &#123;</div><div class="line">        minMessag.To.Add (<span class="keyword">new</span> MailboxAddress (recipients.Trim ()));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mailBoxEntity.Cc.IsNotNullAndWhiteSpace ()) &#123;</div><div class="line">        <span class="comment">//插入抄送人</span></div><div class="line">        <span class="keyword">string</span>[] _cc = mailBoxEntity.Cc.Split (<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> cc <span class="keyword">in</span> _cc)</div><div class="line">            minMessag.Cc.Add (<span class="keyword">new</span> MailboxAddress (cc));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mailBoxEntity.Bcc.IsNotNullAndWhiteSpace ()) &#123;</div><div class="line">        <span class="comment">//插入密送人</span></div><div class="line">        <span class="keyword">string</span>[] _bcc = mailBoxEntity.Bcc.Split (<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> bcc <span class="keyword">in</span> _bcc)</div><div class="line">            minMessag.Bcc.Add (<span class="keyword">new</span> MailboxAddress (bcc));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//插入主题</span></div><div class="line">    minMessag.Subject = mailBoxEntity.Subject;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> minMessag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 组装邮件文本信息</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> TextPart <span class="title">AssemblyMailTextMessage</span> (<span class="params"><span class="keyword">string</span> mailBody, <span class="keyword">string</span> textPartType</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (mailBody))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (textPartType))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</div><div class="line">    <span class="keyword">var</span> textBody = <span class="keyword">new</span> TextPart (textPartType) &#123;</div><div class="line">        Text = mailBody</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> textBody;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 发送邮件</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Send</span> (<span class="params">MailBoxEntity mailBoxEntity, SmtpClient client, SendResultEntity sendResultEntity, <span class="keyword">string</span> replyto, <span class="keyword">int</span> accid</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        MimeMessage mimeMessage = _mailMessageService.AssemblyMailMessage (mailBoxEntity);</div><div class="line">        <span class="keyword">if</span> (replyto.IsNotNullAndWhiteSpace ()) &#123;</div><div class="line">            <span class="keyword">uint</span>.TryParse (replyto.Trim (<span class="string">'|'</span>), <span class="keyword">out</span> <span class="keyword">uint</span> mailuint);</div><div class="line">            SetReplyTo (mailuint, mimeMessage, accid); <span class="comment">//设置回复</span></div><div class="line">        &#125;</div><div class="line">        client.Send (mimeMessage);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mimeMessage.References != <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> mimeMessage.References)</div><div class="line">                mailBoxEntity.References = mailBoxEntity.References + <span class="string">"|"</span> + item;</div><div class="line">        &#125;</div><div class="line">        mailBoxEntity.References = mailBoxEntity.References?.Trim (<span class="string">'|'</span>);</div><div class="line">        mailBoxEntity.MessageId = mimeMessage.MessageId;</div><div class="line"></div><div class="line">        sendResultEntity.MailId = mailBoxEntity.MailType == (<span class="keyword">int</span>) MailType.Auto </div><div class="line">        ? _mailBoxService.Add (mailBoxEntity, <span class="literal">true</span>, <span class="literal">true</span>) : _mailBoxService.Add (mailBoxEntity, <span class="literal">true</span>);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</div><div class="line">        <span class="keyword">switch</span> (ex.ErrorCode) &#123;</div><div class="line">            <span class="keyword">case</span> SmtpErrorCode.RecipientNotAccepted:</div><div class="line">                sendResultEntity.ResultInformation = <span class="string">$"收件人未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SmtpErrorCode.SenderNotAccepted:</div><div class="line">                sendResultEntity.ResultInformation = <span class="string">$"发件人未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SmtpErrorCode.MessageNotAccepted:</div><div class="line">                sendResultEntity.ResultInformation = <span class="string">$"消息未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"发送消息时的协议错误:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        sendResultEntity.ResultInformation = <span class="string">$"邮件发送失败:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</div><div class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="收取邮件"><a href="#收取邮件" class="headerlink" title="收取邮件"></a>收取邮件</h4><p>这部分比较繁琐，先贴代码，然后再解释</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 接收所有文件夹的邮件</div><div class="line">/// &lt;/summary&gt; </div><div class="line">public bool GetFolders (string Account) &#123;</div><div class="line">    try &#123;</div><div class="line">        bool result = false;</div><div class="line">        MailConfigEntity mailConfig = _mailConfigService.Get ().FirstOrDefault (a =&gt; a.Account == Account);</div><div class="line"></div><div class="line">        List&lt;DateTime&gt; dateTimes = new List&lt;DateTime&gt; &#123;</div><div class="line">            Convert.ToDateTime (mailConfig.UpdateTo)</div><div class="line">        &#125;;</div><div class="line">        // 用户所拥有的文件夹</div><div class="line">        var mailFolderUserEntitys = _mailFolderUserService.GetAsNoTracking ().</div><div class="line">        Where (a =&gt; a.AccountUserID == _applicationContext.CurrentUser.FID &amp;&amp; a.DataStatus == (int) DataStatus.Active)</div><div class="line">            .Select (a =&gt; a.MailFolderId).ToArray ();</div><div class="line">        // 文件夹详细信息</div><div class="line">        var mailFolders = _mailFolderService.GetAsNoTracking ().Where (a =&gt; a.MailAccountId == mailConfig.FID &amp;&amp;</div><div class="line">            a.DataStatus == (int) DataStatus.Active &amp;&amp; a.FolderType == 1 &amp;&amp; mailFolderUserEntitys.Contains (a.FID));</div><div class="line"></div><div class="line">        var mailFoldersArr = mailFolders.Where (a =&gt; mailFolders.Any (r =&gt; r.ParentFolderId == a.FID) == false).Select (a =&gt; a.FID).ToArray ();</div><div class="line"></div><div class="line">        // 文件夹规则表</div><div class="line">        var mailFolderRuleEntities = _mailFolderRuleService.GetAsNoTracking ().Where (a =&gt; mailFoldersArr.Contains (a.FolderId) &amp;&amp;</div><div class="line">            a.DataStatus == (int) DataStatus.Active &amp;&amp; a.RuleContent.IsNotNullAndWhiteSpace ()).ToList ();</div><div class="line"></div><div class="line">        using (var client = ImapClientInit (mailConfig.FID)) &#123;</div><div class="line">            List&lt;IMailFolder&gt; mailFolderList = client.GetFolders (client.PersonalNamespaces[0]).ToList ();</div><div class="line">            foreach (var item in mailFolderList) &#123;</div><div class="line">                item.Open (FolderAccess.ReadOnly);</div><div class="line">                //todo 因未知原因,拉取Junk文件夹邮件拉取时会报错，先跳过</div><div class="line">                if (item.Count &lt; 1 || item.Name.ToLower () == "junk") continue;</div><div class="line">                var m = FillEntity (null, null, item, client, true, mailConfig.FID);</div><div class="line">                if (m.MailBoxList.Count &lt; 1) continue;</div><div class="line">                if (item.Name.ToLower () == "inbox") &#123;</div><div class="line">                    result = true;</div><div class="line">                    // 邮件归档</div><div class="line">                    if (mailFolderRuleEntities.Any ())</div><div class="line">                        MailArchive (m.MailBoxList, mailFolderRuleEntities);</div><div class="line">                &#125;</div><div class="line">                //取出邮件后对比 获得当前文件夹最后一封邮件的时间</div><div class="line">                string maxdate = m.MailBoxList.Max (a =&gt; a.Date);</div><div class="line">                DateTime.TryParse (mailConfig.UpdateTo, out var updateTo);</div><div class="line">                DateTime.TryParse (maxdate, out var date);</div><div class="line">                if (date &gt; updateTo) dateTimes.Add (Convert.ToDateTime (maxdate));</div><div class="line">                //保存所有邮件 </div><div class="line">                _mailBoxService.AddRange (m.MailBoxList);</div><div class="line">            &#125;</div><div class="line">            client.Disconnect (true);</div><div class="line">            // 最后更新时间取所有文件夹最大时间 避免覆盖或取值错误</div><div class="line">            mailConfig.UpdateTo = dateTimes.Max ().ToString ("yyyy-MM-dd HH:mm:ss");</div><div class="line">            //todo 此处排除字段修改无效</div><div class="line">            _mailConfigService.Update (mailConfig, false, "SentCount");</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        throw e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/// &lt;summary&gt;</div><div class="line">/// 填充实体   </div><div class="line">/// 返回新邮件数量</div><div class="line">/// &lt;/summary&gt;</div><div class="line">private MailBoxEntity FillEntity (IMessageSummary emhead = null, MimeMessage embody = null, IMailFolder folder = null, ImapClient client = null, bool Loop = false, int AccountId = 0) &#123;</div><div class="line">         MailBoxEntity mailbox = new MailBoxEntity ();</div><div class="line">         if (emhead != null) &#123;</div><div class="line">             if (emhead.Envelope.From.Count &gt; 0) &#123;</div><div class="line">                 mailbox.Sender = emhead.Envelope.From.Mailboxes.ElementAt (0).Name;</div><div class="line">                 mailbox.SenderAddress = emhead.Envelope.From.Mailboxes.ElementAt (0).Address;</div><div class="line">             &#125;</div><div class="line">             //记录邮件唯一标识 后续获取邮件全文后可直接修改</div><div class="line">             mailbox.MessageId = emhead.Envelope.MessageId;</div><div class="line">             //记录邮件唯一查询标识 后续根据此字段及文件夹联合查询邮件全文</div><div class="line">             mailbox.UniqueId = emhead.UniqueId.Id;</div><div class="line">             //直接取本地时间 忽略时间差</div><div class="line">             mailbox.Date = emhead.Date.LocalDateTime.ToString ("yyyy-MM-dd HH:mm:ss");</div><div class="line">             //邮件时间=本地时间+时区差</div><div class="line">             //mailbox.Date = emhead.Date.LocalDateTime.</div><div class="line">             //    AddHours(emhead.Date.Offset.TotalHours).ToString("yyyy-MM-dd HH:mm:ss");               </div><div class="line">             mailbox.Subject = emhead.Envelope.Subject;</div><div class="line">             // 有文件夹的则记录邮件头所属文件夹</div><div class="line">             if (folder != null) &#123;</div><div class="line">                 if (folder.Attributes.ToString ().Contains ("Inbox"))</div><div class="line">                     mailbox.FolderType = "Inbox";</div><div class="line">                 else if (folder.Attributes.ToString ().Contains ("Sent"))</div><div class="line">                     mailbox.FolderType = "Sent";</div><div class="line">                 else if (folder.Attributes.ToString ().Contains ("Trash"))</div><div class="line">                     mailbox.FolderType = "Trash";</div><div class="line">                 else if (folder.Attributes.ToString ().Contains ("Drafts"))</div><div class="line">                     mailbox.FolderType = "Drafts";</div><div class="line">                 else</div><div class="line">                     mailbox.FolderType = "Inbox";</div><div class="line">                 mailbox.FolderName = folder.FullName;</div><div class="line">             &#125;</div><div class="line">             // 循环记录收件人</div><div class="line">             foreach (var _Recipients in emhead.Envelope.To.Mailboxes)</div><div class="line">                 mailbox.Recipients = mailbox.Recipients + "|" + _Recipients.Address.Trim ();</div><div class="line">             mailbox.Recipients = mailbox.Recipients?.Trim ('|');</div><div class="line">             //标记为收到的邮件</div><div class="line">             mailbox.MailType = (int) MailType.In;</div><div class="line">             // 邮件状态,已读未读等等</div><div class="line">             if (emhead.Flags.HasValue &amp;&amp; mailbox.FolderType == "Inbox") &#123;</div><div class="line">                 mailbox.IsRead = emhead.Flags.Value.HasFlag (MessageFlags.Seen);</div><div class="line">                 mailbox.IsAnswered = emhead.Flags.Value.HasFlag (MessageFlags.Answered);</div><div class="line">             &#125;</div><div class="line">             // 附件个数</div><div class="line">             mailbox.AttaCount = emhead.Attachments.Count ();</div><div class="line">         &#125;</div><div class="line">         if (embody != null) &#123;</div><div class="line">             mailbox.OwnerMailAccount = AccountId;</div><div class="line">             // 正文</div><div class="line">             mailbox.MailTextBody = embody.TextBody;</div><div class="line">             mailbox.MailHtmlBody = embody.HtmlBody;</div><div class="line">             foreach (var _Cc in embody.Cc) //抄送</div><div class="line">                 mailbox.Cc = embody.Cc + "|" + ((MailboxAddress) _Cc).Address.Trim ();</div><div class="line">             mailbox.Cc = mailbox.Cc?.Trim ('|');</div><div class="line">             foreach (var _Bcc in embody.Bcc) //密送</div><div class="line">                 mailbox.Bcc = embody.Bcc + "|" + ((MailboxAddress) _Bcc).Address.Trim ();</div><div class="line">             mailbox.Bcc = mailbox.Bcc?.Trim ('|');</div><div class="line">             foreach (var _References in embody.References) //引用</div><div class="line">                 mailbox.References = embody.References + "|" + _References;</div><div class="line">             mailbox.References = mailbox.References?.Trim ('|');</div><div class="line">             if (embody.Attachments.Count () &gt; 0) &#123;</div><div class="line">                 // 收件箱箱附件保存路径</div><div class="line">                 string _guid = !string.IsNullOrEmpty (embody.MessageId) ? embody.MessageId : Guid.NewGuid ().ToString ();</div><div class="line">                 string _rootPath = Directory.GetDirectoryRoot (Directory.GetCurrentDirectory ()) + @"RecMailAttachment\" + $" &#123; _guid &#125;</div><div class="line">                 ";</div><div class="line">            if (!Directory.Exists(_rootPath))</div><div class="line">                Directory.CreateDirectory(_rootPath);</div><div class="line">            FileInfo fileInfo;</div><div class="line">            //附件路径集合</div><div class="line">            List&lt;string&gt; _attachPaths = new List&lt;string&gt;();</div><div class="line">            // 这里要转成mimepart类型</div><div class="line">            foreach (MimePart attachment in embody.Attachments)</div><div class="line">            &#123;</div><div class="line">                fileInfo = new FileInfo(Path.Combine(_rootPath, attachment.FileName));</div><div class="line">                _attachPaths.Add(fileInfo.ToString());</div><div class="line">                if (File.Exists(fileInfo.ToString())) continue;</div><div class="line">                using (FileStream fs = new FileStream(fileInfo.ToString(), FileMode.Create))</div><div class="line">                &#123;</div><div class="line">                    attachment.Content.DecodeTo(fs);</div><div class="line">                    fs.Flush();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mailbox.MailFilePath = _attachPaths.Aggregate((ttl, next) =&gt; string.Format($" &#123; ttl &#125; | &#123; next &#125;"));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //不需要循环或者未指定文件夹的直接返回</div><div class="line">    if (folder == null || !Loop)</div><div class="line">        return mailbox;</div><div class="line">    //需要循环的则循环整个文件夹取值</div><div class="line">    MailConfigEntity mailConfig = _mailConfigService.Get ().FirstOrDefault (a =&gt; a.FID == AccountId);</div><div class="line">    var mails = _mailBoxService.GetAsNoTracking ().Where (a =&gt; a.OwnerMailAccount == mailConfig.FID &amp;&amp; a.MailType == 1).Select (a =&gt; a.UniqueId);</div><div class="line">    mailbox.MailBoxList = new List&lt;MailBoxEntity&gt; ();</div><div class="line">    IList&lt;UniqueId&gt; uids;</div><div class="line">    //如果之前更新过 则仅同步上次同步之后的邮件</div><div class="line">    DateTime Updateto = DateTime.MinValue;</div><div class="line">    if (mailConfig.UpdateTo.IsNotNullAndWhiteSpace ())</div><div class="line">    &#123;</div><div class="line">        DateTime.TryParse (mailConfig.UpdateTo, out Updateto);</div><div class="line">        uids = client.GetFolder (folder.FullName).Search (SearchQuery.DeliveredAfter (Updateto));</div><div class="line">    &#125;</div><div class="line">    else//若是第一次更新 则取出所有邮件</div><div class="line">        uids = client.GetFolder (folder.FullName).Search (SearchQuery.All);</div><div class="line">    if (uids.Count &lt; 1) return mailbox;</div><div class="line">    int pagecount;</div><div class="line">    int sum = uids.Count &gt; 1000 ? 1000 : uids.Count;</div><div class="line">    int pageSize = 100; // 每页记录数</div><div class="line">    if (sum % pageSize == 0)</div><div class="line">        pagecount =sum / pageSize;</div><div class="line">    else</div><div class="line">        pagecount = sum / pageSize + 1;</div><div class="line">    for (int i = 1; i &lt;= pagecount; i++)//分页取最后一千封邮件</div><div class="line">    &#123;</div><div class="line">        var cpage = uids.SkipLast ((i - 1) * pageSize).TakeLast (pageSize).ToList ();</div><div class="line">        var items = folder.Fetch (cpage, MessageSummaryItems.UniqueId | MessageSummaryItems.All);</div><div class="line">        foreach (var item in items)</div><div class="line">        &#123;</div><div class="line">            DateTime.TryParse (item.Date.LocalDateTime.ToString (), out DateTime date);</div><div class="line">            if (date &lt; Updateto || mails.Any (a =&gt; a == item.UniqueId.Id))</div><div class="line">                continue;</div><div class="line">            //取出正文</div><div class="line">            MimeMessage ebody = folder.GetMessage (item.UniqueId);</div><div class="line">            //! 因不同邮箱时间划分混乱以及时区转换等不稳定因素 故此处需重复判断一次时间</div><div class="line">            var mbox = FillEntity (item, ebody, folder, null, false, AccountId);</div><div class="line">            mailbox.MailBoxList.Add (mbox);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return mailbox;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原本逻辑为初次仅拉取邮件头，用户点击详情后再拉取详情。收件速度可成倍提升</p>
<p>但目前客户需求在列表预览邮件部分内容，所以暂时选择全部拉取，后续可以改为仅拉取加载出邮件头的详情</p>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 设置单个邮件状态</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> MimeMessage <span class="title">SetMailFlag</span> (<span class="params">MessageFlags Flage, <span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>) </span>&#123;</div><div class="line">    MimeMessage remail;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 查找这个邮件,设置状态</span></div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = _receiveEmailService.ImapClientInit (accountId)) &#123;</div><div class="line">            <span class="keyword">if</span> (folderName == <span class="literal">null</span>)</div><div class="line">                folderName = client.Inbox.Name;</div><div class="line">            <span class="keyword">var</span> emailUniqueId = <span class="keyword">new</span> UniqueId (uniqueid);</div><div class="line">            <span class="keyword">var</span> folder = client.GetFolder (folderName);</div><div class="line">            folder.Open (FolderAccess.ReadWrite);</div><div class="line">            remail = folder.GetMessage (emailUniqueId);</div><div class="line">            folder.AddFlags (emailUniqueId, Flage, <span class="literal">true</span>);</div><div class="line">            folder.Close ();</div><div class="line">            client.Disconnect (<span class="literal">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> remail;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 将邮件保存到草稿箱 返回邮件的唯一标识</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SaveDrafts</span> (<span class="params">MailBoxEntity mailBox, <span class="keyword">int</span> accountId, <span class="keyword">int</span> uniqueId = <span class="number">-1</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        MimeMessage mimeMessage = _mailMessageService.AssemblyMailMessage (mailBox);</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = _receiveEmailService.ImapClientInit (accountId)) &#123;</div><div class="line">            IMailFolder folder = client.GetFolder (SpecialFolder.Drafts);</div><div class="line">            folder.Open (FolderAccess.ReadWrite);</div><div class="line">            <span class="comment">// 如果保存的是已经有的草稿邮件,则删除它再保存新的草稿.(没找到保存已有草稿的办法)</span></div><div class="line">            <span class="keyword">if</span> (uniqueId &gt; <span class="number">-1</span>) &#123;</div><div class="line">                List&lt;UniqueId&gt; uidls = <span class="keyword">new</span> List&lt;UniqueId&gt; &#123;</div><div class="line">                    <span class="keyword">new</span> UniqueId ((<span class="keyword">uint</span>) uniqueId)</div><div class="line">                &#125;;</div><div class="line">                folder.SetFlags (uidls, MessageFlags.Seen | MessageFlags.Deleted, <span class="literal">true</span>);</div><div class="line">                folder.Expunge (uidls);</div><div class="line">            &#125;</div><div class="line">            UniqueId? uid = folder.Append (mimeMessage, MessageFlags.Seen | MessageFlags.Draft);</div><div class="line">            folder.Close ();</div><div class="line">            client.Disconnect (<span class="literal">true</span>);</div><div class="line">            <span class="keyword">return</span> uid.HasValue ? (<span class="keyword">int</span>) uid.Value.Id : <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 设置邮件已读</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SetSeen</span> (<span class="params"><span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">bool</span> r = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        SetMailFlag (MessageFlags.Seen, uniqueid, accountId, folderName);</div><div class="line">        <span class="comment">// 将本地邮件状态设置为已读</span></div><div class="line">        <span class="keyword">var</span> mailBox = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid &amp;&amp; a.OwnerMailAccount == accountId).ToArray ();</div><div class="line">        mailBox.Each (a =&gt; a.IsRead = <span class="literal">true</span>);</div><div class="line">        <span class="keyword">if</span> (_mailBoxService.UpdateRange (mailBox) &gt; <span class="number">0</span>) r = <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 设置此邮件是对指定邮件的回复</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetReplyTo</span> (<span class="params"><span class="keyword">uint</span> uniqueid, MimeMessage message, <span class="keyword">int</span> AccountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        MimeMessage remail = SetMailFlag (MessageFlags.Answered, uniqueid, AccountId, folderName);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (remail.MessageId))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="comment">// 设置此邮件是对这个MESSAGEID的邮件的回复</span></div><div class="line">        message.InReplyTo = remail.MessageId;</div><div class="line">        <span class="comment">// 此邮件的"对其它消息"的引用属性设为这个邮件的引用属性</span></div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> id <span class="keyword">in</span> remail.References)</div><div class="line">            message.References.Add (id);</div><div class="line">        message.References.Add (remail.MessageId);</div><div class="line">        MailBoxEntity mail = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid).FirstOrDefault ();</div><div class="line">        mail.IsAnswered = <span class="literal">true</span>;</div><div class="line">        _mailBoxService.Update (mail, <span class="literal">true</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 设置邮件已删除</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SetDelted</span> (<span class="params"><span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">bool</span> r = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        SetMailFlag (MessageFlags.Deleted, uniqueid, accountId, folderName);</div><div class="line">        <span class="comment">// 将本地邮件状态设置为已删除</span></div><div class="line">        MailBoxEntity mailBox = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid &amp;&amp; a.OwnerMailAccount == accountId).FirstOrDefault ();</div><div class="line">        mailBox.DataStatus = (<span class="keyword">int</span>) DataStatus.Deleted;</div><div class="line">        <span class="keyword">if</span> (_mailBoxService.Update (mailBox) &gt; <span class="number">0</span>) r = <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组件使用感悟"><a href="#组件使用感悟" class="headerlink" title="组件使用感悟"></a>组件使用感悟</h2><p>MailKit和MimeKit组件在项目的使用中较为的便捷，基本包含了所有的基础邮件服务操作。组件提供的SmtpClient类提供的功能很丰富，例如连接邮件服务器，邮件账户认证，组装邮件消息，获取邮件服务器配置信息等等方法的提供，可以让我们在项目中快速的获取邮件服务的所有信息。</p>
<p>使用过邮件功能的项目 都会有困扰，客户端与邮件服务器的连接是否成功，以及邮件是否发送成功状态没有办法很快的获取，只能根据邮件服务器返回的一场状态进行判断。但是MailKit提供对应的方法和异常类，对邮件服务器返回的异常信息进行解析，客户端可以根据这些异常类获取邮件状态。</p>
<p>MailKit组件的提供了ProtocolLogger类，该类用于记录SMTP操作基础信息，该类作用为记录邮件服务日志。在邮件发送完毕后，需要及时的关闭连接，调用Disconnect(true)方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;邮件服务是一般的系统都会拥有和需要的功能，但是对于.Net项目来说，邮件服务的创建和使用会较为的麻烦。.NET对于邮件功能提供了System.Net.Mail用于创建邮件服务，该基础服务提供邮件的基础操作，并且使用也较为的简单。对于真正将该功能使用于项目的人，就会慢慢发现其中的优缺点，甚至有些时候不能忍受其中的问题。在这里介绍一种微软用于替代System.Net.Mail的邮件服务组件MailKit和MimeKit，官网地址：&lt;a href=&quot;http://www.mimekit.net/&quot;&gt;http://www.mimekit.net/&lt;/a&gt; GitHub地址：&lt;a href=&quot;https://github.com/jstedfast/MimeKit&quot;&gt;https://github.com/jstedfast/MimeKit&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="Email" scheme="VickChen.win/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework Core 之数据库迁移</title>
    <link href="VickChen.win/2018/database-migration-of-entity-framework-Core/"/>
    <id>VickChen.win/2018/database-migration-of-entity-framework-Core/</id>
    <published>2018-11-04T09:48:01.000Z</published>
    <updated>2018-11-22T03:05:18.360Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中用到了Entity Framework Core，发现网上很多文章讲的都是之前版本的用法，对于刚接触EF core的朋友来说可能有点懵。特意整理了几个细节</p>
<a id="more"></a>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>首先EF CORE跟以前的EF6是有不同点的，<br>微软官网列出的不同点：[<a href="https://docs.microsoft.com/en-us/ef/efcore-and-ef6/index" target="_blank" rel="external">https://docs.microsoft.com/en-us/ef/efcore-and-ef6/index</a>]</p>
<h3 id="安装-EF-核心-NuGet-包"><a href="#安装-EF-核心-NuGet-包" class="headerlink" title="安装 EF 核心 NuGet 包"></a>安装 EF 核心 NuGet 包</h3><p>若要使用 EF 核心，请为你想要使用的数据库提供程序安装 NuGet 包。 例如，如果目标 SQL Server，你将安装<code>Microsoft.EntityFrameworkCore.SqlServer</code>。</p>
<p>如果你打算使用迁移，则还应安装<code>Microsoft.EntityFrameworkCore.Tools</code>包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Install-Package Microsoft.EntityFrameworkCore.SqlServer</div><div class="line">Install-Package Microsoft.EntityFrameworkCore.Tools</div></pre></td></tr></table></figure>
<p>首先新建一个 Model 类 SysUser:</p>
<p><img src="https://wx3.sinaimg.cn/mw690/9460f058gy1fww6nzsgi5j20l60gnq3i.jpg" alt=""></p>
<p> 然后建立EFCoreContext类:</p>
<p><img src="https://wx2.sinaimg.cn/mw690/9460f058gy1fww6nyoge5j20oq0cddga.jpg" alt=""></p>
<p>自动创建数据库:</p>
<p><img src="https://wx3.sinaimg.cn/mw690/9460f058gy1fww6nzlzg4j20l30cijrv.jpg" alt=""></p>
<p>此时我们的数据库和数据都已经有了:</p>
<p><img src="https://wx2.sinaimg.cn/mw690/9460f058gy1fww6nzlsmhj20e407wglu.jpg" alt=""></p>
<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>此时重点来了，当我们已经有数据库表的时候，我们需要修改字段，如何进行迁移?</p>
<p>首先打开VS-&gt;工具-&gt;NuGet包管理器-&gt;程序包管理控制台</p>
<p>输入命令：<code>Add-Migration init</code>（执行此命令项目生成一个目录<migration>）</migration></p>
<p><img src="https://wx4.sinaimg.cn/mw690/9460f058gy1fww6o0e4lgj20sq08vmxu.jpg" alt=""></p>
<p>我们会发现Model程序集下多了一个文件夹为Migrations里面有3个文件.如下:</p>
<p><img src="https://wx4.sinaimg.cn/mw690/9460f058gy1fww6ny8zauj208e021743.jpg" alt=""></p>
<p>xxxxxxx_init.cs主迁移文件。包含应用迁移（in Up()）和恢复（in Down()）所需的操作。</p>
<p>xxxxxxx_init.Designer.cs - 迁移元数据文件。包含EF使用的信息。</p>
<p>EFCoreContextModelSnapshot.cs - 当前模型的快照。主要用于确定添加下一次迁移时发生了哪些变化.</p>
<p>然后我们执行命令: <code>Update-Database</code></p>
<p>如果你的数据库没创建,是第一次,就会执行成功。如果你前期创建过数据库.但是是第一次创建迁移，就会提示我们的表结构已经存在了。</p>
<p>我们看看xxxxxx_init.cs文件：</p>
<p><img src="https://wx4.sinaimg.cn/mw690/9460f058gy1fww6o0qqmmj20wj0g7wfc.jpg" alt=""></p>
<p>可以看到，这里第一次生成的迁移方法是按照新增来迁移的..而不是修改。</p>
<p>我们把<code>Up()</code>  <code>Down()</code>里面的代码删掉</p>
<p><img src="https://wx2.sinaimg.cn/mw690/9460f058gy1fww6nyzk0kj20il06t749.jpg" alt=""></p>
<p>这样就相当于 本次的迁移，没有做任何操作。</p>
<p>然后我们来创建真正的迁移版本：</p>
<p>首先添加一个Email字段,然后把UserName的长度改为60</p>
<p><img src="https://wx3.sinaimg.cn/mw690/9460f058gy1fww6o0ztg0j20kj0fwaak.jpg" alt=""></p>
<p>然后我们开始迁移：</p>
<p><code>Add-Migration  x2</code> （这里是迁移版本名称，可自定义，可以根据版本回滚）</p>
<p>成功创建迁移文件之后,我们更新数据库.</p>
<p><code>Update-Database x2</code></p>
<p>然后Email字段加上了，UserName长度也修改了，UserName的数据也还在。</p>
<p><img src="https://wx1.sinaimg.cn/mw690/9460f058gy1fww6og0hvoj20if08a74k.jpg" alt=""></p>
<h3 id="删除迁移"><a href="#删除迁移" class="headerlink" title="删除迁移"></a>删除迁移</h3><p>有的时候我们刚刚创建了一个迁移,还没应用到数据库,就发现自己需要变更实体.那我们就可以删除这个没有应用的迁移版本.</p>
<p>执行命令:<code>Remove-Migration</code></p>
<p><em>注意,这里是没有应用过的迁移,可以删除.如果应用过了.则会收到错误信息</em></p>
<h3 id="迁移回滚"><a href="#迁移回滚" class="headerlink" title="迁移回滚"></a>迁移回滚</h3><p>有些时候,我们需要回滚到之前的一个迁移版本.,比如我们部署的时候,开发版本和稳定版本肯定不一样..</p>
<p>那么我们就会用到回滚命令.</p>
<p>执行如下: </p>
<p><code>Update-Database</code>  这里填写需要回滚的版本名称</p>
<p>我们执行  <code>Update-Database</code>   这里填写需要回滚的版本名称</p>
<p>然后我们会发现, x2中的长度已经回到30了，Email字段也没有了….</p>
<p><img src="https://wx1.sinaimg.cn/mw690/9460f058gy1fww6og11llj20j9093q39.jpg" alt=""></p>
<h3 id="生成迁移SQL"><a href="#生成迁移SQL" class="headerlink" title="生成迁移SQL"></a>生成迁移SQL</h3><p>有的时候,我们的生产数据库,是需要用脚本来创建库的.所以我们也可以直接通过实体来生成SQL脚本.命令如下:</p>
<p><code>Script-Migration</code></p>
<p><img src="https://wx4.sinaimg.cn/mw690/9460f058gy1fww6ogsrvrj20yz0mrmz0.jpg" alt=""></p>
<p>举一反三：<code>Script-Migration x2</code>  这个脚本可以自定义需要迁移的版本号、文件名、需要生成迁移脚本的上下文</p>
<p><em>原文地址：<a href="https://www.cnblogs.com/shumin/p/8877297.html" target="_blank" rel="external">https://www.cnblogs.com/shumin/p/8877297.html</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中用到了Entity Framework Core，发现网上很多文章讲的都是之前版本的用法，对于刚接触EF core的朋友来说可能有点懵。特意整理了几个细节&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="Entity Framework" scheme="VickChen.win/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>jQuery实现滚动条到底部时加载数据</title>
    <link href="VickChen.win/2018/jQuery-loads-data-when-scrollbar-to-bottom/"/>
    <id>VickChen.win/2018/jQuery-loads-data-when-scrollbar-to-bottom/</id>
    <published>2018-10-01T15:32:01.000Z</published>
    <updated>2018-12-08T10:29:50.421Z</updated>
    
    <content type="html"><![CDATA[<p>滚动条到底部加载数据原理很简单，就是为window或者滚动元素添加一个scroll事件，浏览器每次触发scroll事件时判断是否滚动到了浏览器底部，如果到了底部则加载新数据。关键是计算滚动条是否滚动到了浏览器底部</p>
<a id="more"></a>
<p>滚动条卷起来的高度 + 窗口高度 &gt; 文档的总高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//滚动响应区域高度取50px</span></div><div class="line">    <span class="keyword">if</span>(scrollTop() + windowHeight() &gt;= (documentHeight() - <span class="number">50</span>))</div><div class="line">    &#123;</div><div class="line">        loadMore();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadMore</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//todo XXX</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取页面顶部被卷起来的高度函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取页面顶部被卷起来的高度</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(</div><div class="line">    <span class="comment">//chrome</span></div><div class="line">    <span class="built_in">document</span>.body.scrollTop,</div><div class="line">    <span class="comment">//firefox/IE</span></div><div class="line">    <span class="built_in">document</span>.documentElement.scrollTop);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>chrome浏览器和Firefox/IE对滚动条是属于body还是html理解不同导致处理不同。</em></p>
<p>获取页面文档的总高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取页面文档的总高度</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">documentHeight</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">//现代浏览器（IE9+和其他浏览器）和IE8的document.body.scrollHeight和</span></div><div class="line">    <span class="comment">//document.documentElement.scrollHeight都可以 </span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight,<span class="built_in">document</span>.documentElement.scrollHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个算法和jQuery计算文档高度的方法一致。</p>
<p>获取页面浏览器视口的高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">windowHeight</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)? </div><div class="line">     <span class="built_in">document</span>.documentElement.clientHeight: <span class="built_in">document</span>.body.clientHeight;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里需要说明的是document.compatMode。很陌生，一般情况貌似没有遇到过。</p>
<p><code>document.compatMode</code>有两个取值”<strong>BackCompat</strong>“和”<strong>CSS1Compat</strong>“。</p>
<p>官方解释是BackCompat：标准兼容模式关闭。CSS1Compat：标准兼容模式开启。  </p>
<p>　　IE对盒模型的渲染在 <code>Standards Mode</code>和<code>Quirks Mode</code>是有很大差别的，在<code>Standards Mode</code>下对于盒模型的解释和其他的标准浏览器是一样，</p>
<p>但在<code>Quirks Mode</code>模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。  </p>
<p>　　举个例子说明两种模式之间的差别有多大。</p>
<p>　　当document.compatMode等于BackCompat时，浏览器客户区宽度是<code>document.body.clientWidth</code></p>
<p>　　当document.compatMode等于CSS1Compat时，浏览器客户区宽度是<code>document.documentElement.clientWidth</code></p>
<p>　　还有其他属性类似。这里不说了，但是我们可以预见两种模式导致IE渲染的基石都更改了，可想而知构建出来的建筑物差别当有多大。</p>
<p>　　所以请为每一个页面声明Doctype不仅仅是一个好习惯，而且是一个必要的处理。Quirks Mode可以进垃圾堆了。</p>
<p>当用户滚动元素中到一个不同的地方时，scroll事件将发送到这个元素。它适用于<strong>window对象</strong>，但也可滚动框架与CSS overflow属性设置为scroll的元素</p>
<h3 id="普通的div滚动到底部加载更多的方法"><a href="#普通的div滚动到底部加载更多的方法" class="headerlink" title="普通的div滚动到底部加载更多的方法"></a>普通的div滚动到底部加载更多的方法</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id="test"&gt;内容&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#test'</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> top = $(<span class="keyword">this</span>).scrollTop();</div><div class="line">		<span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();</div><div class="line">		<span class="keyword">var</span> scrollHeight = $(<span class="keyword">this</span>).get(<span class="number">0</span>).scrollHeight;  </div><div class="line">		<span class="keyword">if</span>(scrollHeight &lt;= top+height)&#123;</div><div class="line">			loadMore();</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<p>运行发现#test的div怎么样也不能接受scroll时间，最后经过查找资料和测试，发现要给div加上overflow和height的属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#test</span>&#123;</div><div class="line">		<span class="attribute">overflow</span>:scroll;</div><div class="line">		<span class="attribute">height</span>:<span class="number">655px</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="window滚动事件"><a href="#window滚动事件" class="headerlink" title="window滚动事件"></a>window滚动事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop(); <span class="comment">// 滚动条距离顶部的高度</span></div><div class="line">     <span class="comment">//scrollHeight,windowHeight,scrollHeight1三个height相同，都是这个页面的高度</span></div><div class="line">     <span class="keyword">var</span> scrollHeight = $(<span class="built_in">document</span>).height(); <span class="comment">// 当前页面的总高度</span></div><div class="line">     <span class="comment">// 当前可视的页面高度，jquery获取的不是屏幕的高度，而是整个文档的高度</span></div><div class="line">     <span class="keyword">var</span> windowHeight = $(<span class="built_in">window</span>).height();</div><div class="line">     <span class="keyword">var</span> scrollHeight1 = $(<span class="string">"#test"</span>).get(<span class="number">0</span>).scrollHeight;</div><div class="line">     <span class="keyword">var</span> windowidth = $(<span class="built_in">window</span>).width();</div><div class="line">     <span class="keyword">var</span> documentwidtht = $(<span class="built_in">document</span>).width();</div><div class="line">     <span class="keyword">var</span> innerHeight = <span class="built_in">window</span>.innerHeight; <span class="comment">//window的高度，即手机的高度</span></div><div class="line">     <span class="keyword">var</span> clientHeight = <span class="built_in">document</span>.body.clientHeight; <span class="comment">//window的高度</span></div><div class="line">     <span class="comment">//这个是body的整个高度，chrom测试</span></div><div class="line">     <span class="keyword">var</span> clientHeight1 = <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">     <span class="comment">// 距离顶部+当前高度 &gt;=文档总高度，即代表滑动到底部</span></div><div class="line">     <span class="keyword">if</span>(scrollTop + innerHeight &gt;= scrollHeight)&#123;</div><div class="line">         loadMore();</div><div class="line">     &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p><em>原文链接：<a href="https://blog.csdn.net/wuyou1336/article/details/56035560" target="_blank" rel="external">https://blog.csdn.net/wuyou1336/article/details/56035560</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;滚动条到底部加载数据原理很简单，就是为window或者滚动元素添加一个scroll事件，浏览器每次触发scroll事件时判断是否滚动到了浏览器底部，如果到了底部则加载新数据。关键是计算滚动条是否滚动到了浏览器底部&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jQuery" scheme="VickChen.win/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>发布Core程序时遇到的错误</title>
    <link href="VickChen.win/2018/error-in-publish-core-program/"/>
    <id>VickChen.win/2018/error-in-publish-core-program/</id>
    <published>2018-09-21T10:13:04.000Z</published>
    <updated>2018-11-10T11:01:04.083Z</updated>
    
    <content type="html"><![CDATA[<p>此贴主要用于记录Core程序在发布时遇到的错误。</p>
<a id="more"></a>
<ol>
<li><h3 id="“该项目使用-Microsoft-NETCore-App-版本-2-1-0-进行了还原”"><a href="#“该项目使用-Microsoft-NETCore-App-版本-2-1-0-进行了还原”" class="headerlink" title="“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原”"></a>“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原”</h3><blockquote>
<p>“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原……请确保将相同的设置用于 restore 和后续操作，例如 build 或 publish。 如果在 build 或 publish 期间设置了 RuntimeIdentifier 属性……”</p>
</blockquote>
<p> 解决办法，将发布设置中的部署模式设置为框架依赖，取消发布设置里的RuntimeIdentifier 设置，即中文版设置里的”目标运行时“选项，选回“可移植”即可。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此贴主要用于记录Core程序在发布时遇到的错误。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="DeBug" scheme="VickChen.win/tags/DeBug/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core使用 MiniProfiler 进行性能分析</title>
    <link href="VickChen.win/2018/net-core-use-miniProfiler-for-performance-analysis/"/>
    <id>VickChen.win/2018/net-core-use-miniProfiler-for-performance-analysis/</id>
    <published>2018-08-31T18:11:52.000Z</published>
    <updated>2018-11-28T11:02:49.079Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用EF和在很大程度提高了开发速度，不过随之带来的是很多性能低下的写法和生成不太高效的sql。</p>
<p>虽然我们可以使用SQL Server Profiler来监控执行的sql，不过个人觉得实属麻烦，每次需要打开、过滤、清除、关闭。</p>
<p>MiniProfiler此时就派上用场了，这是<a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>团队设计的一款对ASP.NET MVC的性能分析的小程序。可以对一个页面本身，及该页面通过直接引用、Ajax、Iframe形式访问的其它页面进行监控,监控内容包括数据库内容，并可以显示数据库访问的SQL（支持EF、EF CodeFirst等 ）。并且以很友好的方式展现在页面上。</p>
<a id="more"></a>
<p>官方文档： <a href="https://miniprofiler.com/dotnet/AspDotNetCore" target="_blank" rel="external">https://miniprofiler.com/dotnet/AspDotNetCore</a></p>
<p>1、添加包 <a href="https://www.nuget.org/packages/MiniProfiler.AspNetCore.Mvc/" target="_blank" rel="external">MiniProfiler.AspNetCore.Mvc</a>   和    <a href="https://www.nuget.org/packages/MiniProfiler.EntityFrameworkCore" target="_blank" rel="external">MiniProfiler.EntityFrameworkCore</a></p>
<p>2、在 Startup.cs 中的 ConfigureServices 下添加，也可以根据官方文档中的说明进行相应的配置</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.AddMiniProfiler().AddEntityFramework();</div></pre></td></tr></table></figure>
<p>3、在 Startup.cs 中的 Configure 下添加</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.UseMiniProfiler();</div></pre></td></tr></table></figure>
<p>4、修改 _ViewImports.cshtml </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">using</span> StackExchange.Profiling</div><div class="line">@addTagHelper *, MiniProfiler.AspNetCore.Mvc</div></pre></td></tr></table></figure>
<p>5、将MiniProfiler添加到布局文件（Shared/_Layout.cshtml）中</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;mini-profiler /&gt;</div></pre></td></tr></table></figure>
<p>完成~</p>
<mini-profiler>


</mini-profiler>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们使用EF和在很大程度提高了开发速度，不过随之带来的是很多性能低下的写法和生成不太高效的sql。&lt;/p&gt;
&lt;p&gt;虽然我们可以使用SQL Server Profiler来监控执行的sql，不过个人觉得实属麻烦，每次需要打开、过滤、清除、关闭。&lt;/p&gt;
&lt;p&gt;MiniProfiler此时就派上用场了，这是&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;团队设计的一款对ASP.NET MVC的性能分析的小程序。可以对一个页面本身，及该页面通过直接引用、Ajax、Iframe形式访问的其它页面进行监控,监控内容包括数据库内容，并可以显示数据库访问的SQL（支持EF、EF CodeFirst等 ）。并且以很友好的方式展现在页面上。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>HangFire快速入门</title>
    <link href="VickChen.win/2018/how-to-use-hangfire-on-net-core/"/>
    <id>VickChen.win/2018/how-to-use-hangfire-on-net-core/</id>
    <published>2018-08-27T13:48:07.000Z</published>
    <updated>2018-11-27T08:53:10.776Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/HangfireIO/Hangfire" target="_blank" rel="external">Hangfire</a>作为一款高人气且容易上手的分布式后台执行服务，支持多种数据库。在.net core的环境中，由Core自带的DI管理着生命周期，免去了在NF4.X环境中配置<a href="http://docs.hangfire.io/en/latest/deployment-to-production/making-aspnet-app-always-running.html" target="_blank" rel="external">always running</a>的麻烦，真正做到开箱即用。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Hangfie官方支持是MsSql和redis，除此之外，可供选择的还有<a href="https://github.com/frankhommers/Hangfire.PostgreSql" target="_blank" rel="external">PostgreSql</a>和<a href="https://github.com/sergeyzwezdin/Hangfire.Mongo" target="_blank" rel="external">Mongo</a>。<br>在应用入口项目需要引用<a href="https://www.nuget.org/packages/Hangfire.AspNetCore/" target="_blank" rel="external">Hangfire.AspNetCore</a>和特定持久库，比如使用了MsSql数据库的<a href="https://www.nuget.org/packages/Hangfire.SqlServer/" target="_blank" rel="external">Hangfire.SqlServer</a>。<br>而在其他项目（比如bll层的项目），只需引用基础的<a href="https://www.nuget.org/packages/Hangfire.Core/" target="_blank" rel="external">Hangfire.Core</a>就可以了。</p>
<h2 id="Startup-配置"><a href="#Startup-配置" class="headerlink" title="Startup 配置"></a>Startup 配置</h2><h3 id="注入Hnagfire服务"><a href="#注入Hnagfire服务" class="headerlink" title="注入Hnagfire服务"></a>注入Hnagfire服务</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.AddHangfire(x =&gt; x.UseSqlServerStorage(<span class="string">"&lt;connection string&gt;"</span>));</div></pre></td></tr></table></figure>
<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><p>启动Hangfire服务和对应的web面板如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.UseHangfireServer();<span class="comment">//启动Hangfire服务</span></div><div class="line">app.UseHangfireDashboard();<span class="comment">//启动hangfire仪表盘</span></div></pre></td></tr></table></figure>
<p>细心的观众可能会发现，这两个方法都有可选参数，可以提供更多的配置。</p>
<h4 id="配置任务属性"><a href="#配置任务属性" class="headerlink" title="配置任务属性"></a>配置任务属性</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jobOptions = <span class="keyword">new</span> BackgroundJobServerOptions</div><div class="line">&#123;</div><div class="line">       Queues = <span class="keyword">new</span>[] &#123; <span class="string">"test"</span>,<span class="string">"default"</span> &#125;,<span class="comment">//队列名称，只能为小写</span></div><div class="line">       WorkerCount = Environment.ProcessorCount * <span class="number">5</span>, <span class="comment">//并发任务数</span></div><div class="line">       ServerName=<span class="string">"hangfire1"</span>,<span class="comment">//服务器名称</span></div><div class="line"> &#125;;</div><div class="line">app.UseHangfireServer(jobOptions);</div></pre></td></tr></table></figure>
<p><code>Queues</code> 要处理的队列列表  </p>
<p>对于有多个服务器同时连接到数据库，Hangfire会认为他们是分布式中的一份子。现实中不同服务器往往存在着差异，这个时候就需要合理配置服务器(应用)的处理队列，举两个例子：  </p>
<p>1.对于服务器性能差异的处理，有100个A任务和50个B任务需要处理，假设A服务器的性能是B服务器的两倍，如果不配置队列，那么会平分任务给两个服务器。如果我们只让B服务器处理B任务，而A服务器同时处理两种任务，这样B就能减少一些压力。</p>
<p>2.对于服务器能力差异的处理，假设A服务器能处理A和B两种任务，B服务器只能处理B任务（没有处理A任务的方法或对象），如果不配置队列，默认会让B也执行A任务，从而产生错误。反面一想，如果A服务器和B服务器都有共同的接口，B服务器不实现接口的方法，发起一个专属于A服务器队列的任务，而A服务器通过注入实现接口的方法，可以达到传递任务的效果。</p>
<p><code>WorkerCount</code> 并发任务数，超出并发数将等待之前的任务完成  </p>
<p>默认的并发任务数是线程（cpu）的5倍，如果IO密集型任务多而CPU密集型的任务少，可以考虑调高并发任务数。</p>
<p>以上是我用到的，当然还有其他配置参数等着你去开发。</p>
<h4 id="配置访问权限"><a href="#配置访问权限" class="headerlink" title="配置访问权限"></a>配置访问权限</h4><p>在实际生产中，我们可能不希望任何人都可以访问面板，或暂停执行某些任务，这时就需要重写面板的权限了。默认情况下，只有本地访问权限才能使用Hangfire仪表板。所以需要重写控制面板，以便远程访问。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> DashboardOptions</div><div class="line">&#123;</div><div class="line">    Authorization = <span class="keyword">new</span>[] &#123; <span class="keyword">new</span> HangfireAuthorizationFilter() &#125;</div><div class="line">&#125;;</div><div class="line">app.UseHangfireDashboard(<span class="string">"/hangfire"</span>, options);</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HangfireAuthorizationFilter</span> : <span class="title">IDashboardAuthorizationFilter</span></div><div class="line">&#123;</div><div class="line"> <span class="comment">//这里需要配置权限规则</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Authorize</span>(<span class="params">DashboardContext context</span>)</span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-官方文档"><a href="#使用-官方文档" class="headerlink" title="使用(官方文档)"></a>使用(<a href="http://docs.hangfire.io/en/latest/index.html" target="_blank" rel="external">官方文档</a>)</h2><p>任务类型：</p>
<p><code>Fire-and-forget</code> 直接将任务加入到待执行任务队列<br><code>Delayed</code> 在当前时间后的某个时间将任务加入到待执行任务队列<br><code>Recurring</code> 周期性任务，每一个周期就将任务加入到待执行任务队列<br><code>Continuations</code> 顾名思义，继续执行任务</p>
<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = JobStorage.Current.GetConnection())</div><div class="line"> &#123;</div><div class="line">       <span class="keyword">var</span> storageConnection = connection <span class="keyword">as</span> JobStorageConnection;</div><div class="line">       <span class="keyword">if</span> (storageConnection != <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">           <span class="comment">//立即启动：Fire-And-forget（发布/订阅）</span></div><div class="line">           <span class="keyword">var</span> jobId = BackgroundJob.Enqueue(()=&gt;Console.WriteLine(<span class="string">"Fire-and-forget!"</span>));</div><div class="line">           <span class="comment">//延迟：如果想要延迟某些任务的执行，可以是用以下任务</span></div><div class="line">           <span class="comment">//在给定延迟时间后，任务会被排入队列，并且和发布/订阅任务一样执行。</span></div><div class="line">           <span class="keyword">var</span> jobId =BackgroundJob.Schedule(() =&gt; Console.WriteLine(<span class="string">"Delayed"</span>), TimeSpan.FromDays(<span class="number">1</span>));</div><div class="line">           <span class="comment">//循环：按照周期性（小时，天等）来调用方法</span></div><div class="line">           <span class="comment">//请使用RecurringJob类。在复杂的场景，您可以使用CRON表达式指定计划时间来处理任务。</span></div><div class="line">           <span class="keyword">var</span> jobId =RecurringJob.AddOrUpdate(() =&gt; Console.WriteLine(<span class="string">"Daily Job"</span>), Cron.Daily);</div><div class="line">           <span class="comment">//连续：连续性允许您通过将多个后台任务链接在一起来定义复杂的工作流。</span></div><div class="line">           <span class="keyword">var</span> id = BackgroundJob.Enqueue(() =&gt; Console.WriteLine(<span class="string">"Hello, "</span>));</div><div class="line">           BackgroundJob.ContinueWith(id, () =&gt; Console.WriteLine(<span class="string">"world!"</span>));</div><div class="line">       &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当然，不仅仅只有静态方法可以执行，Hangfire的任务也是支持.net core的依赖注入的，会构造一个对象并执行对应的方法。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//立即执行</span></div><div class="line">jobId = BackgroundJob.Enqueue&lt;SomeClass&gt;(a =&gt; a.SomeMethod(someParams))</div><div class="line"><span class="comment">//延迟任务</span></div><div class="line">jobId = BackgroundJob.Schedule&lt;SomeClass&gt;(a =&gt; a.RunTask(someParams), RunDateTime);</div><div class="line"><span class="comment">//以此类推...</span></div></pre></td></tr></table></figure>
<h3 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h3><h4 id="任务的新增删除："><a href="#任务的新增删除：" class="headerlink" title="任务的新增删除："></a>任务的新增删除：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//操作定时任务</span></div><div class="line">RecurringJob.RemoveIfExists(JobId);</div><div class="line">RecurringJob.AddOrUpdate(JobId, () =&gt; Method(param), Cron.Daily(hour, min));</div><div class="line"><span class="comment">//删除延迟任务</span></div><div class="line">BackgroundJob.Delete(JobId);<span class="comment">//删除原有任务</span></div></pre></td></tr></table></figure>
<h4 id="使用日志过滤器-点我查看"><a href="#使用日志过滤器-点我查看" class="headerlink" title="使用日志过滤器(点我查看)"></a>使用日志过滤器(<a href="http://docs.hangfire.io/en/latest/extensibility/using-job-filters.html" target="_blank" rel="external">点我查看</a>)</h4><p>Hangfire支持自定义过滤器,可以对任务在创建时、执行中、执行后等等状态执行特定特定的操作。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//特定方法过滤器</span></div><div class="line">[LogEverything]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>) </span>&#123; </div><div class="line">&#125;</div><div class="line"><span class="comment">//全局过滤器</span></div><div class="line">GlobalJobFilters.Filters.Add(<span class="keyword">new</span> LogEverythingAttribute());</div></pre></td></tr></table></figure>
<p><em>参考文章:[<a href="https://www.cnblogs.com/chenug/p/6655636.html" target="_blank" rel="external">https://www.cnblogs.com/chenug/p/6655636.html</a>]</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/HangfireIO/Hangfire&quot;&gt;Hangfire&lt;/a&gt;作为一款高人气且容易上手的分布式后台执行服务，支持多种数据库。在.net core的环境中，由Core自带的DI管理着生命周期，免去了在NF4.X环境中配置&lt;a href=&quot;http://docs.hangfire.io/en/latest/deployment-to-production/making-aspnet-app-always-running.html&quot;&gt;always running&lt;/a&gt;的麻烦，真正做到开箱即用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>在IIS上部署你的ASP.NET Core 2.1项目</title>
    <link href="VickChen.win/2018/deploy-your-core-project-on-the-iis/"/>
    <id>VickChen.win/2018/deploy-your-core-project-on-the-iis/</id>
    <published>2018-08-02T11:40:31.000Z</published>
    <updated>2018-11-22T03:15:56.717Z</updated>
    
    <content type="html"><![CDATA[<p>与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是<code>AspNetCoreModule</code>，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。</p>
<a id="more"></a>
<ol>
<li><p>开启控制台</p>
<p>在控制面板→程序→启用或关闭Windows功能→勾选Internet Information Services以及Web管理工具下的IIS管理控制台</p>
<p><img src="https://wx2.sinaimg.cn/mw690/9460f058gy1ftxjhhkyelj20lj0gl0us.jpg" alt=""></p>
</li>
<li><p>IIS 安装AspNetCoreModule 模块</p>
<p>部署之前要确保你的IIS上已经安装了AspNetCoreModule托管模块，如果没有的话，点击<a href="https://www.microsoft.com/net/download/windows" target="_blank" rel="external">这里</a>进行下载并安装</p>
</li>
</ol>
<p><img src="https://wx2.sinaimg.cn/mw690/9460f058gy1ftxjhhjtoaj20rm0gs0tc.jpg" alt=""><br><strong>安装完后一定要重启，否则 Http Error 502</strong></p>
<ol>
<li><p>发布</p>
<p>项目右键–发布</p>
</li>
<li><p>添加网站</p>
<p>添加一个网站，设置一下名称，并将路径指向你刚才发布的文件夹</p>
<p>设置应用程序池的.NET CLR版本为“无托管代码” 。因为IIS是作为一个反向代理的角色，并不需要它来托管代码</p>
</li>
</ol>
<p><img src="https://wx3.sinaimg.cn/mw690/9460f058gy1ftxjhhjecvj20kt0e1gmd.jpg" alt=""><br><img src="https://wx3.sinaimg.cn/mw690/9460f058gy1ftxjhhlf4aj20y30jn0vv.jpg" alt=""></p>
<p>OK!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是&lt;code&gt;AspNetCoreModule&lt;/code&gt;，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="IIS" scheme="VickChen.win/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2.1 使用Cookie验证身份</title>
    <link href="VickChen.win/2018/aspnet-core-security-authentication-cookie/"/>
    <id>VickChen.win/2018/aspnet-core-security-authentication-cookie/</id>
    <published>2018-06-13T10:46:01.000Z</published>
    <updated>2018-12-17T11:06:24.738Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 <code>HttpContext.User</code> 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。</p>
<p>ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在<em>Startup.cs</em>文件中的Configure方法中的调用 <code>UseAuthentication</code> 方法会添加设置 <code>HttpContext.User</code> 属性的 <code>AuthenticationMiddleware</code> 中间件。</p>
<a id="more"></a>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>按下列步骤操作：</p>
<ol>
<li><p>如果不使用 <code>Microsoft.AspNetCore.All</code> <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage" target="_blank" rel="external">元包</a>，则在您的项目中安装2.X版的 <code>Microsoft.AspNetCore.Authentication.Cookies</code> NuGet包。</p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>Configure</code> 方法中调用<code>UseAuthentication</code> 方法：<code>app.UseAuthentication();</code></p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>ConfigureServices</code> 方法中调用 <code>AddAuthentication</code> 和 <code>AddCookie</code> 方法：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</div><div class="line">        .AddCookie(<span class="string">"MyCookieAuthenticationScheme"</span>, options =&gt; &#123;</div><div class="line">            options.AccessDeniedPath = <span class="string">"/Account/Forbidden/"</span>;</div><div class="line">            options.LoginPath = <span class="string">"/Account/Unauthorized/"</span>;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>上面的代码片段配置了以下部分或全部选项：</p>
<ul>
<li>AccessDeniedPath - 当用户尝试访问资源但没有通过任何授权策略时，这是请求会重定向的相对路径资源。</li>
<li>AuthenticationScheme - 这是一个已知的特定Cookie认证方案的值。当有多个Cookie验证实例，并且您想限制对一个实例的授权时，这就非常有用。   </li>
<li><p>LoginPath - 当用户尝试访问资源但尚未认证时，这是请求重定向的相对路径。</p>
<p>其它选项包括为Cookie认证创建的设置选项，身份验证的Cookie的名称，Cookie的域和Cookie各种安全属性。默认情况下，Cookie身份验证为其创建的任何Cookie使用适当的安全选项，例如：</p>
</li>
<li>设置HttpOnly标志以防止客户端<code>JavaScript</code>中访问Cookie</li>
<li>如果请求是通过HTTPS访问，则将Cookie限制为HTTPS</li>
</ul>
</li>
</ol>
<h2 id="创建身份认证Cookie"><a href="#创建身份认证Cookie" class="headerlink" title="创建身份认证Cookie"></a>创建身份认证Cookie</h2><p>要创建一个保存用户信息的cookie，您必须构建一个<a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal?view=netframework-4.7.2" target="_blank" rel="external">ClaimsPrincipal</a>保存您希望序列化到Cookie中的信息。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(<span class="string">"MyCookieAuthenticationScheme"</span>, principal);</div></pre></td></tr></table></figure></p>
<p>这将创建一个加密的Cookie并将其添加到当前响应中。在调用<code>SignInAsync</code>时，必须在配置中指定的<code>AuthenticationScheme</code><br>顺便提一下，使用的加密方式是ASP.NET Core的<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-2.1&amp;tabs=aspnetcore2x#data-protection-configuring" target="_blank" rel="external">Data Protection</a>系统。如果您在多台机器上进行托管、负载平衡或使用Web集群，则需要配置<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection?view=aspnetcore-2.1#security-data-protection-getting-started" target="_blank" rel="external">Data Protection</a>才能使用相同的密钥和应用程序标识符。</p>
<h2 id="Signing-out-登出"><a href="#Signing-out-登出" class="headerlink" title="Signing out(登出)"></a>Signing out(登出)</h2><p>要退出当前用户并删除其Cookie，请在控制器中调用以下方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="服务端变化反馈"><a href="#服务端变化反馈" class="headerlink" title="服务端变化反馈"></a>服务端变化反馈</h2><blockquote>
<p>警告： 一旦创建了认证的Cookie，它将成为唯一的身份来源。即使您在服务系统中禁用用户，Cookie身份验证也无法了解此信息，只要Cookie有效，用户仍可登录。</p>
</blockquote>
<p>Cookie认证在其选项中提供了一系列事件。<code>ValidateAsync()</code>事件可用于拦截和重写Cookie身份验证。</p>
<p>可以考虑在后端用户数据库中增加<code>LastChanged</code>列。为了在数据库更改时使Cookie无效，您应该首先在创建Cookie时添加一个<code>LastChanged</code>包含当前值的声明。数据库更改时，更新<code>LastChanged</code>例的值。</p>
<p>要重写<code>ValidateAsync()</code>事件的实现，您必须编写一个具有以下签名的方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span>;</div></pre></td></tr></table></figure></p>
<p>ASP.NET Core Identity 在<code>SecurityStampValidator</code>实现了这一逻辑，<a href="https://github.com/aspnet/Identity/blob/rel/2.0.0/src/Microsoft.AspNetCore.Identity/SecurityStampValidator.cs" target="_blank" rel="external">链接地址</a>。示例如下所示：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LastChangedValidator</span></div><div class="line">  &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span></div><div class="line">      &#123;</div><div class="line">          <span class="comment">// Pull database from registered DI services.</span></div><div class="line">          <span class="keyword">var</span> userRepository = context.HttpContext.RequestServices.GetRequiredService&lt;IUserRepository&gt;();</div><div class="line">          <span class="keyword">var</span> userPrincipal = context.Principal;</div><div class="line">  </div><div class="line">          <span class="comment">// Look for the last changed claim.</span></div><div class="line">          <span class="keyword">string</span> lastChanged;</div><div class="line">          lastChanged = (<span class="keyword">from</span> c <span class="keyword">in</span> userPrincipal.Claims</div><div class="line">                          <span class="keyword">where</span> c.Type == <span class="string">"LastUpdated"</span></div><div class="line">                          <span class="keyword">select</span> c.Value).FirstOrDefault();</div><div class="line">  </div><div class="line">          <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(lastChanged) ||</div><div class="line">              !userRepository.ValidateLastChanged(userPrincipal, lastChanged))</div><div class="line">          &#123;</div><div class="line">              context.RejectPrincipal();</div><div class="line">              <span class="keyword">await</span> context.HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>然后，将在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中将Cookie服务注册进行配置：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</div><div class="line">           .AddCookie(options =&gt;</div><div class="line">           &#123;</div><div class="line">               options.Events = <span class="keyword">new</span> CookieAuthenticationEvents</div><div class="line">               &#123;</div><div class="line">                   OnValidatePrincipal = LastChangedValidator.ValidateAsync</div><div class="line">               &#125;;</div><div class="line">           &#125;);</div></pre></td></tr></table></figure>
<p>如果要非破坏性地更新用户主体，可以调用<code>context.ReplacePrincipal()</code>，并将<code>context.ShouldRenew</code>属性设置为<code>true</code>。</p>
<h2 id="Cookie设置选项"><a href="#Cookie设置选项" class="headerlink" title="Cookie设置选项"></a>Cookie设置选项</h2><p><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.cookieauthenticationoptions" target="_blank" rel="external">CookieAuthenticationOptions</a>类提供了各种配置选项，在创建时调整Cookie的配置。</p>
<ul>
<li><code>ClaimsIssuer</code>是由Cookie认证创建的任何声明时使用的Issuer属性。</li>
<li><code>CookieBuilder.Domain</code>是提供Cookie的域名。默认情况下，这是发送请求的主机名。浏览器仅将Cookie提供给匹配的主机名。您可能希望对此进行调整，以便您的域中的任何主机都可以使用Cookie。例如，将Cookie域名设置为<code>.contoso.com</code>，可以使用Cookie的域名有<code>contoso.com</code>、<code>www.contoso.com</code>、<code>staging.www.contoso.com</code>等</li>
<li><code>CookieBuilder.HttpOnly</code>是一个标识，指定Cookie是否只能由服务器访问。默认为true。如果您的应用程序具有Cross-Site Scripting(XSS)的问题，更改此值可能会导致Cookie被盗用。</li>
<li><code>CookieBuilder.Path</code>可用于隔离在相同主机名上运行的应用程序。如果你有一个应用程序在<code>/app1</code>中运行，并希望限制发送的Cookie只发送到该应用程序，那么您应该将<code>CookiePath</code>属性设置为<code>/app1</code>。通过这样做，Cookie只适用于对<code>/app1</code>或其下任何内容的请求。</li>
<li><code>CookieBuilder.SameSite</code>表示浏览器是否允许Cookie被附加到同一站点或跨站点的请求。默认为<code>SameSiteMode.Lax</code>。</li>
<li><code>CookieBuilder.SecurePolicy</code>是一个标识，表示创建的Cookie是否应该被限制为HTTPS，HTTP或HTTPS，或与请求相同的协议。默认为<code>SameAsRequest</code>。</li>
<li><code>ExpireTimeSpan</code>是TimeSpan类型，在此时间段之后Cookie将过期。将当前日期加上此时间段为创建Cookie的到期日期。</li>
<li><code>SlidingExpiration</code>是一个标识，指示当超过一半的<code>ExpireTimeSpan</code>间隔时，Cookie到期日期是否复位。新的到期日是当前时间加上<code>ExpireTimespan</code>。调用<code>SignInAsync</code>时，可以使用<code>AuthenticationProperties</code>类设置绝对到期时间。绝对到期时间可以通过限制认证Cookie有效的时间来提高应用程序的安全性。<br>在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中使用<code>CookieAuthenticationOptions</code>的例子如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication()</div><div class="line">        .AddCookie(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.Cookie.Name = <span class="string">"AuthCookie"</span>;</div><div class="line">            options.Cookie.Domain = <span class="string">"contoso.com"</span>;</div><div class="line">            options.Cookie.Path = <span class="string">"/"</span>;</div><div class="line">            options.Cookie.HttpOnly = <span class="literal">true</span>;</div><div class="line">            options.Cookie.SameSite = SameSiteMode.Lax;</div><div class="line">            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="持久Cookie和绝对到期时间"><a href="#持久Cookie和绝对到期时间" class="headerlink" title="持久Cookie和绝对到期时间"></a>持久Cookie和绝对到期时间</h2><p>您可能希望Cookie在浏览器会话中持续存在，并希望设置身份和Cookie传输的绝对过期时间。这种持久性应该只能是用户显示同意，在登录时的“记住我”复选框或类似的机制启用。您可以通过在创建身份认证Cookie时调用的<code>SignInAsync</code>方法中使用<code>AuthenticationProperties</code>参数来执行这些操作。例如：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</div><div class="line">      <span class="string">"MyCookieAuthenticationScheme"</span>,</div><div class="line">      principal,</div><div class="line">      <span class="keyword">new</span> AuthenticationProperties</div><div class="line">      &#123;</div><div class="line">          IsPersistent = <span class="literal">true</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码段创建一个身份和相应的Cookie，直到浏览器关闭。以前通过Cookie设置选项配置的任何滑动过期设置仍然有效。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</div><div class="line">        <span class="string">"MyCookieAuthenticationScheme"</span>,</div><div class="line">        principal,</div><div class="line">        <span class="keyword">new</span> AuthenticationProperties</div><div class="line">        &#123;</div><div class="line">            ExpiresUtc = DateTime.UtcNow.AddMinutes(<span class="number">20</span>)</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上述代码段创建一个持续20分钟的身份和相应的cookie。这将忽略以前通过Cookie设置选项配置的任何滑动过期设置。</p>
<p><code>ExpiresUtc</code>和<code>IsPersistent</code>属性是互斥的。只能同时生效一个</p>
<p>原文：<a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x" target="_blank" rel="external">《Using Cookie Authentication without ASP.NET Core Identity》</a></p>
<p>翻译：<a href="http://www.cnblogs.com/tdfblog" target="_blank" rel="external">Sweet Tang</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。&lt;/p&gt;
&lt;p&gt;ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在&lt;em&gt;Startup.cs&lt;/em&gt;文件中的Configure方法中的调用 &lt;code&gt;UseAuthentication&lt;/code&gt; 方法会添加设置 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性的 &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; 中间件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>Emmet语法入门</title>
    <link href="VickChen.win/2017/getting-started-with-Emmet-syntax/"/>
    <id>VickChen.win/2017/getting-started-with-Emmet-syntax/</id>
    <published>2017-08-17T15:27:18.000Z</published>
    <updated>2018-12-17T11:04:49.690Z</updated>
    
    <content type="html"><![CDATA[<p>Emmet是一个编辑器插件，以前被称作为 Zen Coding。使用类似于 CSS 选择器的语法描述元素在生成的文档树中的位置及其属性。</p>
<p>使用 Emmet 可以帮助程序员快速的编写 HTML 和 CSS 代码，从而提高 Web前端开发的效率。<a href="https://www.emmet.io/" target="_blank" rel="external">官网</a>提供多编辑器支持。我一般使用<a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>，下面就以VS Code插件举例。</p>
<a id="more"></a>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>在编辑器中输入<code>html:5</code>或<code>!</code>，按下Tab键，将会生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="UTF-8"&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</div><div class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    </div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>是的，你没看错，生成这么一大段，你只需要输入一个<code>!</code></p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>可以使用元素名（如 div 或者 p）来<em>生成</em> HTML 标签。Emmet 没有预定义的有效元素名的集合，可以把任何单词当作标签来生成和使用：<code>div</code> → <code>&lt;div&gt;&lt;/div&gt;</code>, <code>foo</code> → <code>&lt;foo&gt;&lt;/foo&gt;</code> 等。</p>
<h2 id="层级操作符"><a href="#层级操作符" class="headerlink" title="层级操作符"></a>层级操作符</h2><p>嵌套运算符用于以缩写的方式安排元素在生成文档树中的位置：将其放在内部或成为相邻的元素。</p>
<h3 id="子元素：-gt"><a href="#子元素：-gt" class="headerlink" title="子元素：&gt;"></a>子元素：&gt;</h3><p>可以使用 <code>&gt;</code> 运算符指定嵌套元素在另一个元素内部：</p>
<p><code>div&gt;ul&gt;li</code></p>
<p>生成的结果为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="兄弟元素："><a href="#兄弟元素：" class="headerlink" title="兄弟元素：+"></a>兄弟元素：+</h3><p>使用 <code>+</code> 运算符将相邻的其它元素处理为同级：</p>
<p><code>div+p+bq</code></p>
<p>生成的结果为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;p&gt;&lt;/p&gt;</div><div class="line">&lt;blockquote&gt;&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<h3 id="父元素："><a href="#父元素：" class="headerlink" title="父元素：^"></a>父元素：^</h3><p>使用 <code>&gt;</code> 运算符将会降低所有后续所有元素在生成树中的级别，每一级的兄弟元素也被解析成相同深度的元素：</p>
<p><code>div+div&gt;p&gt;span+em</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>使用 <code>^</code> 运算符，能够提升元素在生成树中的一个级别，并同时影响其后的元素：</p>
<p><code>div+div&gt;p&gt;span+em^bq</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</div><div class="line">    &lt;blockquote&gt;&lt;/blockquote&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>可以连续使用多个 <code>^</code> 运算符，每次提高一个级别：</p>
<p><code>div+div&gt;p&gt;span+em^^^bq</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;blockquote&gt;&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<h3 id="重复："><a href="#重复：" class="headerlink" title="重复：*"></a>重复：*</h3><p>使用 <code>*</code> 运算符可以定义一组元素：</p>
<p><code>ul&gt;li*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h3 id="分组："><a href="#分组：" class="headerlink" title="分组：()"></a>分组：()</h3><p>括号用于在复杂的 Emmet 缩写中处理一组子树：</p>
<p><code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">    &lt;footer&gt;</div><div class="line">        &lt;p&gt;&lt;/p&gt;</div><div class="line">    &lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>如果想与浏览器 DOM 协同工作，可能想要对文档片段分组：每个组包含一个子树，所有的后续元素都插入到与组中第一个元素相同的级别中。可以在组中嵌套组并且使用 <code>*</code> 运算符绑定它们：</p>
<p><code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;dl&gt;</div><div class="line">        &lt;dt&gt;&lt;/dt&gt;</div><div class="line">        &lt;dd&gt;&lt;/dd&gt;</div><div class="line">        &lt;dt&gt;&lt;/dt&gt;</div><div class="line">        &lt;dd&gt;&lt;/dd&gt;</div><div class="line">        &lt;dt&gt;&lt;/dt&gt;</div><div class="line">        &lt;dd&gt;&lt;/dd&gt;</div><div class="line">    &lt;/dl&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;footer&gt;</div><div class="line">    &lt;p&gt;&lt;/p&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure>
<p>使用分组，可以使用单个缩写逐个写出整页的标签，不过尽量不要这么做。</p>
<h2 id="属性运算符"><a href="#属性运算符" class="headerlink" title="属性运算符"></a>属性运算符</h2><p>属性运算符用于编辑所生成的元素的属性，在 HTML 和 XML 中可以快速地为生成元素添加 <code>class</code> 属性。</p>
<h3 id="ID和Class"><a href="#ID和Class" class="headerlink" title="ID和Class"></a>ID和Class</h3><p>在 CSS 中，可以使用 <code>elem#id</code> 和 <code>elem.class</code> 注解来达到为元素指定 <code>id</code> 或 <code>class 属性的目的。</code>在 Emmet 中，可以使用几乎相同的语法来为指定的元素添加这些属性：</p>
<p><code>div#header+div.page+div#footer.class1.class2.class3</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id="header"&gt;&lt;/div&gt;</div><div class="line">&lt;div class="page"&gt;&lt;/div&gt;</div><div class="line">&lt;div id="footer" class="class1 class2 class3"&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>可以使用 <code>[attr]</code> 注解（就像在 CSS 中一样）来为元素添加自定义属性：</p>
<p><code>td[title=&quot;Hello world!&quot; colspan=3]</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;td title="Hello world!" colspan="3"&gt;&lt;/td&gt;</div></pre></td></tr></table></figure>
<ol>
<li>能够在方括号中放置许多属性。</li>
<li>可以不为属性指定值： <code>td[colspan title]</code> 将生成 <code>&lt;td colspan=&quot;&quot; title=&quot;&quot;&gt;</code> ，如果你的编辑器支持，可以使用 Tab 来跳到每个空属性中填写。</li>
<li>属性可以用单引号或双引号作为定界符。</li>
<li>如果属性不包含空格，不需要用定界符括住它：<code>td[title=hello colspan=3]</code> 是正确的。</li>
</ol>
<h3 id="编号"><a href="#编号" class="headerlink" title="编号: $"></a>编号: $</h3><p>使用 <code>*</code> 运算符可以重复生成元素，如果带 <code>$</code> 就可以为它们编号。把 <code>$</code> 放在元素名、属性名或者属性值中，将为每个元素生成正确的编号：</p>
<p><code>ul&gt;li.item$*5</code></p>
<p>将生成</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class="item1"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item2"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>使用多 <code>$</code> 可以填充前导的零：</p>
<p><code>ul&gt;li.item$$$*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class="item001"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item002"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item003"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item004"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item005"&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h4 id="改变编号的基数和方向"><a href="#改变编号的基数和方向" class="headerlink" title="改变编号的基数和方向"></a>改变编号的基数和方向</h4><p>使用 <code>@</code> ，可以改变数字的走向（升序或降序）和基数（例如起始值）。</p>
<p>在 <code>$</code> 后添加 <code>@-</code> 来改变数字走向：</p>
<p><code>ul&gt;li.item$@-*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item2"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item1"&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>在 <code>$</code> 后面添加 <code>@N</code> 改变编号的基数：</p>
<p><code>ul&gt;li.item$@3*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item6"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item7"&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些附加的运算符可以同时使用：</p>
<p><code>ul&gt;li.item$@-3*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li class="item7"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item6"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</div><div class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h3 id="文本："><a href="#文本：" class="headerlink" title="文本：{}"></a>文本：{}</h3><p>可以用花括号向元素中添加文本：</p>
<p><code>a{Click me}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=""&gt;Click me&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>注意，这个 <code>{text}</code> 是被当成独立元素解析的（类似于 <code>div</code>, <code>p</code> ），但当其跟在其它元素后面时则有所不同。例如， <code>a{click}</code> 和 <code>a&gt;{click}</code> 产生相同的输出，但是 <code>a{click}+b{here}</code> 和 <code>a&gt;{click}+b{here}</code> 的输出就不同了：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- a&#123;click&#125;+b&#123;here&#125; --&gt;</div><div class="line">&lt;a href=""&gt;click&lt;/a&gt;&lt;b&gt;here&lt;/b&gt;</div><div class="line"></div><div class="line">&lt;!-- a&gt;&#123;click&#125;+b&#123;here&#125; --&gt;</div><div class="line">&lt;a href=""&gt;click&lt;b&gt;here&lt;/b&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>在第二示例中， <code>&lt;b&gt;</code> 元素放在了 <code>&lt;a&gt;</code> 元素的里面。差别如下：当 <code>{text}</code> 写在元素的后面，它不影响父元素的上下文。下面是展示这种差别的重要性的较复杂的例子：</p>
<p><code>p&gt;{Click }+a{here}+{ to continue}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Click &lt;a href=""&gt;here&lt;/a&gt; to continue&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>在这个例子里， 我们用 <code>&gt;</code> 运算符明确的将 <code>Click here to continue</code> 下移一级，放在 <code>&lt;p&gt;</code> 元素内，但对于 <code>a</code> 元素的内容就不需要了，因为 <code>&lt;a&gt;</code> 仅有 <code>here</code> 这一部分内容，它不改变父元素的上下文。</p>
<p>作为比较，下面是不带有 <code>&gt;</code> 运算符的相同缩写：</p>
<p><code>p{Click }+a{here}+{ to continue}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Click &lt;/p&gt;</div><div class="line">&lt;a href=""&gt;here&lt;/a&gt; to continue</div></pre></td></tr></table></figure>
<h2 id="生成测试文本"><a href="#生成测试文本" class="headerlink" title="生成测试文本"></a>生成测试文本</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>在编写HTML代码时，有时需要添加一些内容，Emmet提供了一段随机的看不懂的英文字段，作为测试数据我们就可以调用。而生成Lorem Ipsum文本也非常简单，输入<code>lorem</code>，按Tab键，就可以生成下面这段文字：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Velit, non, minima, voluptas ducimus    </div><div class="line">voluptatem perspiciatis id delectus maiores saepe porro aliquam sunt pariatur eaque. Enim,    </div><div class="line">voluptatem nesciunt voluptate ad veritatis.</div></pre></td></tr></table></figure>
<h3 id="控制单词的数量"><a href="#控制单词的数量" class="headerlink" title="控制单词的数量"></a>控制单词的数量</h3><p>Emmet的lorem这一功能不仅仅只为生成一段文本，使用lorem默认生成30个单词的文本，可以为它指定单词的数量来随机生成一大段文本。</p>
<p>比如：<code>lorem4</code>将生成下面的标题：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Lorem ipsum dolor sit.</div></pre></td></tr></table></figure>
<h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>上面的例子只是生成单独的测试文本，与HTML标签一起编写也很简单，就像Emmet快速编写HTML代码文章中生成父子关系的代码一样：</p>
<p><code>h2&gt;lorem4</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h2&gt;Lorem ipsum dolor sit.&lt;/h2&gt;</div></pre></td></tr></table></figure>
<p><code>p*4&gt;lorem4</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Lorem ipsum dolor sit.&lt;/p&gt;  </div><div class="line">&lt;p&gt;Dolores, similique veritatis reprehenderit.&lt;/p&gt;  </div><div class="line">&lt;p&gt;Cupiditate repudiandae numquam earum.&lt;/p&gt;  </div><div class="line">&lt;p&gt;Atque, sequi autem praesentium?&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>所以<code>lorem</code>为我们提供了强大的测试数据，提高了编写HTML代码的速度，让我们专心编写代码。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>当熟悉了 Emmet 的缩写语法后，可能会想要使用一些格式来生成更可读的缩写。例如，在元素和运算符之间使用空格间隔：</p>
<p><code>(header &gt; ul.nav &gt; li*5) + footer</code></p>
<p>但是这种写法是错误的，因为空格是 Emmet 停止缩写解析的标识符。</p>
</li>
<li><p>很多用户误以为每个缩写都应写在新行上，但是他们错了：可以在文本的任意位置键入和扩展缩写。</p>
</li>
</ol>
<p>如果你仍然认为复杂的缩写需要一些格式使其更易读：</p>
<ul>
<li><p>缩写不是模板语言，它们不需要”易读“，它们必须”可快速扩展和移动“。</p>
</li>
<li><p>不需要写复杂的缩写。不要认为在 web 编程中”键入“是最慢的运算。想快速找出构建单个的复杂缩写比构造和键入一些较短较简单的缩写更慢。</p>
</li>
</ul>
<p>参考：<a href="https://www.cnblogs.com/cnjava/p/3225174.html" target="_blank" rel="external">https://www.cnblogs.com/cnjava/p/3225174.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emmet是一个编辑器插件，以前被称作为 Zen Coding。使用类似于 CSS 选择器的语法描述元素在生成的文档树中的位置及其属性。&lt;/p&gt;
&lt;p&gt;使用 Emmet 可以帮助程序员快速的编写 HTML 和 CSS 代码，从而提高 Web前端开发的效率。&lt;a href=&quot;https://www.emmet.io/&quot;&gt;官网&lt;/a&gt;提供多编辑器支持。我一般使用&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;，下面就以VS Code插件举例。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Emmet" scheme="VickChen.win/tags/Emmet/"/>
    
      <category term="Html" scheme="VickChen.win/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>不限长度RAS加密解密</title>
    <link href="VickChen.win/2017/unlimited-length-RAS-encryption-and-decryption/"/>
    <id>VickChen.win/2017/unlimited-length-RAS-encryption-and-decryption/</id>
    <published>2017-06-18T19:02:41.000Z</published>
    <updated>2018-11-04T17:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>RSA 是常用的非对称加密算法。最近使用时却出现了提示“不正确的长度”，排查发现是由于待加密的数据超长所致。</p>
<p>.NET Framework 中提供的 RSA 算法规定：</p>
<blockquote>
<p>待加密的字节数不能超过密钥的长度值除以 8 再减去 11（即：RSACryptoServiceProvider.KeySize / 8 - 11），而加密后得到密文的字节数，正好是密钥的长度值除以 8（即：RSACryptoServiceProvider.KeySize / 8）。</p>
</blockquote>
<p>所以，如果要加密较长的数据，则可以采用分段加解密的方式，实现方式如下：</p>
<a id="more"></a>
<p>加密部分代码如下:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Encrypt</span>(<span class="params"><span class="keyword">string</span> xmlPublicKey, <span class="keyword">string</span> EncryptString</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (RSACryptoServiceProvider RSACryptography = <span class="keyword">new</span> RSACryptoServiceProvider())</div><div class="line">    &#123;</div><div class="line">        RSACryptography.FromXmlString(xmlPublicKey);</div><div class="line">        Byte[] PlaintextData = Encoding.UTF8.GetBytes(EncryptString);</div><div class="line">        <span class="keyword">int</span> MaxBlockSize = RSACryptography.KeySize / <span class="number">8</span> - <span class="number">11</span>;    <span class="comment">//加密块最大长度限制</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (PlaintextData.Length &lt;= MaxBlockSize)</div><div class="line">            <span class="keyword">return</span> Convert.ToBase64String(RSACryptography.Encrypt(PlaintextData, <span class="literal">false</span>));</div><div class="line"></div><div class="line">        <span class="keyword">using</span> (MemoryStream PlaiStream = <span class="keyword">new</span> MemoryStream(PlaintextData))</div><div class="line">        <span class="keyword">using</span> (MemoryStream CrypStream = <span class="keyword">new</span> MemoryStream())</div><div class="line">        &#123;</div><div class="line">            Byte[] Buffer = <span class="keyword">new</span> Byte[MaxBlockSize];</div><div class="line">            <span class="keyword">int</span> BlockSize = PlaiStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (BlockSize &gt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                Byte[] ToEncrypt = <span class="keyword">new</span> Byte[BlockSize];</div><div class="line">                Array.Copy(Buffer, <span class="number">0</span>, ToEncrypt, <span class="number">0</span>, BlockSize);</div><div class="line"></div><div class="line">                Byte[] Cryptograph = RSACryptography.Encrypt(ToEncrypt, <span class="literal">false</span>);</div><div class="line">                CrypStream.Write(Cryptograph, <span class="number">0</span>, Cryptograph.Length);</div><div class="line"></div><div class="line">                BlockSize = PlaiStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> Convert.ToBase64String(CrypStream.ToArray(), Base64FormattingOptions.None);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//解密部分代码如下<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Decrypt</span>(<span class="params"><span class="keyword">string</span> xmlPrivateKey, <span class="keyword">string</span> EncryptString</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (RSACryptoServiceProvider RSACryptography = <span class="keyword">new</span> RSACryptoServiceProvider())</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            RSACryptography.FromXmlString(xmlPrivateKey);</div><div class="line">            Byte[] CiphertextData = Convert.FromBase64String(EncryptString);</div><div class="line">            <span class="keyword">int</span> MaxBlockSize = RSACryptography.KeySize / <span class="number">8</span>;    <span class="comment">//解密块最大长度限制</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (CiphertextData.Length &lt;= MaxBlockSize)</div><div class="line">                <span class="keyword">return</span> Encoding.UTF8.GetString(RSACryptography.Decrypt(CiphertextData, <span class="literal">false</span>));</div><div class="line"></div><div class="line">            <span class="keyword">using</span> (MemoryStream CrypStream = <span class="keyword">new</span> MemoryStream(CiphertextData))</div><div class="line">            <span class="keyword">using</span> (MemoryStream PlaiStream = <span class="keyword">new</span> MemoryStream())</div><div class="line">            &#123;</div><div class="line">                Byte[] Buffer = <span class="keyword">new</span> Byte[MaxBlockSize];</div><div class="line">                <span class="keyword">int</span> BlockSize = CrypStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (BlockSize &gt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    Byte[] ToDecrypt = <span class="keyword">new</span> Byte[BlockSize];</div><div class="line">                    Array.Copy(Buffer, <span class="number">0</span>, ToDecrypt, <span class="number">0</span>, BlockSize);</div><div class="line"></div><div class="line">                    Byte[] Plaintext = RSACryptography.Decrypt(ToDecrypt, <span class="literal">false</span>);</div><div class="line">                    PlaiStream.Write(Plaintext, <span class="number">0</span>, Plaintext.Length);</div><div class="line"></div><div class="line">                    BlockSize = CrypStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Encoding.UTF8.GetString(PlaiStream.ToArray());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"解密失败,请检查传输数据"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSA 是常用的非对称加密算法。最近使用时却出现了提示“不正确的长度”，排查发现是由于待加密的数据超长所致。&lt;/p&gt;
&lt;p&gt;.NET Framework 中提供的 RSA 算法规定：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待加密的字节数不能超过密钥的长度值除以 8 再减去 11（即：RSACryptoServiceProvider.KeySize / 8 - 11），而加密后得到密文的字节数，正好是密钥的长度值除以 8（即：RSACryptoServiceProvider.KeySize / 8）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果要加密较长的数据，则可以采用分段加解密的方式，实现方式如下：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="RSA" scheme="VickChen.win/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>rsa互通密钥对生成及互通加解密(c#,java,php)</title>
    <link href="VickChen.win/2017/RSA-key-pair-generate-and-interwork-encryp-decryp/"/>
    <id>VickChen.win/2017/RSA-key-pair-generate-and-interwork-encryp-decryp/</id>
    <published>2017-06-01T16:41:31.000Z</published>
    <updated>2018-11-22T03:24:13.201Z</updated>
    
    <content type="html"><![CDATA[<p>在数据安全上rsa起着非常大的作用，特别是数据网络通讯的安全上。当异构系统在数据网络通讯上对安全性有所要求时，rsa将作为其中的一种选择，此时rsa的互通性就显得尤为重要了。</p>
<p>本文参考网络资料，提供了rsa互通性的一种可行的解决方案(c#,java,php),而这种互通性是在一定的局限性上达成的，比如密钥是1024位的(更高位没试过，应该也可行），基于PKCS1填充方式。</p>
<p>所编写的代码有一部分使用了硬编码，同时注重了功能的实现，在类结构设计上关注不多，有需要的可自行修改重构。</p>
<a id="more"></a>
<p>相关的程序集或包或代码请详见本文末尾附件。</p>
<h3 id="生成互通密钥对"><a href="#生成互通密钥对" class="headerlink" title="生成互通密钥对"></a>生成互通密钥对</h3><p>重点参考了Jeffrey Walton（<a href="http://www.codeproject.com/Articles/25487/Cryptographic-Interoperability-Keys" target="_blank" rel="external">http://www.codeproject.com/Articles/25487/Cryptographic-Interoperability-Keys</a>）</p>
<p>1.C#</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Cn.Ubingo.Security.RSA.Core;</div><div class="line"><span class="keyword">using</span> Cn.Ubingo.Security.RSA.Key;</div><div class="line"><span class="comment">//生成公私钥对</span></div><div class="line">KeyPair keyPair = KeyGenerator.GenerateKeyPair();</div><div class="line"><span class="comment">//转换成不同的格式</span></div><div class="line">KeyPair asnKeyPair = keyPair.ToASNKeyPair();</div><div class="line">KeyPair xmlKeyPair = asnKeyPair.ToXMLKeyPair();</div><div class="line">KeyPair pemKeyPair = xmlKeyPair.ToPEMKeyPair();</div><div class="line"></div><div class="line"><span class="comment">//获取公私钥，以xml格式的为例</span></div><div class="line"><span class="keyword">string</span> privateKey = xmlKeyPair.PrivateKey;</div><div class="line"><span class="keyword">string</span> publicKey = xmlKeyPair.PublicKey;</div></pre></td></tr></table></figure>
<p>2.Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cn.ubingo.security.rsa.core.*;</div><div class="line"><span class="keyword">import</span> cn.ubingo.security.rsa.key.*;</div><div class="line"><span class="comment">//生成密钥对</span></div><div class="line">KeyPair keyPair = KeyGenerator.generateKeyPair();</div><div class="line"><span class="comment">//转换成不同的格式</span></div><div class="line">KeyPair asnKeyPair = keyPair.toASNKeyPair();</div><div class="line">KeyPair xmlKeyPair = asnKeyPair.toXMLKeyPair();</div><div class="line">KeyPair pemKeyPair = xmlKeyPair.toPEMKeyPair();</div><div class="line"><span class="comment">//获取公私钥，以asn格式的为例</span></div><div class="line">String publicKey = asnKeyPair.getPublicKey();</div><div class="line">String privateKey = asnKeyPair.getPrivateKey();</div></pre></td></tr></table></figure>
<p>3.密钥格式</p>
<p>a.XML—c#平台惯用</p>
<p>私钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;RSAKeyValue&gt;</div><div class="line">&lt;Modulus&gt;</div><div class="line">ociVSjfhJzxxAd9msplL4mllmaknjoB4OPgb+hVo1QGcQ9QWLyMHuPyCo3qbp3ahKqqa4nEkRkTHFOJeITXH69LE78Zyizne9N4hamAHZSVmuBa8dtsQmT06yJWxR4siG8JNMR9aQkMN7kGtxsJBN2+CbIomxSMWSQ2pqvFAyks=</div><div class="line">&lt;/Modulus&gt;</div><div class="line">&lt;Exponent&gt;AQAB&lt;/Exponent&gt;</div><div class="line">&lt;P&gt;0ekRMBZU0GhIYbTZSbnd/TC7QHtE4TCFfg98nOC8EBGBE6U5i3zgRofY0JdWBYmWNE5gtEMINPVfRxJ63Euwkw==&lt;/P&gt;</div><div class="line">&lt;Q&gt;xU5Vbntok5Emt8aP823gizSpG4h//5NvLBDAYpDmGSeg3Jxi1clJLu8d0bYfDOkk+QADYlpNdmJkH2lC4lXqaQ==&lt;/Q&gt;</div><div class="line">&lt;DP&gt;FvcKvFoVGV/vW1Ev3JMLKGImel2CIajvUeVb2sXzjUZ8+qs+6nXVC6JdJCUKcjylRD+28MHMqg6WR+5LpsJZJQ==&lt;/DP&gt;</div><div class="line">&lt;DQ&gt;Ah9ameqn8FZyZS20pLi83qJ9YzdvsQ8j9gRkHWtTnlenylfAVG5q5B9cYcIkyV3EsQ0H/EneZXSfgRr/xjGIaQ==&lt;/DQ&gt;</div><div class="line">&lt;InverseQ&gt;aCt01Nk4gANWR0JrYvJcsLgwB38OOG82hQrBa/quPkCMjGtLZzKh9TFiZjcTWLs1hsBvCPDBO7LM/wbZn1PG6A==&lt;/InverseQ&gt;</div><div class="line">&lt;D&gt;O+gF2+coMLqxT9O0+AJKtqp3bDhWRO6uVc4NsgN2f5VqkzU4B7lNdULPbxCKDa8gS6fD1YC2wWxbWZDe8SY0gjgOF1EUbbO8G1XvcHFE5rGxmZsFJCY+dhxgknqO08MXHVaZYjkmQO7z7XpvFKBocduj39NEe2mYO25l07TQfBk=&lt;/D&gt;</div><div class="line">&lt;/RSAKeyValue&gt;</div></pre></td></tr></table></figure>
<p>公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;RSAKeyValue&gt;</div><div class="line">&lt;Modulus&gt;ociVSjfhJzxxAd9msplL4mllmaknjoB4OPgb+hVo1QGcQ9QWLyMHuPyCo3qbp3ahKqqa4nEkRkTHFOJeITXH69LE78Zyizne9N4hamAHZSVmuBa8dtsQmT06yJWxR4siG8JNMR9aQkMN7kGtxsJBN2+CbIomxSMWSQ2pqvFAyks=&lt;/Modulus&gt;</div><div class="line">&lt;Exponent&gt;AQAB&lt;/Exponent&gt;</div><div class="line">&lt;/RSAKeyValue&gt;</div></pre></td></tr></table></figure>
<p>b.ASN—java平台惯用</p>
<p>私钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAKHIlUo34Sc8cQHfZrKZS+JpZZmpJ46AeDj4G/oVaNUBnEPUFi8jB7j8gqN6m6d2oSqqmuJxJEZExxTiXiE1x+vSxO/Gcos53vTeIWpgB2UlZrgWvHbbEJk9OsiVsUeLIhvCTTEfWkJDDe5BrcbCQTdvgmyKJsUjFkkNqarxQMpLAgMBAAECgYA76AXb5ygwurFP07T4Akq2qndsOFZE7q5Vzg2yA3Z/lWqTNTgHuU11Qs9vEIoNryBLp8PVgLbBbFtZkN7xJjSCOA4XURRts7wbVe9wcUTmsbGZmwUkJj52HGCSeo7TwxcdVpliOSZA7vPtem8UoGhx26Pf00R7aZg7bmXTtNB8GQJBANHpETAWVNBoSGG02Um53f0wu0B7ROEwhX4PfJzgvBARgROlOYt84EaH2NCXVgWJljROYLRDCDT1X0cSetxLsJMCQQDFTlVue2iTkSa3xo/zbeCLNKkbiH//k28sEMBikOYZJ6DcnGLVyUku7x3Rth8M6ST5AANiWk12YmQfaULiVeppAkAW9wq8WhUZX+9bUS/ckwsoYiZ6XYIhqO9R5VvaxfONRnz6qz7qddULol0kJQpyPKVEP7bwwcyqDpZH7kumwlklAkACH1qZ6qfwVnJlLbSkuLzeon1jN2+xDyP2BGQda1OeV6fKV8BUbmrkH1xhwiTJXcSxDQf8Sd5ldJ+BGv/GMYhpAkBoK3TU2TiAA1ZHQmti8lywuDAHfw44bzaFCsFr+q4+QIyMa0tnMqH1MWJmNxNYuzWGwG8I8ME7ssz/BtmfU8bo</div></pre></td></tr></table></figure>
<p>公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQChyJVKN+EnPHEB32aymUviaWWZqSeOgHg4+Bv6FWjVAZxD1BYvIwe4/IKjepundqEqqpricSRGRMcU4l4hNcfr0sTvxnKLOd703iFqYAdlJWa4Frx22xCZPTrIlbFHiyIbwk0xH1pCQw3uQa3GwkE3b4JsiibFIxZJDamq8UDKSwIDAQAB</div></pre></td></tr></table></figure>
<p>c.PEM—php平台惯用</p>
<p>私钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PRIVATE KEY-----</div><div class="line">MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAKHIlUo34Sc8cQHf</div><div class="line">ZrKZS+JpZZmpJ46AeDj4G/oVaNUBnEPUFi8jB7j8gqN6m6d2oSqqmuJxJEZExxTi</div><div class="line">XiE1x+vSxO/Gcos53vTeIWpgB2UlZrgWvHbbEJk9OsiVsUeLIhvCTTEfWkJDDe5B</div><div class="line">rcbCQTdvgmyKJsUjFkkNqarxQMpLAgMBAAECgYA76AXb5ygwurFP07T4Akq2qnds</div><div class="line">OFZE7q5Vzg2yA3Z/lWqTNTgHuU11Qs9vEIoNryBLp8PVgLbBbFtZkN7xJjSCOA4X</div><div class="line">URRts7wbVe9wcUTmsbGZmwUkJj52HGCSeo7TwxcdVpliOSZA7vPtem8UoGhx26Pf</div><div class="line">00R7aZg7bmXTtNB8GQJBANHpETAWVNBoSGG02Um53f0wu0B7ROEwhX4PfJzgvBAR</div><div class="line">gROlOYt84EaH2NCXVgWJljROYLRDCDT1X0cSetxLsJMCQQDFTlVue2iTkSa3xo/z</div><div class="line">beCLNKkbiH//k28sEMBikOYZJ6DcnGLVyUku7x3Rth8M6ST5AANiWk12YmQfaULi</div><div class="line">VeppAkAW9wq8WhUZX+9bUS/ckwsoYiZ6XYIhqO9R5VvaxfONRnz6qz7qddULol0k</div><div class="line">JQpyPKVEP7bwwcyqDpZH7kumwlklAkACH1qZ6qfwVnJlLbSkuLzeon1jN2+xDyP2</div><div class="line">BGQda1OeV6fKV8BUbmrkH1xhwiTJXcSxDQf8Sd5ldJ+BGv/GMYhpAkBoK3TU2TiA</div><div class="line">A1ZHQmti8lywuDAHfw44bzaFCsFr+q4+QIyMa0tnMqH1MWJmNxNYuzWGwG8I8ME7</div><div class="line">ssz/BtmfU8bo</div><div class="line">-----END PRIVATE KEY-----</div></pre></td></tr></table></figure>
<p>公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PUBLIC KEY-----</div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQChyJVKN+EnPHEB32aymUviaWWZ</div><div class="line">qSeOgHg4+Bv6FWjVAZxD1BYvIwe4/IKjepundqEqqpricSRGRMcU4l4hNcfr0sTv</div><div class="line">xnKLOd703iFqYAdlJWa4Frx22xCZPTrIlbFHiyIbwk0xH1pCQw3uQa3GwkE3b4Js</div><div class="line">iibFIxZJDamq8UDKSwIDAQAB</div><div class="line">-----END PUBLIC KEY-----</div></pre></td></tr></table></figure>
<p>4.密钥互通性</p>
<p>各种格式的密钥都可以通过KeyPair类的c#:<code>To*KeyPair()</code>或java:<code>to*KeyPair()</code>方法相互进行转换，无门槛，无障碍。</p>
<p>C#</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//转换成不同的格式</span></div><div class="line">KeyPair asnKeyPair = keyPair.ToASNKeyPair();</div><div class="line">KeyPair xmlKeyPair = asnKeyPair.ToXMLKeyPair();</div><div class="line">KeyPair pemKeyPair = xmlKeyPair.ToPEMKeyPair();</div></pre></td></tr></table></figure>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//转换成不同的格式</span></div><div class="line">KeyPair asnKeyPair = keyPair.toASNKeyPair();</div><div class="line">KeyPair xmlKeyPair = asnKeyPair.toXMLKeyPair();</div><div class="line">KeyPair pemKeyPair = xmlKeyPair.toPEMKeyPair();</div></pre></td></tr></table></figure>
<h3 id="互通加解密"><a href="#互通加解密" class="headerlink" title="互通加解密"></a>互通加解密</h3><p>基于三种语言环境都支持的RSA PKCS1填充方式的算法，实现加解密互通</p>
<p>KeyWorker的c#:<code>Encrypt</code>,<code>Decrypt</code>或java:<code>encrypt</code>,<code>decrypt</code>或php:<code>encrypt</code>,<code>decrypt</code>方法实现加解密的功能</p>
<p>1.C# </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Cn.Ubingo.Security.RSA.Core;</div><div class="line"><span class="keyword">using</span> Cn.Ubingo.Security.RSA.Data;</div><div class="line"><span class="comment">//加解密</span></div><div class="line"></div><div class="line"><span class="comment">//XML</span></div><div class="line">KeyWorker privateWorker = <span class="keyword">new</span> KeyWorker(privateKey, KeyFormat.XML);</div><div class="line">KeyWorker publicWorker = <span class="keyword">new</span> KeyWorker(publicKey, KeyFormat.XML);            </div><div class="line">Console.WriteLine(privateWorker.Decrypt(publicWorker.Encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">Console.WriteLine(publicWorker.Decrypt(privateWorker.Encrypt(<span class="string">"你好！中国"</span>)));</div><div class="line"><span class="comment">//ASN</span></div><div class="line">privateWorker = <span class="keyword">new</span> KeyWorker(asnKeyPair.PrivateKey, KeyFormat.ASN);</div><div class="line">publicWorker = <span class="keyword">new</span> KeyWorker(asnKeyPair.PublicKey, KeyFormat.ASN);</div><div class="line">Console.WriteLine(privateWorker.Decrypt(publicWorker.Encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">Console.WriteLine(publicWorker.Decrypt(privateWorker.Encrypt(<span class="string">"你好！中国"</span>)));</div><div class="line"><span class="comment">//PEM</span></div><div class="line">privateWorker = <span class="keyword">new</span> KeyWorker(pemKeyPair.PrivateKey, KeyFormat.PEM);</div><div class="line">publicWorker = <span class="keyword">new</span> KeyWorker(pemKeyPair.PublicKey, KeyFormat.PEM);</div><div class="line">Console.WriteLine(privateWorker.Decrypt(publicWorker.Encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">Console.WriteLine(publicWorker.Decrypt(privateWorker.Encrypt(<span class="string">"你好！中国"</span>)));</div></pre></td></tr></table></figure>
<p>2.Java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cn.ubingo.security.rsa.core.*;</div><div class="line"><span class="keyword">import</span> cn.ubingo.security.rsa.data.*;</div><div class="line"><span class="comment">//ASN</span></div><div class="line">KeyWorker privateWorker = <span class="keyword">new</span> KeyWorker(privateKey, KeyFormat.ASN);</div><div class="line">KeyWorker publicWorker = <span class="keyword">new</span> KeyWorker(publicKey, KeyFormat.ASN);</div><div class="line">System.out.print(privateWorker.decrypt(publicWorker.encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">System.out.print(publicWorker.decrypt(privateWorker.encrypt(<span class="string">"你好！中国"</span>)));</div><div class="line"><span class="comment">//XML</span></div><div class="line">privateWorker = <span class="keyword">new</span> KeyWorker(xmlKeyPair.getPrivateKey(), KeyFormat.XML);</div><div class="line">publicWorker = <span class="keyword">new</span> KeyWorker(xmlKeyPair.getPublicKey(), KeyFormat.XML);</div><div class="line">System.out.print(privateWorker.decrypt(publicWorker.encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">System.out.print(publicWorker.decrypt(privateWorker.encrypt(<span class="string">"你好！中国"</span>)));</div><div class="line"><span class="comment">//PEM</span></div><div class="line">privateWorker = <span class="keyword">new</span> KeyWorker(pemKeyPair.getPrivateKey(), KeyFormat.PEM);</div><div class="line">publicWorker = <span class="keyword">new</span> KeyWorker(pemKeyPair.getPublicKey(), KeyFormat.PEM);</div><div class="line">System.out.print(privateWorker.decrypt(publicWorker.encrypt(<span class="string">"你好！世界"</span>)));</div><div class="line">System.out.print(publicWorker.decrypt(privateWorker.encrypt(<span class="string">"你好！中国"</span>)));</div></pre></td></tr></table></figure>
<p>3.php<br>请保证php文件为utf-8的格式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">include "KeyWorker.php";</div><div class="line">use Cn\Ubingo\Security\RSA\Core as core;</div><div class="line">use Cn\Ubingo\Security\RSA\Data as data;</div><div class="line">/*PEM TEST*/</div><div class="line">$publicWorker = new data\KeyWorker("-----BEGIN PUBLIC KEY-----</div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZw5tyBNJsjgVrPkLUIWF9el5E</div><div class="line">OXL1AydVBnJ/WWPKTZJBWYxudW+1jI5ifML+1DkCxw/2QLowzViV1OLnpNAWr7zv</div><div class="line">LpN6i7OZtq0o2Yfc+vv6vCctTpMvFartRRwDeXTRBgoGd71UwWgdMOu8Gmr9sv5u</div><div class="line">3C9Kj5fhj0I4WgB94wIDAQAB</div><div class="line">-----END PUBLIC KEY-----",core\KeyFormat::PEM);</div><div class="line">$privateWorker = new data\KeyWorker("-----BEGIN PRIVATE KEY-----</div><div class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAJnDm3IE0myOBWs+</div><div class="line">QtQhYX16XkQ5cvUDJ1UGcn9ZY8pNkkFZjG51b7WMjmJ8wv7UOQLHD/ZAujDNWJXU</div><div class="line">4uek0BavvO8uk3qLs5m2rSjZh9z6+/q8Jy1Oky8Vqu1FHAN5dNEGCgZ3vVTBaB0w</div><div class="line">67waav2y/m7cL0qPl+GPQjhaAH3jAgMBAAECgYA6ANHYlv0RuhlNNTVcdCMkhE6f</div><div class="line">CdTVnBTwO/hhFcVRASYUxMT2vhIfuB/WAx5DpqbC53ib+hrCYhPyoVXe8AsWjgBJ</div><div class="line">cj3RHxjLMou0Jbu6mTjcLgKzMYM85yHscmmDcc8l/ep9BhbiJJsTVM8RqqXfdPmY</div><div class="line">5CAgfwsNXruC7Zb5wQJBAMxVZhR+IzoeYLsmEciy2oOaTq5u8O6yjx7RapIggIKT</div><div class="line">dRU5G2GeCyLRHyZH/+U2/nL3undiP74fxizatzgTE3ECQQDApNKzaMobPW23wRes</div><div class="line">E+dDjJxYnqVqOmZS22D6s+BKwDmHpOt+oJmrirY4LWmOUwUfgAboDWH5y/q5+qJH</div><div class="line">P5STAkEAux+F4UR2nDXPnfPKG4L3K8f3QDUm/WGWQcHEF9gd9/Z0JaBrm+TxC8x4</div><div class="line">+0S6ar4HHWASalwWRdWxVchiO770cQJAGaEUAxhq4wreIPdIffU77Em1tziMC0Dv</div><div class="line">whA7q77olSlTvg8b4YHeT+spaPnptCypXtJ6mL7HDSOtHLcSheYYjwJBAJFdK3vg</div><div class="line">ZS0Sk4oy6iOaOcux+5uBkpF9ran0GIpehyGzia+F1Xf/+NnS22qER/ADvRMNnyHf</div><div class="line">QH24qWxQuST39UQ=</div><div class="line">-----END PRIVATE KEY-----",core\KeyFormat::PEM);</div><div class="line"></div><div class="line">echo $publicWorker-&gt;decrypt($privateWorker-&gt;encrypt("你好！世界"));</div><div class="line">echo $privateWorker-&gt;decrypt($publicWorker-&gt;encrypt("你好！中国"));</div><div class="line"></div><div class="line">/*ASN TEST*/</div><div class="line">$publicWorker = new data\KeyWorker("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZw5tyBNJsjgVrPkLUIWF9el5EOXL1AydVBnJ/WWPKTZJBWYxudW+1jI5ifML+1DkCxw/2QLowzViV1OLnpNAWr7zvLpN6i7OZtq0o2Yfc+vv6vCctTpMvFartRRwDeXTRBgoGd71UwWgdMOu8Gmr9sv5u3C9Kj5fhj0I4WgB94wIDAQAB",core\KeyFormat::ASN);</div><div class="line">$privateWorker = new data\KeyWorker("MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAJnDm3IE0myOBWs+QtQhYX16XkQ5cvUDJ1UGcn9ZY8pNkkFZjG51b7WMjmJ8wv7UOQLHD/ZAujDNWJXU4uek0BavvO8uk3qLs5m2rSjZh9z6+/q8Jy1Oky8Vqu1FHAN5dNEGCgZ3vVTBaB0w67waav2y/m7cL0qPl+GPQjhaAH3jAgMBAAECgYA6ANHYlv0RuhlNNTVcdCMkhE6fCdTVnBTwO/hhFcVRASYUxMT2vhIfuB/WAx5DpqbC53ib+hrCYhPyoVXe8AsWjgBJcj3RHxjLMou0Jbu6mTjcLgKzMYM85yHscmmDcc8l/ep9BhbiJJsTVM8RqqXfdPmY5CAgfwsNXruC7Zb5wQJBAMxVZhR+IzoeYLsmEciy2oOaTq5u8O6yjx7RapIggIKTdRU5G2GeCyLRHyZH/+U2/nL3undiP74fxizatzgTE3ECQQDApNKzaMobPW23wResE+dDjJxYnqVqOmZS22D6s+BKwDmHpOt+oJmrirY4LWmOUwUfgAboDWH5y/q5+qJHP5STAkEAux+F4UR2nDXPnfPKG4L3K8f3QDUm/WGWQcHEF9gd9/Z0JaBrm+TxC8x4+0S6ar4HHWASalwWRdWxVchiO770cQJAGaEUAxhq4wreIPdIffU77Em1tziMC0DvwhA7q77olSlTvg8b4YHeT+spaPnptCypXtJ6mL7HDSOtHLcSheYYjwJBAJFdK3vgZS0Sk4oy6iOaOcux+5uBkpF9ran0GIpehyGzia+F1Xf/+NnS22qER/ADvRMNnyHfQH24qWxQuST39UQ=",core\KeyFormat::ASN);</div><div class="line"></div><div class="line">echo $publicWorker-&gt;decrypt($privateWorker-&gt;encrypt("你好！世界"));</div><div class="line">echo $privateWorker-&gt;decrypt($publicWorker-&gt;encrypt("你好！中国"));</div></pre></td></tr></table></figure>
<p>4.加解密互通性</p>
<p>任何语言（指的是c#,java,php)使用KeyWorker加密得到的密文，用任何语言的KeyWorker都可以进行解密，只要公私钥配对即可。</p>
<p><em>原文链接：<a href="http://www.cnblogs.com/FoChen/p/4740814.html" target="_blank" rel="external">http://www.cnblogs.com/FoChen/p/4740814.html</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据安全上rsa起着非常大的作用，特别是数据网络通讯的安全上。当异构系统在数据网络通讯上对安全性有所要求时，rsa将作为其中的一种选择，此时rsa的互通性就显得尤为重要了。&lt;/p&gt;
&lt;p&gt;本文参考网络资料，提供了rsa互通性的一种可行的解决方案(c#,java,php),而这种互通性是在一定的局限性上达成的，比如密钥是1024位的(更高位没试过，应该也可行），基于PKCS1填充方式。&lt;/p&gt;
&lt;p&gt;所编写的代码有一部分使用了硬编码，同时注重了功能的实现，在类结构设计上关注不多，有需要的可自行修改重构。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="RSA" scheme="VickChen.win/tags/RSA/"/>
    
      <category term="Java" scheme="VickChen.win/tags/Java/"/>
    
      <category term="PHP" scheme="VickChen.win/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>分部视图的使用</title>
    <link href="VickChen.win/2017/how-to-use-partial-views/"/>
    <id>VickChen.win/2017/how-to-use-partial-views/</id>
    <published>2017-05-20T17:10:52.000Z</published>
    <updated>2018-11-04T17:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到分部视图，我相信大家会想到和web form时代的对应物ascx分部控件，我们在Mvc时代可以更加轻松的控制分部视图。</p>
<p>要说明分部视图，我们先来讨论一下分部视图可以带给我们的优点：</p>
<ol>
<li><p>分部视图可以使系统插件化。我现在非常推崇一个原则，就是可以分离的东西绝对不要让他们在一起，因为只有每个功能模块都是单独的，我们才可以在其他位置重用它。</p>
</li>
<li><p>分部视图还可以带来一个优点，就是分工合作。现在是一个合作的时代，没有任何一个人可以单独完成规定的任务而不与别人合作，牛人例外。分部视图可以带给我们开发不同模块中的分工合作。</p>
</li>
<li><p>分部视图还有一个在Mvc时代的优点，就是实现简单。我自从学习使用Mvc以后，我基本上就很少写web form的代码了，因为我感觉没有Mvc写的那么流畅。html.partial(partialName)就可以显示一个分部视图的页面。</p>
</li>
</ol>
<a id="more"></a>
<p>简单的叙述了一下优点，既然我们能发现优点存在，那么我们就想在实际项目中更好的使用它，毕竟程序员都追求懒，一段代码，三句可以搞定，绝对不会写三句半，当然最小化原则也是我们代码优化的最终目的。</p>
<p>那么究竟在Mvc中有哪些可以实现分部视图的功能呢？以及我们要注意点什么呢？</p>
<ul>
<li><p>Html.Partial(partialName)和html.RenderPartial(partialName) 就是首选。<br>其实这两个方法我们可以指定任何的.cshtml文件，不一定只是分部视图。大家来回忆一下分部视图和视图的区别在哪里？就是视图有head、body标签，可以定义js，可以指定母板页，但是在我们用Vs右键添加分部视图的时候，我们会看到只是一些基本的html标签，没有任何的head、body，但是这不等于我们不可以添加，所以说partialName可以是任何的视图文件。但是我们最好是创建分部视图，因为我们最终是要把这些分部视图合并成为一个页面，如果只是分部视图的html标签，那么在整体页面中html标签就会显得很干净。</p>
</li>
<li><p>不要在分部视图中定义或者引用css以及js。如果需要我们在整体页面中定义或引用。原因有2：</p>
<ol>
<li><p>是我们的分部视图文件和整体页面的路径可能不在同一个目录下，那么会造成找不到css或js文件的情况。</p>
</li>
<li><p>对整体页面的html代码是一种伤害。</p>
</li>
</ol>
</li>
<li><p>html.Action和html.RenderAction()方法也可以用来作为分部视图使用.具体使用方式我想就不需要细说了，大家对htmlHelper都会非常熟悉，因为常用嘛。</p>
</li>
</ul>
<p>这段时间就大量的使用到了分部视图，现在来总结一下，让后来的学习者少走一点弯路。</p>
<ol>
<li><p>如果可以，尽量使用母板页，这样可以很好的控制网站的样式。</p>
</li>
<li><p>采用单独的css文件，单独的js文件，尽量不要在分部视图中定义样式，而是在整体页面中。</p>
</li>
<li><p>分部视图的html标签应该尽可能的少，除了要显示的内容之外，不要有任何杂质存在。样式css、js等在整体页面添加。</p>
</li>
<li><p>如果可以，尽量采用html.partial(partialName)或html.RenderPartial(partialName)的方式，而不要用html.Action来作为分部视图的方式，因为这种方法会和控制器交互。</p>
</li>
<li><p>对分部视图的传值尽量采用Model的方式进行，如果一个分部视图需要传递两个参数，那么我建议你分成两个分部视图。</p>
</li>
<li><p>采用分部视图会对整体页面的样式调整带来困难，所以我建议先整体做出页面，然后再分成不同的分部视图。</p>
</li>
<li><p>过多的分部视图会增加服务器的延迟，所以分部视图的控制要得当，我建议控制在10个以内吧，如果服务器允许，更多也是可以的。</p>
</li>
<li><p>要注意分部视图的标签id的命名，最好采用固定的要规则的命名方式，尽量减少冲突的发生，毕竟同名的标签存在会对程序造成隐患。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提到分部视图，我相信大家会想到和web form时代的对应物ascx分部控件，我们在Mvc时代可以更加轻松的控制分部视图。&lt;/p&gt;
&lt;p&gt;要说明分部视图，我们先来讨论一下分部视图可以带给我们的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;分部视图可以使系统插件化。我现在非常推崇一个原则，就是可以分离的东西绝对不要让他们在一起，因为只有每个功能模块都是单独的，我们才可以在其他位置重用它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分部视图还可以带来一个优点，就是分工合作。现在是一个合作的时代，没有任何一个人可以单独完成规定的任务而不与别人合作，牛人例外。分部视图可以带给我们开发不同模块中的分工合作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分部视图还有一个在Mvc时代的优点，就是实现简单。我自从学习使用Mvc以后，我基本上就很少写web form的代码了，因为我感觉没有Mvc写的那么流畅。html.partial(partialName)就可以显示一个分部视图的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="MVC" scheme="VickChen.win/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>访问https接口出现未能为SSL/TLS安全通道建立信任关系错误</title>
    <link href="VickChen.win/2017/how-to-access-https-api/"/>
    <id>VickChen.win/2017/how-to-access-https-api/</id>
    <published>2017-05-07T02:34:21.000Z</published>
    <updated>2017-07-10T09:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候调用https接口时会提示如下错误:</p>
<blockquote>
<p>基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。</p>
</blockquote>
<a id="more"></a>
<p>1,先加入命名空间：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Net.Security;</div><div class="line"></div><div class="line"><span class="keyword">using</span> System.Security.Authentication;</div><div class="line"></div><div class="line"><span class="keyword">using</span> System.Security.Cryptography.X509Certificates;</div></pre></td></tr></table></figure>
<p>2，再重载CheckValidationResult方法，返回true</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">CheckValidationResult</span>(<span class="params"><span class="keyword">object</span> sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors</span>)</span></div><div class="line"></div><div class="line">    &#123;   <span class="comment">// 总是接受</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>3,然后在 <code>HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);</code>  前面加上如下一行代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ServicePointManager.ServerCertificateValidationCallback = </div><div class="line">    <span class="keyword">new</span> System.Net.Security.RemoteCertificateValidationCallback(CheckValidationResult);<span class="comment">//验证服务器证书回调自动验证</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候调用https接口时会提示如下错误:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="API" scheme="VickChen.win/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>最常用的正则表达式</title>
    <link href="VickChen.win/2017/regular-expression/"/>
    <id>VickChen.win/2017/regular-expression/</id>
    <published>2017-03-15T09:51:18.000Z</published>
    <updated>2017-03-16T12:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p>
<a id="more"></a>
<p>一、校验数字的表达式</p>
<ol>
<li><p>数字：</p>
<pre><code>^[0-9]*$
</code></pre></li>
<li><p>n位的数字：</p>
<pre><code>^\d{n}$
</code></pre></li>
<li><p>至少n位的数字：</p>
<pre><code>^\d{n,}$
</code></pre></li>
<li><p>m-n位的数字：</p>
<pre><code>^\d{m,n}$
</code></pre></li>
<li><p>零和非零开头的数字：</p>
<pre><code>^(0|[1-9][0-9]*)$
</code></pre></li>
<li><p>非零开头的最多带两位小数的数字：</p>
<pre><code>^([1-9][0-9]*)+(.[0-9]{1,2})?$
</code></pre></li>
<li><p>带1-2位小数的正数或负数：</p>
<pre><code>^(\-)?\d+(\.\d{1,2})?$
</code></pre></li>
<li><p>正数、负数、和小数：</p>
<pre><code>^(\-|\+)?\d+(\.\d+)?$
</code></pre></li>
<li><p>有两位小数的正实数：</p>
<pre><code>^[0-9]+(.[0-9]{2})?$
</code></pre></li>
<li><p>有1~3位小数的正实数：</p>
<pre><code>^[0-9]+(.[0-9]{1,3})?$
</code></pre></li>
<li><p>非零的正整数：</p>
<pre><code>^[1-9]\d*$ 
</code></pre><p>或 </p>
<pre><code>^([1-9][0-9]*){1,3}$ 
</code></pre><p>或</p>
<pre><code>^\+?[1-9][0-9]*$
</code></pre></li>
<li><p>非零的负整数：</p>
<pre><code>^\-[1-9][]0-9&quot;*$ 
</code></pre><p>或 </p>
<pre><code>^-[1-9]\d*$
</code></pre></li>
<li><p>非负整数：</p>
<pre><code>^\d+$ 
</code></pre><p>或 </p>
<pre><code>^[1-9]\d*|0$
</code></pre></li>
<li><p>非正整数：</p>
<pre><code>^-[1-9]\d*|0$ 
</code></pre><p>或 </p>
<pre><code>^((-\d+)|(0+))$
</code></pre></li>
<li><p>非负浮点数：</p>
<pre><code>^\d+(\.\d+)?$ 
</code></pre><p>或 </p>
<pre><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
</code></pre></li>
<li><p>非正浮点数：</p>
<pre><code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 
</code></pre><p>或 </p>
<pre><code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
</code></pre></li>
<li><p>正浮点数：</p>
<pre><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 
</code></pre><p>或 </p>
<pre><code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
</code></pre></li>
<li><p>负浮点数：</p>
<pre><code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 
</code></pre><p>或 </p>
<pre><code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
</code></pre></li>
<li><p>浮点数：</p>
<pre><code>^(-?\d+)(\.\d+)?$ 
</code></pre><p>或 </p>
<pre><code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
</code></pre></li>
</ol>
<p>二、校验字符的表达式</p>
<ol>
<li><p>汉字：</p>
<pre><code>^[\u4e00-\u9fa5]{0,}$
</code></pre></li>
<li><p>英文和数字：</p>
<pre><code>^[A-Za-z0-9]+$ 
</code></pre><p> 或 </p>
<pre><code>^[A-Za-z0-9]{4,40}$
</code></pre></li>
<li><p>长度为3-20的所有字符：</p>
<pre><code>^.{3,20}$
</code></pre></li>
<li><p>由26个英文字母组成的字符串：</p>
<pre><code>^[A-Za-z]+$
</code></pre></li>
<li><p>由26个大写英文字母组成的字符串：</p>
<pre><code>^[A-Z]+$
</code></pre></li>
<li><p>由26个小写英文字母组成的字符串：</p>
<pre><code>^[a-z]+$
</code></pre></li>
<li><p>由数字和26个英文字母组成的字符串：</p>
<pre><code>^[A-Za-z0-9]+$
</code></pre></li>
<li><p>由数字、26个英文字母或者下划线组成的字符串：</p>
<pre><code>^\w+$ 
</code></pre><p> 或 </p>
<pre><code>^\w{3,20}$
</code></pre></li>
<li><p>中文、英文、数字包括下划线：</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9_]+$
</code></pre></li>
<li><p>中文、英文、数字但不包括下划线等符号：</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 
</code></pre><p>或者</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
</code></pre></li>
<li><p>可以输入含有^%&amp;’,;=?$\”等字符：</p>
<pre><code>[^%&amp;&apos;,;=?$\x22]+ 12 
</code></pre><p>禁止输入含有~的字符：</p>
<pre><code>[^~\x22]+
</code></pre></li>
</ol>
<p>三、特殊需求表达式</p>
<ol>
<li><p>Email地址：</p>
<pre><code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
</code></pre></li>
<li><p>域名：</p>
<pre><code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
</code></pre></li>
<li><p>InternetURL：</p>
<pre><code>[a-zA-z]+://[^\s]* 
</code></pre><p> 或者</p>
<pre><code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$
</code></pre></li>
<li><p>手机号码：</p>
<pre><code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
</code></pre></li>
<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：</p>
<pre><code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$
</code></pre></li>
<li><p>国内电话号码(0511-4405222、021-87888822)：</p>
<pre><code>\d{3}-\d{8}|\d{4}-\d{7}
</code></pre></li>
<li><p>身份证号(15位、18位数字)：</p>
<pre><code>^\d{15}|\d{18}$
</code></pre></li>
<li><p>短身份证号码(数字、字母x结尾)：</p>
<pre><code>^([0-9]){7,18}(x|X)?$ 
</code></pre><p> 或 </p>
<pre><code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
</code></pre></li>
<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</p>
<pre><code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$
</code></pre></li>
<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</p>
<pre><code>^[a-zA-Z]\w{5,17}$
</code></pre></li>
<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</p>
<pre><code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
</code></pre></li>
<li><p>日期格式：</p>
<pre><code>^\d{4}-\d{1,2}-\d{1,2}
</code></pre></li>
<li><p>一年的12个月(01～09和1～12)：</p>
<pre><code>^(0?[1-9]|1[0-2])$
</code></pre></li>
<li><p>一个月的31天(01～09和1～31)：</p>
<pre><code>^((0?[1-9])|((1|2)[0-9])|30|31)$
</code></pre></li>
<li><p>钱的输入格式：</p>
<ul>
<li><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：</p>
<pre><code>^[1-9][0-9]*$ 
</code></pre><p> 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：</p>
<pre><code>^(0|[1-9][0-9]*)$ 
</code></pre><p> 表示一个0或者一个不以0开头的数字.</p>
</li>
<li><p>我们还可以允许开头有一个负号：</p>
<pre><code>^(0|-?[1-9][0-9]*)$ 
</code></pre><p>  这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.</p>
</li>
<li><p>下面我们要加的是说明可能的小数部分：</p>
<pre><code>^[0-9]+(.[0-9]+)?$
</code></pre><p>  必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：</p>
<pre><code>^[0-9]+(.[0-9]{2})?$
</code></pre><p>  这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以写成：</p>
<pre><code>^[0-9]+(.[0-9]{1,2})?$  
</code></pre><p>  这就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：</p>
<pre><code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
</code></pre><p>  1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：</p>
<pre><code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
</code></pre><p>  备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉那个反斜杠,一般的错误都在这里</p>
</li>
</ul>
</li>
<li><p>xml文件：</p>
<pre><code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
</code></pre></li>
<li><p>中文字符的正则表达式：</p>
<pre><code>[\u4e00-\u9fa5]
</code></pre></li>
<li><p>双字节字符：</p>
<pre><code>[^\x00-\xff] 
</code></pre><p>(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>
</li>
<li><p>空白行的正则表达式：</p>
<pre><code>\n\s*\r 
</code></pre><p>(可以用来删除空白行)</p>
</li>
<li><p>HTML标记的正则表达式：</p>
<pre><code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*?/&gt; 
</code></pre><p>(网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>
</li>
<li><p>首尾空白字符的正则表达式：</p>
<pre><code>^\s*|\s*$
</code></pre><p>或</p>
<pre><code>(^\s*)|(\s*$)
</code></pre><p> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>
</li>
<li><p>腾讯QQ号：</p>
<pre><code>[1-9][0-9]{4,} 
</code></pre><p>(腾讯QQ号从10000开始)</p>
</li>
<li><p>中国邮政编码：</p>
<pre><code>[1-9]\d{5}(?!\d)
</code></pre><p> (中国邮政编码为6位数字)</p>
</li>
<li><p>IP地址：</p>
<pre><code>\d+\.\d+\.\d+\.\d+ 
</code></pre><p>(提取IP地址时有用)</p>
</li>
<li><p>IP地址：</p>
<pre><code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则" scheme="VickChen.win/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>解决C#获取SQL的timestamp类型到程序中为byte[]类型的问题</title>
    <link href="VickChen.win/2016/sql-timestamp-to-cshap/"/>
    <id>VickChen.win/2016/sql-timestamp-to-cshap/</id>
    <published>2016-11-03T13:06:29.000Z</published>
    <updated>2017-07-10T09:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p> 项目中由于需求设计，数据库中需要一个timestamp时间戳类型的字段来作为区别数据添加和修改的标识。由于在SQL SERVER 中,不可为空的timestamp类型在语义上等同于binary(8)类型,可为空的 timestamp类型在语义上等同于varbinary(8)类型，这将导致在C#程序中获取到的timestamp类型则变成了byte[]类型。所以如果我们需要从数据库中获取并使用这个时间戳的话就必需经过转换。</p>
<a id="more"></a>
<ul>
<li><h3 id="SQL-Server-中timestamp类型的定义"><a href="#SQL-Server-中timestamp类型的定义" class="headerlink" title="SQL Server 中timestamp类型的定义"></a>SQL Server 中timestamp类型的定义</h3></li>
</ul>
<p>首先看下timestamp在SQL Server 2005中的定义，该定义摘抄自SQL Server 2005联机丛书(具体详情 <a href="http://msdn.microsoft.com/zh-cn/library/ms182776(v=sql.90).aspx" target="_blank" rel="external">点此链接)</a>:</p>
<blockquote>
<p>timestamp 公开数据库中自动生成的唯一二进制数字的数据类型。timestamp 通常用作给表行加版本戳的机制。 存储大小为 8 个字节。 timestamp 数据类型只是递增的数字，不保留日期或时间。 若要记录日期或时间，请使用 datetime 数据类型。</p>
<p>每个数据库都有一个计数器，当对数据库中包含 timestamp 列的表执行插入或更新操作时，该计数器值就会增加。 该计数器是数据库时间戳。 这可以跟踪数据库内的相对时间，而不是时钟相关联的实际时间。</p>
<p>一个表只能有一个 timestamp 列， 每次修改或插入包含 timestamp 列的行时，就会在 timestamp 列中插入增量数据库时间戳值。 这一属性使 timestamp 列不适合作为键使用，尤其是不能作为主键使用。</p>
<p>对数据行(row)的任何更新都会更改 timestamp 值，从而更改键值。 如果该列属于主键，那么旧的键值将无效，进而引用该旧值的外键也将不再有效。 如果该表在动态游标中引用，则所有更新均会更改游标中行的位置。 如果该列属于索引键，则对数据行的所有更新还将导致索引更新。</p>
<p>使用某一行中的 timestamp 列可以很容易地确定该行中的任何值自上次读取以后是否发生了更改。 如果对行进行了更改，就会更新该时间戳值。 如果没有对行进行更改，则该时间戳值将与以前读取该行时的时间戳值一致。 若要返回数据库的当前时间戳值，请使用 @@DBTS。</p>
<p>Transact-SQL timestamp 数据类型不同于在 SQL-2003 标准中定义的 timestamp 数据类型。 SQL-2003 timestamp 数据类型等同于 Transact-SQL datetime 数据类型。</p>
<p>rowversion 的数据类型为 timestamp 数据类型的同义词，并具有数据类型同义词的行为。 在 DDL 语句，请尽量使用 rowversion 而不是 timestamp。 有关详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/ms177566(v=sql.90).aspx" target="_blank" rel="external">数据类型同义词 (Transact-SQL)</a> </p>
</blockquote>
<ul>
<li><h3 id="解决数据库中timestamp类型和C-中byte-类型转换问题"><a href="#解决数据库中timestamp类型和C-中byte-类型转换问题" class="headerlink" title="解决数据库中timestamp类型和C#中byte[]类型转换问题"></a>解决数据库中timestamp类型和C#中byte[]类型转换问题</h3></li>
</ul>
<p>在程序中我们发现，通过ADO.NET获取数据库中timestamp字段值到程序中，结果类型为byte[]。假设在数据库中timestamp的值为0x00000000000007D6，那么获取到.net程序中的值就不是这样了，一把来说会变成byte[]的数组类型。那么我们的解决方式有两种，第一种方式是直接在数据库中将timestamp进行转换，可以转换成十六进制字符串类型或者BIGINT的长整形，这也是我推荐的方法。还有一种是在.NET 程序中使用BitConverter方法进行转换。以下是两种方式的代码：</p>
<h4 id="方法一（在SQL中转换）："><a href="#方法一（在SQL中转换）：" class="headerlink" title="方法一（在SQL中转换）："></a>方法一（在SQL中转换）：</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TS</div><div class="line">,<span class="keyword">CAST</span>(TS <span class="keyword">AS</span> VARBINARY(<span class="number">8</span>)) <span class="keyword">AS</span> <span class="string">'timestamp转十六进制字符串'</span> </div><div class="line">,<span class="keyword">CONVERT</span>(<span class="built_in">BIGINT</span>,TS) <span class="keyword">AS</span> <span class="string">'timestamp转bigint类型'</span></div><div class="line"><span class="keyword">FROM</span> tb_Ts</div></pre></td></tr></table></figure>
<p> 这样一来我们就可以获取到timestamp的十六进制字符串或者bigint，最终查询出来的结果如下图：<br> <img src="http://shiyousan.com/UserFiles/images/2014/06/635373323909511292/000001.jpg" alt=""></p>
<p> 另外要说明的一点是，VARBINARY(8)对应的c# 类型是byte[]，所以建议直接转换成bigint类型，否则在C#中还要调用下面的方法</p>
<h4 id="方法二（在程序中转换-调用下面的方法即可）："><a href="#方法二（在程序中转换-调用下面的方法即可）：" class="headerlink" title="方法二（在程序中转换,调用下面的方法即可）："></a>方法二（在程序中转换,调用下面的方法即可）：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 将数据库中timespan转换成十六进制字符串</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="objTs"&gt;</span>从数据库中获取的timespan值<span class="doctag">&lt;/param&gt;</span>      </span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>timespan十六进制字符串<span class="doctag">&lt;/returns&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">string</span> <span class="title">ConvertToTimeSpanString</span>(<span class="params"><span class="keyword">object</span> objTs</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">byte</span>[] btTsArray=objTs <span class="keyword">as</span> <span class="keyword">byte</span>[];</div><div class="line">String strTimeSpan = <span class="string">"0x"</span>+ BitConverter.ToString(btTsArray).Replace(<span class="string">"-"</span>,<span class="string">""</span>);</div><div class="line"><span class="keyword">return</span> strTimeSpan;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>参考:<a href="http://shiyousan.com/post/635373323909511292" target="_blank" rel="external">十有三博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 项目中由于需求设计，数据库中需要一个timestamp时间戳类型的字段来作为区别数据添加和修改的标识。由于在SQL SERVER 中,不可为空的timestamp类型在语义上等同于binary(8)类型,可为空的 timestamp类型在语义上等同于varbinary(8)类型，这将导致在C#程序中获取到的timestamp类型则变成了byte[]类型。所以如果我们需要从数据库中获取并使用这个时间戳的话就必需经过转换。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>查询整个数据库中某个特定值所在的位置</title>
    <link href="VickChen.win/2016/find-value-in-db/"/>
    <id>VickChen.win/2016/find-value-in-db/</id>
    <published>2016-10-31T15:15:48.000Z</published>
    <updated>2016-11-04T03:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们想通过一个值知道这个值来自数据库的哪个表以及哪个字段，在网上搜了一下，找到一个比较好的方法，通过一个存储过程实现的。只需要传入一个想要查找的值，即可查询出这个值所在的表和字段名。</p>
<p>前提是要将这个存储过程放在所查询的数据库。</p>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[SP_FindValueInDB]</div><div class="line">(</div><div class="line">    @<span class="keyword">value</span> <span class="built_in">VARCHAR</span>(<span class="number">1024</span>)</div><div class="line">)        </div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></div><div class="line">    <span class="comment">-- interfering with SELECT statements.</span></div><div class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">sql</span> <span class="built_in">VARCHAR</span>(<span class="number">1024</span>) </div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">table</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">column</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #t ( </div><div class="line">    tablename <span class="built_in">VARCHAR</span>(<span class="number">64</span>), </div><div class="line">    columnname <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line">) </div><div class="line"></div><div class="line"><span class="keyword">DECLARE</span> <span class="keyword">TABLES</span> <span class="keyword">CURSOR</span> </div><div class="line"><span class="keyword">FOR</span> </div><div class="line"></div><div class="line">    <span class="keyword">SELECT</span> o.name, c.name </div><div class="line">    <span class="keyword">FROM</span> syscolumns c </div><div class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sysobjects o <span class="keyword">ON</span> c.id = o.id </div><div class="line">    <span class="keyword">WHERE</span> o.type = <span class="string">'U'</span> <span class="keyword">AND</span> c.xtype <span class="keyword">IN</span> (<span class="number">167</span>, <span class="number">175</span>, <span class="number">231</span>, <span class="number">239</span>) </div><div class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> o.name, c.name </div><div class="line"></div><div class="line"><span class="keyword">OPEN</span> <span class="keyword">TABLES</span> </div><div class="line"></div><div class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> <span class="keyword">TABLES</span> </div><div class="line"><span class="keyword">INTO</span> @<span class="keyword">table</span>, @<span class="keyword">column</span> </div><div class="line"></div><div class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS = <span class="number">0</span> </div><div class="line"><span class="keyword">BEGIN</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = <span class="string">'IF EXISTS(SELECT NULL FROM ['</span> + @<span class="keyword">table</span> + <span class="string">'] '</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + <span class="string">'WHERE RTRIM(LTRIM(['</span> + @<span class="keyword">column</span> + <span class="string">'])) LIKE ''%'</span> + @<span class="keyword">value</span> + <span class="string">'%'') '</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + <span class="string">'INSERT INTO #t VALUES ('''</span> + @<span class="keyword">table</span> + <span class="string">''', '''</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + @<span class="keyword">column</span> + <span class="string">''')'</span> </div><div class="line"></div><div class="line">    EXEC(@<span class="keyword">sql</span>) </div><div class="line"></div><div class="line">    <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> <span class="keyword">TABLES</span> </div><div class="line">    <span class="keyword">INTO</span> @<span class="keyword">table</span>, @<span class="keyword">column</span> </div><div class="line"><span class="keyword">END</span> </div><div class="line"></div><div class="line"><span class="keyword">CLOSE</span> <span class="keyword">TABLES</span> </div><div class="line"><span class="keyword">DEALLOCATE</span> <span class="keyword">TABLES</span> </div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * </div><div class="line"><span class="keyword">FROM</span> #t </div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #t </div><div class="line"></div><div class="line"><span class="keyword">End</span></div></pre></td></tr></table></figure>
<p><em>参考:<a href="http://www.cnblogs.com/michaelxu/archive/2009/11/04/1596106.html" target="_blank" rel="external">徐洪军的博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们想通过一个值知道这个值来自数据库的哪个表以及哪个字段，在网上搜了一下，找到一个比较好的方法，通过一个存储过程实现的。只需要传入一个想要查找的值，即可查询出这个值所在的表和字段名。&lt;/p&gt;
&lt;p&gt;前提是要将这个存储过程放在所查询的数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>用存储过程生成实体类</title>
    <link href="VickChen.win/2016/proc-generate-entity-class/"/>
    <id>VickChen.win/2016/proc-generate-entity-class/</id>
    <published>2016-10-26T13:46:18.000Z</published>
    <updated>2016-11-03T09:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实网上已经有有很多实体类生成工具的存在,但多了解点知识总是没错的.</p>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">IF EXISTS (<span class="keyword">select</span> * <span class="keyword">FROM</span> dbo.sysobjects <span class="keyword">WHERE</span> <span class="keyword">id</span> = object_id(N<span class="string">'procGenerateEntityClass'</span>) <span class="keyword">AND</span> OBJECTPROPERTY(<span class="keyword">id</span>, N<span class="string">'IsProcedure'</span>) = <span class="number">1</span>)</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> procGenerateEntityClass</div><div class="line"><span class="keyword">GO</span></div><div class="line"><span class="comment">/*======================================================================</span></div><div class="line">Business Entity Class Generator</div><div class="line">This SP accepts a DATABASE object (table, view) name's parameter AND</div><div class="line">generates (C# code) custom entity class based ON the object's fields</div><div class="line">======================================================================*/</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procGenerateEntityClass</div><div class="line">@ObjectName <span class="built_in">varchar</span>(<span class="number">100</span>)</div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">  @<span class="keyword">type</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</div><div class="line"><span class="keyword">DECLARE</span> objCursor <span class="keyword">CURSOR</span></div><div class="line"><span class="keyword">FOR</span></div><div class="line"><span class="keyword">SELECT</span> sc.name, st.name <span class="keyword">type</span> <span class="keyword">FROM</span> syscolumns sc</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> systypes st</div><div class="line"><span class="keyword">ON</span> st.xusertype = sc.xusertype</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span>=OBJECT_ID(@ObjectName)</div><div class="line"><span class="keyword">DECLARE</span> @propertyCodes <span class="built_in">varchar</span>(<span class="number">8000</span>)</div><div class="line"><span class="keyword">SET</span> @propertyCodes = <span class="string">''</span></div><div class="line"><span class="keyword">OPEN</span> objCursor</div><div class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> objCursor</div><div class="line"><span class="keyword">INTO</span> @<span class="keyword">name</span>, @<span class="keyword">type</span></div><div class="line"><span class="keyword">DECLARE</span> @cType <span class="built_in">varchar</span>(<span class="number">20</span>)<span class="comment">-- C# type</span></div><div class="line"><span class="keyword">IF</span> @@FETCH_STATUS &lt;&gt; <span class="number">0</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">CLOSE</span> objCursor</div><div class="line">  <span class="keyword">DEALLOCATE</span> objCursor</div><div class="line">  PRINT <span class="string">'Error... Please CHECK passed parameter'</span></div><div class="line">  <span class="keyword">RETURN</span></div><div class="line"> <span class="keyword">END</span></div><div class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS = <span class="number">0</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">  <span class="comment">-- 将SQL Server数据库数据类型转换为C#数据类型</span></div><div class="line">  <span class="keyword">SET</span> @cType =</div><div class="line">  <span class="keyword">CASE</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span> <span class="keyword">OR</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%text%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'string'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">IN</span> (<span class="string">'decimal'</span>, <span class="string">'numeric'</span>)</div><div class="line">   <span class="keyword">THEN</span> <span class="string">'decimal'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'real'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'float'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%money%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'decimal'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'bit'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'bool'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">IN</span> (<span class="string">'bigint'</span>, <span class="string">'timestamp'</span>)  </div><div class="line">   <span class="keyword">THEN</span> <span class="string">'long'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%int%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'int'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'datetime'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'DateTime'</span> </div><div class="line">   <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'uniqueidentifier'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'Guid'</span>  </div><div class="line">  <span class="keyword">ELSE</span></div><div class="line">   @<span class="keyword">type</span></div><div class="line">  <span class="keyword">END</span></div><div class="line">  <span class="keyword">SET</span> @propertyCodes = @propertyCodes + <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'public '</span> + @ctype + <span class="string">' '</span> + @<span class="keyword">name</span> + <span class="string">'&#123; get; set; &#125;'</span> + <span class="built_in">CHAR</span>(<span class="number">13</span>) + <span class="built_in">CHAR</span>(<span class="number">13</span>)</div><div class="line">  <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> objCursor</div><div class="line">  <span class="keyword">INTO</span> @<span class="keyword">name</span>, @<span class="keyword">type</span></div><div class="line"> <span class="keyword">END</span></div><div class="line"><span class="comment">--PRINT '[Serializable]'</span></div><div class="line">PRINT <span class="string">'public class '</span> + @ObjectName + <span class="string">'Info'</span></div><div class="line">PRINT <span class="string">'&#123;'</span></div><div class="line">PRINT <span class="string">''</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'public '</span> + @ObjectName + <span class="string">'Info()'</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'&#123;'</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'&#125;'</span></div><div class="line">PRINT <span class="string">''</span></div><div class="line">PRINT @propertyCodes</div><div class="line">PRINT <span class="string">'&#125;'</span></div><div class="line"><span class="keyword">CLOSE</span> objCursor</div><div class="line"><span class="keyword">DEALLOCATE</span> objCursor</div></pre></td></tr></table></figure>
<p>使用方法:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC procGenerateEntityClass 'tabname'</div></pre></td></tr></table></figure></p>
<p><em>参考地址: <a href="http://www.cnblogs.com/jacktang/archive/2008/12/10/1352176.html" target="_blank" rel="external">Jack Tang的博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实网上已经有有很多实体类生成工具的存在,但多了解点知识总是没错的.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
</feed>
