<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vick&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="VickChen.win/"/>
  <updated>2020-07-12T12:38:53.279Z</updated>
  <id>VickChen.win/</id>
  
  <author>
    <name>Vick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三种MySql避免重复插入记录方法</title>
    <link href="VickChen.win/2019/201907192012/"/>
    <id>VickChen.win/2019/201907192012/</id>
    <published>2019-07-19T12:12:05.000Z</published>
    <updated>2020-07-12T12:38:53.279Z</updated>
    
    <content type="html"><![CDATA[<p>mysql在存在主键冲突或者唯一键冲突的情况下，根据插入策略不同，一般有以下三种避免方法:<br>1、insert ignore<br>2、replace into<br>3、insert on duplicate key update</p>
<p>注意，除非表有一个PRIMARY KEY或UNIQUE索引，否则，使用以上三个语句没有意义，与使用单纯的INSERT INTO相同。</p>
<a id="more"></a>
<h2 id="insert-ignore"><a href="#insert-ignore" class="headerlink" title="insert ignore"></a>insert ignore</h2><ul>
<li>insert ignore会忽略数据库中已经存在的数据(根据主键或者唯一索引判断)，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) </span><br><span class="line">VALUES (&apos;test9@163.com&apos;, &apos;99999&apos;, &apos;9999&apos;);</span><br></pre></td></tr></table></figure>
<p>这样当有重复记录就会忽略,执行后返回数字0</p>
<p>还有个应用就是复制表,避免重复记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT IGNORE INTO `table_1` (`name`) SELECT `name` FROM `table_2`;</span><br></pre></td></tr></table></figure>
<h2 id="replace-into"><a href="#replace-into" class="headerlink" title="replace into"></a>replace into</h2><ul>
<li>replace into 首先尝试插入数据到表中。 如果发现表中已经有此行数据(根据主键或者唯一索引判断)则先删除此行数据，然后插入新的数据，否则，直接插入新数据。</li>
<li>使用replace into，你必须具有delete和insert权限。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO `table_name`(`col_name`, ...) VALUES (...);</span><br><span class="line">REPLACE INTO `table_name` (`col_name`, ...) SELECT ...;</span><br><span class="line">REPLACE INTO `table_name` SET `col_name`=&apos;value&apos;,...</span><br></pre></td></tr></table></figure>
<h2 id="insert-on-duplicate-key-update"><a href="#insert-on-duplicate-key-update" class="headerlink" title="insert on duplicate key update"></a>insert on duplicate key update</h2><ul>
<li><p>如果在insert into 语句末尾指定了on duplicate key update，并且插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则在出现重复值的行执行UPDATE；如果不会导致重复的问题，则插入新行，跟普通的insert into一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--如果列a被定义为UNIQUE，并且包含值1，则以下两个语句具有相同的效果</span><br><span class="line">INSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) </span><br><span class="line">ON DUPLICATE KEY UPDATE `c`=`c`+1; </span><br><span class="line"></span><br><span class="line">UPDATE `table` SET `c`=`c`+1 WHERE `a`=1;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用insert into，你必须具有insert和update权限。</p>
</li>
<li><p>如果有新记录被插入，则受影响行的值显示1；如果原有的记录被更新，则受影响行的值显示2；如果记录被更新前后值是一样的，则受影响行数的值显示0。 </p>
</li>
<li><p>当您使用on duplicate key update时，insert delayed (延迟插入)选项被忽略。</p>
</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol>
<li><p>这三种方法都能避免主键或者唯一索引重复导致的插入失败问题。</p>
</li>
<li><p>insert ignore 能忽略重复数据，只插入不重复的数据。</p>
</li>
<li><p>replace into 和 insert … on duplicate key update 都是替换原有的重复数据。</p>
</li>
<li><p>replace into 是删除原有的行后，在插入新行，如有自增id，这个会造成自增id的改变；</p>
</li>
<li><p>insert … on duplicate key update在遇到重复行时，会直接更新原有的行，具体更新哪些字段怎么更新，取决于update后的语句。</p>
</li>
<li>特别说明：UNIQUE索引将会对null字段失效，也就是说(a字段上建立唯一索引)：<code>INSERT INTO</code>test<code>(</code>a<code>) VALUES (NULL);</code> 是可以重复插入的（联合唯一索引也一样）。</li>
</ol>
<p><em>本文部分出自 - <a href="https://www.jianshu.com/p/751299bd5669" target="_blank" rel="noopener">MySQL避免插入重复记录的方法</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql在存在主键冲突或者唯一键冲突的情况下，根据插入策略不同，一般有以下三种避免方法:&lt;br&gt;1、insert ignore&lt;br&gt;2、replace into&lt;br&gt;3、insert on duplicate key update&lt;/p&gt;
&lt;p&gt;注意，除非表有一个PRIMARY KEY或UNIQUE索引，否则，使用以上三个语句没有意义，与使用单纯的INSERT INTO相同。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySql" scheme="VickChen.win/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>layui table 工具栏列隐藏状态本地永久化保存</title>
    <link href="VickChen.win/2019/201906012003/"/>
    <id>VickChen.win/2019/201906012003/</id>
    <published>2019-06-01T12:03:32.000Z</published>
    <updated>2020-07-10T12:32:25.898Z</updated>
    
    <content type="html"><![CDATA[<p>由于table列比较多，有时候用户不需要看那么多列，虽然layui提供了隐藏列的接口。但页面刷新后就会复原，这时候就可以将数据保存至localStorage中实现本地永久化保存</p>
<a id="more"></a>
<p>只需要改他的几行源码。然后在那个界面写上一句<code>var tableFlag = &quot;xxx&quot;;</code></p>
<p> table.js便会根据这个来区分是在操作哪个表的数据。</p>
<p><img src="https://gitee.com/vickchen/blogImgs/raw/master/img/1.png" alt><br><img src="https://gitee.com/vickchen/blogImgs/raw/master/img/2.png" alt><br><img src="https://gitee.com/vickchen/blogImgs/raw/master/img/3.png" alt></p>
<p><em>本文部分转载自 - <a href="https://fly.layui.com/jie/47318/" target="_blank" rel="noopener">Layui官方社区</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于table列比较多，有时候用户不需要看那么多列，虽然layui提供了隐藏列的接口。但页面刷新后就会复原，这时候就可以将数据保存至localStorage中实现本地永久化保存&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="VickChen.win/tags/JavaScript/"/>
    
      <category term="layui" scheme="VickChen.win/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>使用PicGo批量迁移图床</title>
    <link href="VickChen.win/2019/201905270004/"/>
    <id>VickChen.win/2019/201905270004/</id>
    <published>2019-05-26T16:04:32.000Z</published>
    <updated>2019-07-20T09:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次折腾完之后，感觉还是不太踏实，毕竟新浪已经准备禁止图床了，索性抽点时间一步到位的换个图床。</p>
<a id="more"></a>
<p>和以前一样，挑选了一圈，也是很纠结，最终还是下定决心直接使用 GitHub 了，稳定又方便。其实就是新建一个仓库，专门用来存放图片，只不过需要考虑一下图片过多、图片过大会不会被 GitHub 限制。</p>
<p>去 GitHub 搜索帮助文档，<a href="https://help.github.com/en/articles/what-is-my-disk-quota" target="_blank" rel="noopener">帮助文档信息 </a>，可以得知仓库最大为 100GB，但是官方建议保持在 1GB 以下，单个文件低于 100MB，因此用来存放文件绰绰有余。另外需要注意，仓库文件超过 1GB 时会收到 GitHub 的提醒邮件，超过 75GB 时，每次在提交时都会收到警告。</p>
<p>既然有这种限制，最好还是把图片压缩一下，推荐使用图片压缩工具：<a href="https://github.com/meowtec/Imagine" target="_blank" rel="noopener">Imagine</a> ，这个工具可以实时看到压缩效果，而且压缩率还不错，能到 50%。但是，如果想要保持图片的色彩度、还原度，压缩效果肯定是不行的，甚至有时候压缩后的图片比压缩前的还大。</p>
<p>迁移图片本来是个很麻烦的事情，要把图片迁移、博客文章里面的链接替换掉，但是还好有现成的工具可以使用，在这里推荐：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> ，这个工具本来不是做图片迁移的，仅仅是图片上传生成链接而已，但是有人开发了插件，专门用来迁移 markdown 文件里面的图片，会自动迁移图片并且更新 markdown 里面的图片链接。这个插件是：<a href="https://github.com/PicGo/picgo-plugin-pic-migrater" target="_blank" rel="noopener">picgo-plugin-pic-migrater</a> ，而且，还可以支持批量迁移，指定一个文件夹，直接迁移文件夹里面的所有 markdown 文件。</p>
<p>详细的迁移步骤就不再记录，几个重要的步骤：在 GitHub 建立仓库、安装并配置PicGo ，安装并配置picgo-plugin-pic-migrater插件、鼠标右键点击插件选择文件夹、搞定。操作前切记备份好自己的 markdown 文件，以免迁移出现问题导致文件丢失。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次折腾完之后，感觉还是不太踏实，毕竟新浪已经准备禁止图床了，索性抽点时间一步到位的换个图床。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="VickChen.win/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="GitHub" scheme="VickChen.win/tags/GitHub/"/>
    
      <category term="Hexo" scheme="VickChen.win/tags/Hexo/"/>
    
      <category term="PicGo" scheme="VickChen.win/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>解决微博图床防盗链的问题</title>
    <link href="VickChen.win/2019/201905050112/"/>
    <id>VickChen.win/2019/201905050112/</id>
    <published>2019-05-04T17:12:01.000Z</published>
    <updated>2019-07-20T08:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于不少自己搭建博客的人来说，使用什么图床可能比较难以选择，以前还有各种免费好用的图床工具，例如七牛云、SM.MS、Imgur、GitHub、微博图床等，当然还有腾讯云、阿里云的云存储服务，但是免费的意味着不稳定，说不定哪天图片就没有了，有一些国外的访问速度又不行，国内的云存储服务商价格也比较高，而且单一个博客也不需要太大空间，有点浪费。</p>
<p>本来刚刚开始写博客时用的是七牛云，后来涨价了，转到免费的 微博图床 。用了好几年没啥问题，没想到最近【2019 年 4 月份】微博图床出问题了，所有图片全部挂掉，访问图片链接全部是返回 403 状态码，表示拒绝访问，其实是微博图床开启了防盗链，本文就提供了一种简单有效的解决方案。</p>
<a id="more"></a>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>随机抽了一些图片链接在浏览器中直接打开看，发现是可以看到图片的，然后在博客中还是看不到图片，如果在博客中选择图片链接，使用右键 在新标签页中打开 ，也是不能看到。这就说明微博图床开始检测请求的合法性了，对于不正常的请求统统拒绝。</p>
<p>当然，如果直接使用图片的链接在浏览器中单独打开，是可以看到图片的，紧接着在博客中就可以看到对应的图片了，但是这并不是说明图片可以使用了，其实是浏览器的缓存作用，如果及时清除浏览器的缓存，发现又不能使用了。</p>
<p>原来，近期微博图床对图片 CDN 添加了引用来源【Referer】检测，非微博站内引用将会返回 403 错误码，即拒绝访问。那能不能伪造或者清除这个参数呢，其实是可以的，只不过伪造、清除都需要增加一些 Javascript 动态脚本来处理，需要一些技术支持。</p>
<p>如果选择清除 Referer 参数，可以先验证一下，把图片的链接直接复制到浏览器中访问，就不会有这个参数，发现可以正常访问，没有 403 错误</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在静态网页的head 标记中添加如下配置项:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>它的作用就是阻止浏览器发送 Referer 信息，对整个页面的所有链接生效。<br>这样一来微博图床就不知道请求的引用来源了，可以达到和直接在浏览器中访问一样的效果。 但是要注意，<strong>不是每种浏览器都支持这种语法的，此设置对有的浏览器来说无效。</strong></p>
<p>那么在 Hexo 框架中怎么增加呢，显然不会有相关配置项，只能更改源代码，而且使用了 Next 主题，应该要更改主题的源代码，以保证 Hexo 在渲染静态页面为每个页面都增加这个配置。查阅文档，了解了渲染模板所在位置，打开 <strong>themes/next/layout/_partials/head.swig</strong> 文件，在里面添加 meta 标记就行。</p>
<p>修改完成后查看页面的源代码，已经有这个属性了，并且所有的图片都可以正常访问了，完美。</p>
<p>后续肯定会抽时间迁移图床的，先用着吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于不少自己搭建博客的人来说，使用什么图床可能比较难以选择，以前还有各种免费好用的图床工具，例如七牛云、SM.MS、Imgur、GitHub、微博图床等，当然还有腾讯云、阿里云的云存储服务，但是免费的意味着不稳定，说不定哪天图片就没有了，有一些国外的访问速度又不行，国内的云存储服务商价格也比较高，而且单一个博客也不需要太大空间，有点浪费。&lt;/p&gt;
&lt;p&gt;本来刚刚开始写博客时用的是七牛云，后来涨价了，转到免费的 微博图床 。用了好几年没啥问题，没想到最近【2019 年 4 月份】微博图床出问题了，所有图片全部挂掉，访问图片链接全部是返回 403 状态码，表示拒绝访问，其实是微博图床开启了防盗链，本文就提供了一种简单有效的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="VickChen.win/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Debian使用Docker安装redis和mysql</title>
    <link href="VickChen.win/2019/201902150122/"/>
    <id>VickChen.win/2019/201902150122/</id>
    <published>2019-02-14T17:22:01.000Z</published>
    <updated>2019-07-20T09:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个简化容器中应用程序进程管理过程的应用程序。容器允许您在资源隔离的进程中运行应用程序。它们与虚拟机类似，但容器更便携，更加资源友好，并且更依赖于主机操作系统。</p>
<p>这一次，我们将在Debian 9上安装和使用Docker CE。您将安装Docker本身，并使用容器和映像。</p>
<a id="more"></a>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方Debian存储库中提供的Docker安装包可能不是最新版本。为了确保我们获得最新版本，我们将从官方Docker存储库安装Docker。为此，我们将添加一个新的包源，从Docker添加GPG密钥以确保下载有效，然后安装该包。</p>
<p>首先，更新现有的包列表：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>接下来，安装一些允许apt使用包通过HTTPS的必备软件包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure>
<p>然后将官方Docker存储库的GPG密钥添加到您的系统：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>将Docker存储库添加到APT源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>
<p>接下来，使用新添加的repo中的Docker包更新包数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>确保您要从Docker repo而不是默认的Debian repo安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy docker-ce</span><br></pre></td></tr></table></figure>
<p>虽然Docker的版本号可能不同，但您会看到这样的输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br><span class="line">  Candidate: 18.06.1~ce~3-0~debian</span><br><span class="line">  Version table:</span><br><span class="line">     18.06.1~ce~3-0~debian 500</span><br><span class="line">        500 https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br></pre></td></tr></table></figure>
<p>请注意，<code>docker-ce</code>未安装，但安装的候选者来自Debian 9（stretch）的Docker存储库。</p>
<p>最后，安装Docker：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>
<p>现在应该安装Docker，守护进程启动，并启用进程启动进程。检查它是否正在运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure>
<p>输出应类似于以下内容，表明该服务处于活动状态并正在运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2018-07-05 15:08:39 UTC; 2min 55s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line">  Main PID: 21319 (dockerd)</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─21319 /usr/bin/dockerd -H fd://</span><br><span class="line">           └─21326 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br></pre></td></tr></table></figure>
<h3 id="使用Docker镜像"><a href="#使用Docker镜像" class="headerlink" title="使用Docker镜像"></a>使用Docker镜像</h3><p>Docker容器是从Docker镜像构建的。默认情况下，Docker从Docker Hub中获取这些映像，Docker Hub是由Docker管理的Docker注册表，Docker项目背后的公司。任何人都可以在Docker Hub上托管他们的Docker镜像，因此您需要的大多数应用程序和Linux发行版都将在那里托管图像。</p>
<p>要检查您是否可以从Docker Hub访问和下载图像，请键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>输出将指示Docker正常工作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">9db2ca6ccae0: Pull complete</span><br><span class="line">Digest: sha256:4b8ff392a12ed9ea17784bd3c9a8b1fa3299cac44aca35a85c90c5e3c7afacdc</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line">​</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Docker最初无法在本地找到hello-world图像，因此它从Docker Hub下载了图像，Docker Hub是默认存储库。下载映像后，Docker从映像创建了一个容器，并在容器中执行了应用程序，显示了该消息。</p>
<h3 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h3><h4 id="查看本机镜像"><a href="#查看本机镜像" class="headerlink" title="查看本机镜像"></a>查看本机镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vick@debian:~$ sudo docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               5.7                 e47e309f72c8        9 days ago          372MB</span><br><span class="line">redis               3.2                 87856cc39862        4 months ago        76MB</span><br></pre></td></tr></table></figure>
<h4 id="查看本机运行中的容器"><a href="#查看本机运行中的容器" class="headerlink" title="查看本机运行中的容器"></a>查看本机运行中的容器</h4><p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1g078v22tp7j20th023ab1.jpg" alt></p>
<h4 id="查看本机所有容器"><a href="#查看本机所有容器" class="headerlink" title="查看本机所有容器"></a>查看本机所有容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<h4 id="启动某个容器"><a href="#启动某个容器" class="headerlink" title="启动某个容器"></a>启动某个容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start XXXX <span class="comment">#XXXX可以是容器的id也可以是容器的name</span></span><br></pre></td></tr></table></figure>
<h4 id="停止某个容器"><a href="#停止某个容器" class="headerlink" title="停止某个容器"></a>停止某个容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop XXXX <span class="comment">#XXXX可以是容器的id也可以是容器的name</span></span><br></pre></td></tr></table></figure>
<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rmi XXXX <span class="comment">#XXXX可以是镜像的id也可以是镜像的name</span></span><br></pre></td></tr></table></figure>
<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm XXXX <span class="comment">#XXXX可以是容器的id也可以是容器的name</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li><p>删除前需要保证容器是停止的  stop</p>
</li>
<li><p>需要注意删除镜像和容器的命令不一样。 docker rmi ID  ,其中 容器(rm)  和 镜像(rmi)</p>
</li>
<li><p>顺序需要先删除容器再删除镜像</p>
</li>
</ol>
<h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>搜索mysql镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<p>下载mysql 5.7镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7 <span class="comment">#不带版本号默认最新</span></span><br></pre></td></tr></table></figure>
<p>启动mysql：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -v /home/vick/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=lanhe -d mysql:5.7</span><br></pre></td></tr></table></figure>
<p>注意，这里的容器名字叫：mysql ，root用户密码是：lanhe，映射宿主机子的端口3306到容器的端口3306，</p>
<p>并且将mysql的/var/lib/mysql目录映射到/home/vick/mysql/data文件夹。</p>
<h3 id="设置可远程访问"><a href="#设置可远程访问" class="headerlink" title="设置可远程访问"></a>设置可远程访问</h3><p>进入mysql容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vick@debian:~$ sudo docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line">root@943fd585094f:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>在容器内登陆Mysql：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@943fd585094f:/<span class="comment"># mysql -uroot -p  </span></span><br><span class="line"></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 12</span><br><span class="line">Server version: 5.7.25 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>查看用户信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select host,user,plugin,authentication_string from mysql.user;                                                                                            </span><br><span class="line">+-----------+---------------+-----------------------+-------------------------------------------+                                                                </span><br><span class="line">| host      | user          | plugin                | authentication_string                     |</span><br><span class="line">+-----------+---------------+-----------------------+-------------------------------------------+</span><br><span class="line">| localhost | root          | mysql_native_password | *A980E23A5D33A160CCCDE9D0A4DA20115167B799 |</span><br><span class="line">| localhost | mysql.session | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| localhost | mysql.sys     | mysql_native_password | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| %         | root          | mysql_native_password | *A980E23A5D33A160CCCDE9D0A4DA20115167B799 |</span><br><span class="line">+-----------+---------------+-----------------------+-------------------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>host为 % 表示不限制ip   localhost表示本机使用    plugin非mysql_native_password 则需要修改密码。</p>
<p>连接时错误提示：</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1g078c9yh35j20o701f0t3.jpg" alt></p>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER user <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;  </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)  </span><br><span class="line">mysql&gt;   </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;  </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>连接数据库：</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1g0788grm0gj20fq0ilgm0.jpg" alt></p>
<p>连接成功了。</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>安装步骤与mysql类似：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search  redis</span><br><span class="line">docker pull  redis:3.2</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -v /home/vick/redis/data:/data  -d redis:3.2 redis-server --appendonly yes</span><br></pre></td></tr></table></figure>
<p>命令说明：</p>
<p><code>--name redis</code> :将容器命名为redis</p>
<p><code>-p 6379:6379</code> : 将容器的6379端口映射到主机的6379端口</p>
<p><code>-v /home/vick/redis/data:/data</code> : 将主机中/home/vick/redis/data目录挂载到容器的/data</p>
<p><code>redis-server --appendonly yes</code> : 在容器执行redis-server启动命令，并打开redis持久化配置</p>
<p>连接、查看容器:</p>
<p>使用redis镜像执行redis-cli命令连接到刚启动的容器,主机IP为172.17.0.1</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vick@debian:~$ sudo docker <span class="built_in">exec</span> -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:3.2.12</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:b0df607ad3315254</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.9.0-8-amd64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">gcc_version:6.3.0</span><br><span class="line">process_id:1</span><br><span class="line">run_id:54ef1808535f61b18b9713cd9455c09396f032b4</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:5065</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">lru_clock:6719318</span><br><span class="line">executable:/data/redis-server</span><br><span class="line">config_file:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">client_longest_output_list:0</span><br><span class="line">client_biggest_input_buf:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker是一个简化容器中应用程序进程管理过程的应用程序。容器允许您在资源隔离的进程中运行应用程序。它们与虚拟机类似，但容器更便携，更加资源友好，并且更依赖于主机操作系统。&lt;/p&gt;
&lt;p&gt;这一次，我们将在Debian 9上安装和使用Docker CE。您将安装Docker本身，并使用容器和映像。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Redis" scheme="VickChen.win/tags/Redis/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
      <category term="MySql" scheme="VickChen.win/tags/MySql/"/>
    
      <category term="Docker" scheme="VickChen.win/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 Redis、MySql</title>
    <link href="VickChen.win/2019/201901221340/"/>
    <id>VickChen.win/2019/201901221340/</id>
    <published>2019-01-22T05:40:32.000Z</published>
    <updated>2019-07-26T03:00:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要用到的数据库安装、配置以及常见错误</p>
<a id="more"></a>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 是一个高性能的key-value数据库。 在部分场合可以对关系数据库起到很好的补充作用。是当前比较热门的NOSQL系统之一。它提供了C#，Java，PHP，JavaScript，Python，Ruby等客户端，使用很方便。</p>
<h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳转至目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://download.redis.io/releases/redis-stable.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>Redis基于C开发，因此确保电脑安装有gcc和make。</p>
<ol>
<li>安装make命令  <code>sudo apt-get install make</code></li>
<li>安装sysv-rc-conf命令  <code>sudo apt-get install sysv-rc-conf</code></li>
<li>安装GCC:  <code>sudo apt-get install gcc</code></li>
</ol>
<p>完成之后，编译步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-stable</span><br><span class="line">make <span class="built_in">test</span> <span class="comment"># 可忽略，测试主机性能</span></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ./install_server.sh</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>接下来会出来redis配置，按照提示一步步设置端口，日志路径，配置文件等。<br>系统服务位于/etc/init.d/redis_6379，可以更名为/etc/inti.d/reids-server.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/init.d/redis&#123;_6379,-server&#125;</span><br><span class="line"><span class="comment"># 启动：</span></span><br><span class="line">sudo redis-server</span><br><span class="line"><span class="comment">#关闭命令-建议使用客户端停止</span></span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>
<h3 id="测试和连接"><a href="#测试和连接" class="headerlink" title="测试和连接"></a>测试和连接</h3><p>使用redis客户端测试服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<h3 id="修改Redis配置"><a href="#修改Redis配置" class="headerlink" title="修改Redis配置"></a>修改Redis配置</h3><h4 id="设置访问账号"><a href="#设置访问账号" class="headerlink" title="设置访问账号"></a>设置访问账号</h4><p>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为password。</p>
<p>用vi打开Redis服务器的配置文件redis.conf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/redis/redis.conf</span><br><span class="line"><span class="comment">#取消注释requirepass</span></span><br><span class="line">requirepass password</span><br></pre></td></tr></table></figure>
<h4 id="设置Redis可被远程访问"><a href="#设置Redis可被远程访问" class="headerlink" title="设置Redis可被远程访问"></a>设置Redis可被远程访问</h4><p>默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。用vi打开Redis服务器的配置文件redis.conf </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/redis/redis.conf</span><br><span class="line"><span class="comment">#注释bind</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1</span></span><br></pre></td></tr></table></figure>
<p>修改后，重启Redis服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br><span class="line">sudo redis-server</span><br></pre></td></tr></table></figure>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>本机登陆Redis服务器，输入密码</p>
<p><code>redis-cli -a password</code></p>
<p>远程访问，主机为x.x.x.x</p>
<p><code>redis-cli -a password -h x.x.x.x</code></p>
<h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><p>MySql是目前最受欢迎的关系型数据库之一。 由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，很多中小型网站的开发都选择将 MySql作为网站数据库。</p>
<h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><p>debian下安装软件的指令为apt-get，在使用apt-get安装之前，需要先下载官网提供的Deb包，以将MySql的仓库添加到apt-get的源中。</p>
<ol>
<li><p>获取下载链接</p>
<p>打开网站<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2Frepo%2Fapt%2F" target="_blank" rel="noopener">MySQL APT Respository</a></p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1fzgaj3o70yj20s005fjrp.jpg" alt></p>
</li>
<li><p>点击Download，跳转到下载页面</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1fzgalkchhrj20ob0gsabk.jpg" alt></p>
</li>
<li><p>右键点击No thanks，just start my download复制链接</p>
</li>
<li><p>进入工作目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载Deb文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>将该文件添加至apt-get的源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ./mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后会弹出MySql的源配置界面</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058ly1fzgaf3wc54j20rs0d447p.jpg" alt></p>
<p>我们仅需选择版本，下面两个选项默认即可</p>
</li>
<li><p>更新源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>
<p>这一步可能会提示错误:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fzgav214e7j20h504pmz9.jpg" alt></p>
<p>可以换个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install &lt;mysql-server&gt;</span><br></pre></td></tr></table></figure>
<p>因为<code>aptitude</code>会自动把所有依赖的库都帮你顺着找到，并下载好。</p>
<p>而<code>apt-get</code>下载某个包中它的所有依赖项都必须存在。</p>
<p>这就是为什么我们每次执行<code>apt-get</code>的时候都需要先<code>apt-get update</code>的更新软件包的原因。</p>
<p>如果提示找不到<code>aptitude</code>，可以先使用<code>sudo apt-get install aptitude</code>进行下载</p>
<p>然后就是漫长的等待，因为安装包200多M…..</p>
<p>中途会让你输入root密码，自己输入一个记住就行了。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li><p>开启MySql服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>登陆</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>输入密码即可登陆</p>
</li>
<li><p>指定端口号登录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -P 3306</span><br></pre></td></tr></table></figure>
<p>注意指定端口的字母P为大写，而标识密码的p为小写。MySql默认端口号为3306</p>
</li>
<li><p>指定IP地址和端口号登录MySQL数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root -p -P 3306</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为MySql刚安装完成不允许从远程访问而且只有一个root用户，这对于开发不太友好也比较不安全。</p>
<p>所以我们应该创建一个用于开发的数据库账户，并且为它设置远程访问权限。</p>
<p>当然，<strong>在真正投入生成环境之后，我们应该移除远程访问的权限</strong></p>
<ol>
<li><p>登录MySql</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入密码登录之后，新建一个用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER <span class="string">'username'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成之后为该用户分配所有权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'username'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着刷新权限即可使用新用户在任意host登录数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果还是不行的话，打开下面的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>把bind-adress那一行的127.0.0.1改成0.0.0.0 </p>
<p><strong>重要提示：投入生产时记得改回来</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># By default we only accept connections from localhost</span></span><br><span class="line"><span class="comment"># bind-address    = 127.0.0.1 #先注释此行</span></span><br><span class="line"><span class="built_in">bind</span>-address    = 0.0.0.0</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中需要用到的数据库安装、配置以及常见错误&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Redis" scheme="VickChen.win/tags/Redis/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
      <category term="MySql" scheme="VickChen.win/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Debian 安装 VMware Tools</title>
    <link href="VickChen.win/2018/201812240020/"/>
    <id>VickChen.win/2018/201812240020/</id>
    <published>2018-12-23T16:20:11.000Z</published>
    <updated>2019-07-20T08:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先选择VMware导航栏的 虚拟机&gt;安装VMware Tools</p>
<p>之后打开  文件&gt;VMware Tools</p>
<p>将VMwareTools.tar.gz文件复制至home目录下</p>
<p>打开home文件中打开命令行,利用tar -zxvf解压VMwareTools.tar.gz</p>
<p><code>tar zxvf VMwareTools.tar.gz</code></p>
<p>将会得到VMware-Tools-distrib文件夹</p>
<p>然后将VMware-Tools-distrib放至/usr/src目录</p>
<p>sudo cp -r /home/vick/VMware-Tools-distrib /usr/src/</p>
<p>因为debian默认并没有带有ifconfig命令,因此在安装VMware Tools前需要安装net-tools</p>
<p>安装net-tools</p>
<p><code>sudo apt-get install net-tools</code></p>
<p>开始安装VMwareTools</p>
<p><code>sudo /usr/src/VMware-Tools-distrib/vmware-install.pl</code></p>
<p>之后一直按回车键,直到安装完成后重启</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>debian 9解决安装vm tools 不生效</p>
<p><code>apt install open-vm-tools open-vm-tools-desktop open-vm-tools-dkmsb</code></p>
</li>
<li><p>卸载</p>
<p>查找其卸载程序位置</p>
<p><code>find / ./vmware-uninstall-tools.pl</code></p>
<p>一般是在/usr/bin/目录下，找到后在其所在目录执行它。</p>
<p><code>./vmware-uninstall-tools.pl</code></p>
<p>完全删除其配置文件命令如下(请谨慎使用，勿敲错！数据无价，本人概不负责)。</p>
<p><code>find / vmware*  -exec rm -rfv {} \;</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware Tools是VMware虚拟机中自带的一种增强工具，相当于VirtualBox中的增强功能（Sun VirtualBox Guest Additions），是VMware提供的增强虚拟显卡和硬盘性能、以及同步虚拟机与主机时钟的驱动程序。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
      <category term="VMware" scheme="VickChen.win/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>使用Debian时遇到的问题</title>
    <link href="VickChen.win/2018/201812200110/"/>
    <id>VickChen.win/2018/201812200110/</id>
    <published>2018-12-19T17:10:05.000Z</published>
    <updated>2019-07-26T02:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前在学习Debian，然后发现一路都是坑，与之前接触的Ubuntu在使用上还是有点差别的。Debian更加原生，也更加稳定，坑也更多。为了防止后来者继续踩坑，特意写了此文用于记录总结初学者在学习过程中遇到的各种问题。</p>
<a id="more"></a>
<h2 id="切换系统语言环境"><a href="#切换系统语言环境" class="headerlink" title="切换系统语言环境"></a>切换系统语言环境</h2><p>在Debian系统中，若是设置了中文环境后，在终端进行操作时，将会遇到中文错误提示等信息显示为乱码的问题。这时候，部分朋友选择了重新安装系统。然而，其实并不用重新安装，只要进行语言的切换就可以了。</p>
<p>命令行执行：</p>
<p><code>$ sudo dpkg-reconfigure locales</code></p>
<p>将打开一个选择语言的窗口，在此窗口中选择英文环境的字符集项，此例中选择en_US.utf-8，即按空格选中复选框，将中文环境的包 (<code>zh_CN.utf-8</code>) ，将复选框去掉选择后敲回车，确定安装即可。</p>
<p>可使用以下命令查看是否安装成功：</p>
<p><code>$ locale -a</code></p>
<p>系统将输出如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">C.UTF-8</span><br><span class="line">POSIX</span><br><span class="line">en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>然后输入<code>$ reboot</code> 重启系统即可。</p>
<p>若是担心英文环境下操作不方便也可切换为繁体中文(<code>zh_HK.utf-8</code>)</p>
<h2 id="gedit找不到命令"><a href="#gedit找不到命令" class="headerlink" title="gedit找不到命令"></a>gedit找不到命令</h2><p>直接重装下gedit即可。</p>
<p>打开终端，输入代码：</p>
<p><code>sudo apt-get  remove gedit</code></p>
<p>回车后输入：</p>
<p><code>sudo apt-get install gedit</code></p>
<h2 id="中文输入法不可用"><a href="#中文输入法不可用" class="headerlink" title="中文输入法不可用"></a>中文输入法不可用</h2><p>系统刚刚装好后随即安装了fcitx-googlepinyin输入法，发现输入法各种ctrl+space或者ctrl+shift一通乱按就是什么也看不到，几经折腾发现是因为根本就没有Ui控件…</p>
<p>还需要安装输入法前端所需要的ui动态库</p>
<p>打开终端，输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install fcitx-ui-classic &amp;&amp; apt-get install fcitx-ui-light</span><br></pre></td></tr></table></figure>
<p>安装完成后打开fcitx的配置工具，根据需要删除掉不需要的输入法。</p>
<p>然后<code>reboot</code> 重启系统，就可以看到按下快捷键后输入法弹出来了。然而这里又有一个坑，因为 <strong>输入法默认字号是零</strong> ，记得在Appearance页签内重新设置字号。</p>
<h2 id="更新163源"><a href="#更新163源" class="headerlink" title="更新163源"></a>更新163源</h2><p>终端输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>复制以下内容保存即可</p>
<blockquote>
<p> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br> deb <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian/" target="_blank" rel="noopener">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br> deb <a href="http://mirrors.163.com/debian-security/" target="_blank" rel="noopener">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib<br> deb-src <a href="http://mirrors.163.com/debian-security/" target="_blank" rel="noopener">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib</p>
</blockquote>
<p>直接保存即可</p>
<p>然后运行下面的命令用于更新配置</p>
<p><code>apt-get update</code></p>
<h2 id="切换系统用户"><a href="#切换系统用户" class="headerlink" title="切换系统用户"></a>切换系统用户</h2><p>更新源的时候可能会遇到无法保存的问题，是因为这个权限不够，这时候有两个办法。</p>
<p>这里先说第一个办法，切换系统用户到root后再执行上述命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>
<p>然后会让你输入root用户密码，此处密码无输入效果。输入后按回车即可。</p>
<p>然后就可以看到看到系统用户已经成功改为root最高权限用户了。</p>
<p>以此类推，切换回原来用户只需要再执行一遍<code>su username</code> 指令后输入该用户对应的密码即可。</p>
<p>另外，<code>sudo su</code> 指令同样可以切换用户。但是可能会报下面的错误</p>
<h2 id="sudo指令报错"><a href="#sudo指令报错" class="headerlink" title="sudo指令报错"></a>sudo指令报错</h2><p>上面说的另一个办法就是在语句前加sudo 用临时权限执行。</p>
<p>初次使用这个指令可能会报错：</p>
<blockquote>
<p>当前用户不在sudoers文件(/etc/sudoers)里面，直接使用sudo命令是不允许的，会被系统记录并向root反馈</p>
</blockquote>
<p>处理这个问题很简单，但应该先理解其原理再操作。<br>首先要明白root的密码一般用户是不应改知道的，但一般用户有时可能要用到root的一些权限。<br>这里就有了一个 /etc/sudoers 文件，用来保存一些用户，使这些用户可以通过sudo命令来暂时获取root的权限。这些用户使用sudo时输入的密码是当前用户密码，而不是root密码。还可一在sudoers文件里限制一般用户的权限，这样就有了安全保证。</p>
<p>那么我们就来解决这个问题：</p>
<ol>
<li><p>切换到root用户</p>
<p><code>$ su root</code></p>
</li>
<li><p>查看/etc/sudoers权限</p>
<p><code>$ ls -all /etc/sudoers</code></p>
</li>
<li><p>更改权限为777</p>
<p><code>$ chmod 777 /etc/sudoers</code></p>
</li>
<li><p>编辑/etc/sudoers</p>
<p><code>$ vi /etc/sudoers</code></p>
<p>这个命令的意思是使用vi编辑器打开文件。</p>
</li>
<li><p>添加当前用户</p>
<p>可以看到打开的文件内容为：</p>
<blockquote>
<p>root ALL=(ALL:ALL) ALL</p>
</blockquote>
<p>在后面追加一行</p>
<blockquote>
<p>vick ALL=(ALL:ALL) ALL</p>
</blockquote>
<p>vi中刚进去是命令模式 按 <code>i</code> 或者 <code>insert</code> 进入编辑模式，编辑完了之后按ctrl+c或者esc退出编辑模式。之后输入命令 <code>:wq</code> ，保存离开。</p>
</li>
<li><p>把/etc/sudoers权限改回原来数据</p>
<p><code>$ chmod 690 /etc/sudoers</code></p>
</li>
</ol>
<p><strong>这里也可以不查看及修改权限，直接用root用户打开并修改文件后，使用<code>:wq!</code> 指令强制保存并离开。不过最好重新打开看下有没有保存成功</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在学习Debian，然后发现一路都是坑，与之前接触的Ubuntu在使用上还是有点差别的。Debian更加原生，也更加稳定，坑也更多。为了防止后来者继续踩坑，特意写了此文用于记录总结初学者在学习过程中遇到的各种问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Debian" scheme="VickChen.win/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core使用mailkit收取和发送邮件</title>
    <link href="VickChen.win/2018/201811230212/"/>
    <id>VickChen.win/2018/201811230212/</id>
    <published>2018-11-22T18:12:00.000Z</published>
    <updated>2019-07-26T02:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>邮件服务是一般的系统都会拥有和需要的功能，但是对于.Net项目来说，邮件服务的创建和使用会较为的麻烦。.NET对于邮件功能提供了System.Net.Mail用于创建邮件服务，该基础服务提供邮件的基础操作，并且使用也较为的简单。对于真正将该功能使用于项目的人，就会慢慢发现其中的优缺点，甚至有些时候不能忍受其中的问题。在这里介绍一种微软用于替代System.Net.Mail的邮件服务组件MailKit和MimeKit，官网地址：<a href="http://www.mimekit.net/" target="_blank" rel="noopener">http://www.mimekit.net/</a> GitHub地址：<a href="https://github.com/jstedfast/MimeKit" target="_blank" rel="noopener">https://github.com/jstedfast/MimeKit</a></p>
<a id="more"></a>
<h2 id="MailKit和MimeKit基础概述"><a href="#MailKit和MimeKit基础概述" class="headerlink" title="MailKit和MimeKit基础概述"></a>MailKit和MimeKit基础概述</h2><p>MailKit组件是一个免费开源的邮箱类库，简单来说MailKit帮我们封装了有关邮箱的一些帮助类，提供方法让我们更容易使用邮箱的SMTP、POP3、IMAP等协议。该组件是一个跨平台的Email组件，该组件支持.Net Core 、.Net FrameWork、Xamarin.Android、Xamarin.iOS、Windows Phone等等平台。</p>
<p>MimeKit提供了一个MIME解析器，组件具备的解析特性灵活、性能高、很好的处理各种各样的破碎的MIME格式化。MimeKit的性能实际上与GMime相当。</p>
<p>该组件在安全性的还是比较高的，处理安全的方式较多，SASL认证、支持S / MIME v3.2、支持OpenPGP、支持DKIM签名等等方式。Mailkit组件可以通过CancellationToken取消对应的操作，CancellationToken传播应取消操作的通知，一个的CancellationToken使线程，线程池工作项目之间，或取消合作任务的对象。过实例化CancellationTokenSource对象来创建取消令牌，该对象管理从其CancellationTokenSource.Token属性检索的取消令牌。然后，将取消令牌传递到应该收到取消通知的任意数量的线程，任务或操作。令牌不能用于启动取消。<br> MailKit组件支持异步操作，在内部编写的有关I/O异步操作的类</p>
<h2 id="创建基础邮件服务"><a href="#创建基础邮件服务" class="headerlink" title="创建基础邮件服务"></a>创建基础邮件服务</h2><p>介绍过MailKit和MimeKit组建的基础信息，接下来就介绍一下如何使用两个组件的基本功能，在这里我将基本操作做了一个简单的封装，一般的项目可以直接引用封装好的类，大家可以根据实际的情况对该组件进行扩展。</p>
<h3 id="基础实体类"><a href="#基础实体类" class="headerlink" title="基础实体类"></a>基础实体类</h3><h4 id="邮件实体类"><a href="#邮件实体类" class="headerlink" title="邮件实体类"></a>邮件实体类</h4><p>用于保存邮件至数据库</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailBoxEntity</span> : <span class="title">BaseEntity</span> &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 该邮件所属邮箱账号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> OwnerMailAccount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件主题</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Subject &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件文本内容</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailTextBody &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件html内容</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailHtmlBody &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件内容类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailBodyType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"html"</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件附件文件路径</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailFilePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 收件人地址</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Recipients &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 收件人名字</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RecipientsName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 抄送</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Cc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 密送</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Bcc &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发件人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Sender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发件人地址</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SenderAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MailType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 收件/发件时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件标识</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否已读，是否回复，是否删除</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> Flag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否已读</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsRead &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否已经回复</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsAnswered &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件唯一标识</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MessageId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件唯一查询标识</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">uint</span>? UniqueId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 引用邮件唯一标识</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> References &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件所属邮箱服务器的文件夹标识</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> inbox(收件箱),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> archive(档案箱),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> drafts(草稿箱),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> flagged(标记的),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> junk(垃圾箱),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> sent(发件箱),</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> trash(回收箱)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FolderType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 文件夹名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 一般用于区别Inbox文件夹下用户自定义的文件夹</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FolderName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 附件个数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? AttaCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">NotMapped</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;MailBoxEntity&gt; MailBoxList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="邮箱发送服务器配置"><a href="#邮箱发送服务器配置" class="headerlink" title="邮箱发送服务器配置"></a>邮箱发送服务器配置</h4><p>此表用于保存邮箱的账号信息及不同邮箱服务器的SMTP端口等信息</p>
<p>当然，这些信息可以拆分成两个表存储。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MailConfigEntity</span> : <span class="title">BaseEntity</span> &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮箱显示名</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> DisplayName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发件SMTP服务器地址</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SmtpHost &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 收件Imtp服务器地址</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ImapHost &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">""</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发件SMTP服务器端口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? SmtpPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 收件Imtp服务器端口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? ImapPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否启用SSL</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsSsl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮件编码</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MailEncoding &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮箱账号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Account &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮箱密码/授权码</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 平台ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> PlatId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新到的日期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> UpdateTo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 总发件数量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> SentCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">0</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 员工自定义的文件夹列表</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">NotMapped</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;MailFolderEntity&gt; MailFolders &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="邮件发送结果信息"><a href="#邮件发送结果信息" class="headerlink" title="邮件发送结果信息"></a>邮件发送结果信息</h4><p>用于保存每一封邮件的发送状态，后续也可以关联其它业务表，与自动发送邮件任务配合，记录更多相关信息</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SendResultEntity</span> : <span class="title">BaseEntity</span> &#123;</span><br><span class="line">    <span class="comment">// [MaxLength (50)]</span></span><br><span class="line">    <span class="comment">// public string OrderId &#123; get; set; &#125;</span></span><br><span class="line">    <span class="comment">// [MaxLength (50)]</span></span><br><span class="line">    <span class="comment">// public string ReviewId &#123; get; set; &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MailId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 结果信息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ResultInformation &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"发送成功！"</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 结果状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> ResultStatus &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="邮件操作服务"><a href="#邮件操作服务" class="headerlink" title="邮件操作服务"></a>邮件操作服务</h3><h4 id="配置基础信息"><a href="#配置基础信息" class="headerlink" title="配置基础信息"></a>配置基础信息</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 账户认证</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Authenticate</span> (<span class="params">MailConfigEntity mailConfigEntity, SmtpClient client, SendResultEntity sendResultEntity</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.Authenticate (mailConfigEntity.Account, mailConfigEntity.Password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"无效的用户名或密码:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试验证错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试验证时的协议错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"账户认证错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取SMTP基础信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MailServerInformationEntity <span class="title">SmtpClientBaseMessage</span> (<span class="params">SmtpClient client</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mailServerInformation = <span class="keyword">new</span> MailServerInformationEntity &#123;</span><br><span class="line">        Authentication = client.Capabilities.HasFlag (SmtpCapabilities.Authentication),</span><br><span class="line">        BinaryMime = client.Capabilities.HasFlag (SmtpCapabilities.BinaryMime),</span><br><span class="line">        Dsn = client.Capabilities.HasFlag (SmtpCapabilities.Dsn),</span><br><span class="line">        EightBitMime = client.Capabilities.HasFlag (SmtpCapabilities.EightBitMime),</span><br><span class="line">        Size = client.MaxSize</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> mailServerInformation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 连接服务器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Connection</span> (<span class="params">MailConfigEntity sendServerConfiguration, SmtpClient client, SendResultEntity sendResultEntity</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.Connect (sendServerConfiguration.SmtpHost, sendServerConfiguration.SmtpPort.Value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试连接时出错:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"尝试连接时的协议错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"服务器连接错误:<span class="subst">&#123;<span class="number">0</span>&#125;</span>"</span> + ex.Message;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 设置发件人信息</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> SmtpClient <span class="title">SmtpClientInit</span> (<span class="params"><span class="keyword">int</span> accountId</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">var</span> m = _mailConfigService.GetAsNoTracking ();</span><br><span class="line">     MailConfigEntity mailConfig = m.FirstOrDefault (a =&gt; a.FID == accountId);</span><br><span class="line">     SmtpClient client = <span class="keyword">new</span> SmtpClient () &#123;</span><br><span class="line">         ServerCertificateValidationCallback = (s, c, h, e) =&gt; <span class="literal">true</span></span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> sendResultEntity = <span class="keyword">new</span> SendResultEntity ();</span><br><span class="line">     Connection (mailConfig, client, sendResultEntity);</span><br><span class="line">     <span class="keyword">if</span> (sendResultEntity.ResultStatus == <span class="literal">false</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     SmtpClientBaseMessage (client);</span><br><span class="line">     Authenticate (mailConfig, client, sendResultEntity);</span><br><span class="line">     <span class="keyword">return</span> sendResultEntity.ResultStatus == <span class="literal">false</span> ? <span class="literal">null</span> : client;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 设置收件人信息</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ImapClient <span class="title">ImapClientInit</span> (<span class="params"><span class="keyword">int</span> AccountId</span>)</span> &#123;</span><br><span class="line">    MailConfigEntity mailConfig = _mailConfigService.GetAsNoTracking ().FirstOrDefault (a =&gt; a.FID == AccountId);</span><br><span class="line">    ImapClient client = <span class="keyword">new</span> ImapClient ();</span><br><span class="line">    client.Connect (mailConfig.ImapHost, mailConfig.ImapPort.Value,</span><br><span class="line">        SecureSocketOptions.SslOnConnect);</span><br><span class="line">    client.Authenticate (mailConfig.Account, mailConfig.Password);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 网易邮箱需要此语句，用于验证客户端身份</span></span><br><span class="line">    <span class="keyword">if</span> (mailConfig.ImapHost == <span class="string">"imap.126.com"</span> || mailConfig.ImapHost == <span class="string">"imap.163.com"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clientImplementation = <span class="keyword">new</span> ImapImplementation &#123;</span><br><span class="line">        Name = <span class="string">"MeSince"</span>,</span><br><span class="line">        Version = <span class="string">"2.0"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        client.Identify (clientImplementation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><p><em>Mailkit使用时会遇到“附件文件名不能为中文”和“附件文件名长度不能超过41字符”的Bug，这里我顺便参照网上的解决了</em></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 组装邮件文本/附件邮件信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MimeMessage <span class="title">AssemblyMailMessage</span> (<span class="params">MailBoxEntity mailBoxEntity</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException (<span class="keyword">nameof</span> (mailBoxEntity));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">new</span> MimeMessage ();</span><br><span class="line">    <span class="comment">//设置邮件基本信息</span></span><br><span class="line">    SetMailBaseMessage (message, mailBoxEntity);</span><br><span class="line">    <span class="keyword">var</span> multipart = <span class="keyword">new</span> Multipart (<span class="string">"mixed"</span>);</span><br><span class="line">    <span class="comment">//插入文本消息</span></span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity.MailHtmlBody.IsNotNullAndWhiteSpace ()) &#123;</span><br><span class="line">        multipart.Add (<span class="keyword">new</span> MultipartAlternative &#123;</span><br><span class="line">            AssemblyMailTextMessage (mailBoxEntity.MailHtmlBody, mailBoxEntity.MailBodyType)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入附件信息</span></span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity.MailFilePath.IsNotNullAndWhiteSpace ()) &#123;</span><br><span class="line">        List&lt;FileStream&gt; list = <span class="keyword">new</span> List&lt;FileStream&gt; ();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> path <span class="keyword">in</span> mailBoxEntity.MailFilePath.Split (<span class="string">'|'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists (path))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException (<span class="string">"文件未找到"</span>, path);</span><br><span class="line">            <span class="keyword">string</span>[] contentTypeArr = MimeTypes.GetMimeType (path).Split (<span class="string">'/'</span>);</span><br><span class="line">            FileStream file = File.Open (path, FileMode.Open);</span><br><span class="line">            list.Add (file);</span><br><span class="line">            ContentType contentType = <span class="keyword">new</span> ContentType (contentTypeArr[<span class="number">0</span>], contentTypeArr[<span class="number">1</span>]);</span><br><span class="line">            MimePart mimePart = <span class="keyword">new</span> MimePart (contentType) &#123;</span><br><span class="line">                Content = <span class="keyword">new</span> MimeContent (file),</span><br><span class="line">                ContentDisposition = <span class="keyword">new</span> ContentDisposition (ContentDisposition.Attachment),</span><br><span class="line">                ContentTransferEncoding = ContentEncoding.Base64,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//解决文件名不能为中文</span></span><br><span class="line">            mimePart.ContentType.Parameters.Add (<span class="string">"GB18030"</span>, <span class="string">"name"</span>, Path.GetFileName (path));</span><br><span class="line">            mimePart.ContentDisposition.Parameters.Add (<span class="string">"GB18030"</span>, <span class="string">"filename"</span>, Path.GetFileName (path));</span><br><span class="line">            <span class="comment">//解决文件名长度限制</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> param <span class="keyword">in</span> mimePart.ContentDisposition.Parameters)</span><br><span class="line">                param.EncodingMethod = ParameterEncodingMethod.Rfc2047;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> param <span class="keyword">in</span> mimePart.ContentType.Parameters)</span><br><span class="line">                param.EncodingMethod = ParameterEncodingMethod.Rfc2047;</span><br><span class="line">            multipart.Add (mimePart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//组合邮件内容</span></span><br><span class="line">    message.Body = multipart;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置邮件基础信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MimeMessage <span class="title">SetMailBaseMessage</span> (<span class="params">MimeMessage minMessag, MailBoxEntity mailBoxEntity</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minMessag == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</span><br><span class="line">    <span class="comment">//插入发件人</span></span><br><span class="line">    minMessag.From.Add (<span class="keyword">new</span> MailboxAddress (mailBoxEntity.Sender, mailBoxEntity.SenderAddress));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入收件人</span></span><br><span class="line">    <span class="keyword">string</span>[] _recipients = mailBoxEntity.Recipients.Split (<span class="string">"|"</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> recipients <span class="keyword">in</span> _recipients) &#123;</span><br><span class="line">        minMessag.To.Add (<span class="keyword">new</span> MailboxAddress (recipients.Trim ()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity.Cc.IsNotNullAndWhiteSpace ()) &#123;</span><br><span class="line">        <span class="comment">//插入抄送人</span></span><br><span class="line">        <span class="keyword">string</span>[] _cc = mailBoxEntity.Cc.Split (<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> cc <span class="keyword">in</span> _cc)</span><br><span class="line">            minMessag.Cc.Add (<span class="keyword">new</span> MailboxAddress (cc));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mailBoxEntity.Bcc.IsNotNullAndWhiteSpace ()) &#123;</span><br><span class="line">        <span class="comment">//插入密送人</span></span><br><span class="line">        <span class="keyword">string</span>[] _bcc = mailBoxEntity.Bcc.Split (<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> bcc <span class="keyword">in</span> _bcc)</span><br><span class="line">            minMessag.Bcc.Add (<span class="keyword">new</span> MailboxAddress (bcc));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入主题</span></span><br><span class="line">    minMessag.Subject = mailBoxEntity.Subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minMessag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 组装邮件文本信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TextPart <span class="title">AssemblyMailTextMessage</span> (<span class="params"><span class="keyword">string</span> mailBody, <span class="keyword">string</span> textPartType</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (mailBody))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (textPartType))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException ();</span><br><span class="line">    <span class="keyword">var</span> textBody = <span class="keyword">new</span> TextPart (textPartType) &#123;</span><br><span class="line">        Text = mailBody</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> textBody;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 发送邮件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Send</span> (<span class="params">MailBoxEntity mailBoxEntity, SmtpClient client, SendResultEntity sendResultEntity, <span class="keyword">string</span> replyto, <span class="keyword">int</span> accid</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MimeMessage mimeMessage = _mailMessageService.AssemblyMailMessage (mailBoxEntity);</span><br><span class="line">        <span class="keyword">if</span> (replyto.IsNotNullAndWhiteSpace ()) &#123;</span><br><span class="line">            <span class="keyword">uint</span>.TryParse (replyto.Trim (<span class="string">'|'</span>), <span class="keyword">out</span> <span class="keyword">uint</span> mailuint);</span><br><span class="line">            SetReplyTo (mailuint, mimeMessage, accid); <span class="comment">//设置回复</span></span><br><span class="line">        &#125;</span><br><span class="line">        client.Send (mimeMessage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeMessage.References != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> mimeMessage.References)</span><br><span class="line">                mailBoxEntity.References = mailBoxEntity.References + <span class="string">"|"</span> + item;</span><br><span class="line">        &#125;</span><br><span class="line">        mailBoxEntity.References = mailBoxEntity.References?.Trim (<span class="string">'|'</span>);</span><br><span class="line">        mailBoxEntity.MessageId = mimeMessage.MessageId;</span><br><span class="line"></span><br><span class="line">        sendResultEntity.MailId = mailBoxEntity.MailType == (<span class="keyword">int</span>) MailType.Auto </span><br><span class="line">        ? _mailBoxService.Add (mailBoxEntity, <span class="literal">true</span>, <span class="literal">true</span>) : _mailBoxService.Add (mailBoxEntity, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpCommandException ex) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ex.ErrorCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> SmtpErrorCode.RecipientNotAccepted:</span><br><span class="line">                sendResultEntity.ResultInformation = <span class="string">$"收件人未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SmtpErrorCode.SenderNotAccepted:</span><br><span class="line">                sendResultEntity.ResultInformation = <span class="string">$"发件人未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SmtpErrorCode.MessageNotAccepted:</span><br><span class="line">                sendResultEntity.ResultInformation = <span class="string">$"消息未被接受:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SmtpProtocolException ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"发送消息时的协议错误:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        sendResultEntity.ResultInformation = <span class="string">$"邮件发送失败:<span class="subst">&#123;ex.Message&#125;</span>"</span>;</span><br><span class="line">        sendResultEntity.ResultStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收取邮件"><a href="#收取邮件" class="headerlink" title="收取邮件"></a>收取邮件</h4><p>这部分比较繁琐，先贴代码，然后再解释</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 接收所有文件夹的邮件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">GetFolders</span> (<span class="params"><span class="keyword">string</span> Account</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">        MailConfigEntity mailConfig = _mailConfigService.Get ().FirstOrDefault (a =&gt; a.Account == Account);</span><br><span class="line"></span><br><span class="line">        List&lt;DateTime&gt; dateTimes = <span class="keyword">new</span> List&lt;DateTime&gt; &#123;</span><br><span class="line">            Convert.ToDateTime (mailConfig.UpdateTo)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 用户所拥有的文件夹</span></span><br><span class="line">        <span class="keyword">var</span> mailFolderUserEntitys = _mailFolderUserService.GetAsNoTracking ().</span><br><span class="line">        Where (a =&gt; a.AccountUserID == _applicationContext.CurrentUser.FID &amp;&amp; a.DataStatus == (<span class="keyword">int</span>) DataStatus.Active)</span><br><span class="line">            .Select (a =&gt; a.MailFolderId).ToArray ();</span><br><span class="line">        <span class="comment">// 文件夹详细信息</span></span><br><span class="line">        <span class="keyword">var</span> mailFolders = _mailFolderService.GetAsNoTracking ().Where (a =&gt; a.MailAccountId == mailConfig.FID &amp;&amp;</span><br><span class="line">            a.DataStatus == (<span class="keyword">int</span>) DataStatus.Active &amp;&amp; a.FolderType == <span class="number">1</span> &amp;&amp; mailFolderUserEntitys.Contains (a.FID));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mailFoldersArr = mailFolders.Where (a =&gt; mailFolders.Any (r =&gt; r.ParentFolderId == a.FID) == <span class="literal">false</span>).Select (a =&gt; a.FID).ToArray ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件夹规则表</span></span><br><span class="line">        <span class="keyword">var</span> mailFolderRuleEntities = _mailFolderRuleService.GetAsNoTracking ().Where (a =&gt; mailFoldersArr.Contains (a.FolderId) &amp;&amp;</span><br><span class="line">            a.DataStatus == (<span class="keyword">int</span>) DataStatus.Active &amp;&amp; a.RuleContent.IsNotNullAndWhiteSpace ()).ToList ();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = ImapClientInit (mailConfig.FID)) &#123;</span><br><span class="line">            List&lt;IMailFolder&gt; mailFolderList = client.GetFolders (client.PersonalNamespaces[<span class="number">0</span>]).ToList ();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> mailFolderList) &#123;</span><br><span class="line">                item.Open (FolderAccess.ReadOnly);</span><br><span class="line">                <span class="comment">//todo 因未知原因,拉取Junk文件夹邮件拉取时会报错，先跳过</span></span><br><span class="line">                <span class="keyword">if</span> (item.Count &lt; <span class="number">1</span> || item.Name.ToLower () == <span class="string">"junk"</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">var</span> m = FillEntity (<span class="literal">null</span>, <span class="literal">null</span>, item, client, <span class="literal">true</span>, mailConfig.FID);</span><br><span class="line">                <span class="keyword">if</span> (m.MailBoxList.Count &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (item.Name.ToLower () == <span class="string">"inbox"</span>) &#123;</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">// 邮件归档</span></span><br><span class="line">                    <span class="keyword">if</span> (mailFolderRuleEntities.Any ())</span><br><span class="line">                        MailArchive (m.MailBoxList, mailFolderRuleEntities);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取出邮件后对比 获得当前文件夹最后一封邮件的时间</span></span><br><span class="line">                <span class="keyword">string</span> maxdate = m.MailBoxList.Max (a =&gt; a.Date);</span><br><span class="line">                DateTime.TryParse (mailConfig.UpdateTo, <span class="keyword">out</span> <span class="keyword">var</span> updateTo);</span><br><span class="line">                DateTime.TryParse (maxdate, <span class="keyword">out</span> <span class="keyword">var</span> date);</span><br><span class="line">                <span class="keyword">if</span> (date &gt; updateTo) dateTimes.Add (Convert.ToDateTime (maxdate));</span><br><span class="line">                <span class="comment">//保存所有邮件 </span></span><br><span class="line">                _mailBoxService.AddRange (m.MailBoxList);</span><br><span class="line">            &#125;</span><br><span class="line">            client.Disconnect (<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 最后更新时间取所有文件夹最大时间 避免覆盖或取值错误</span></span><br><span class="line">            mailConfig.UpdateTo = dateTimes.Max ().ToString (<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">            <span class="comment">//todo 此处排除字段修改无效</span></span><br><span class="line">            _mailConfigService.Update (mailConfig, <span class="literal">false</span>, <span class="string">"SentCount"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 填充实体   </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回新邮件数量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MailBoxEntity <span class="title">FillEntity</span> (<span class="params">IMessageSummary emhead = <span class="literal">null</span>, MimeMessage embody = <span class="literal">null</span>, IMailFolder folder = <span class="literal">null</span>, ImapClient client = <span class="literal">null</span>, <span class="keyword">bool</span> Loop = <span class="literal">false</span>, <span class="keyword">int</span> AccountId = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">         MailBoxEntity mailbox = <span class="keyword">new</span> MailBoxEntity ();</span><br><span class="line">         <span class="keyword">if</span> (emhead != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (emhead.Envelope.From.Count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 mailbox.Sender = emhead.Envelope.From.Mailboxes.ElementAt (<span class="number">0</span>).Name;</span><br><span class="line">                 mailbox.SenderAddress = emhead.Envelope.From.Mailboxes.ElementAt (<span class="number">0</span>).Address;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//记录邮件唯一标识 后续获取邮件全文后可直接修改</span></span><br><span class="line">             mailbox.MessageId = emhead.Envelope.MessageId;</span><br><span class="line">             <span class="comment">//记录邮件唯一查询标识 后续根据此字段及文件夹联合查询邮件全文</span></span><br><span class="line">             mailbox.UniqueId = emhead.UniqueId.Id;</span><br><span class="line">             <span class="comment">//直接取本地时间 忽略时间差</span></span><br><span class="line">             mailbox.Date = emhead.Date.LocalDateTime.ToString (<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">             <span class="comment">//邮件时间=本地时间+时区差</span></span><br><span class="line">             <span class="comment">//mailbox.Date = emhead.Date.LocalDateTime.</span></span><br><span class="line">             <span class="comment">//    AddHours(emhead.Date.Offset.TotalHours).ToString("yyyy-MM-dd HH:mm:ss");               </span></span><br><span class="line">             mailbox.Subject = emhead.Envelope.Subject;</span><br><span class="line">             <span class="comment">// 有文件夹的则记录邮件头所属文件夹</span></span><br><span class="line">             <span class="keyword">if</span> (folder != <span class="literal">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (folder.Attributes.ToString ().Contains (<span class="string">"Inbox"</span>))</span><br><span class="line">                     mailbox.FolderType = <span class="string">"Inbox"</span>;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (folder.Attributes.ToString ().Contains (<span class="string">"Sent"</span>))</span><br><span class="line">                     mailbox.FolderType = <span class="string">"Sent"</span>;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (folder.Attributes.ToString ().Contains (<span class="string">"Trash"</span>))</span><br><span class="line">                     mailbox.FolderType = <span class="string">"Trash"</span>;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (folder.Attributes.ToString ().Contains (<span class="string">"Drafts"</span>))</span><br><span class="line">                     mailbox.FolderType = <span class="string">"Drafts"</span>;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                     mailbox.FolderType = <span class="string">"Inbox"</span>;</span><br><span class="line">                 mailbox.FolderName = folder.FullName;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 循环记录收件人</span></span><br><span class="line">             <span class="keyword">foreach</span> (<span class="keyword">var</span> _Recipients <span class="keyword">in</span> emhead.Envelope.To.Mailboxes)</span><br><span class="line">                 mailbox.Recipients = mailbox.Recipients + <span class="string">"|"</span> + _Recipients.Address.Trim ();</span><br><span class="line">             mailbox.Recipients = mailbox.Recipients?.Trim (<span class="string">'|'</span>);</span><br><span class="line">             <span class="comment">//标记为收到的邮件</span></span><br><span class="line">             mailbox.MailType = (<span class="keyword">int</span>) MailType.In;</span><br><span class="line">             <span class="comment">// 邮件状态,已读未读等等</span></span><br><span class="line">             <span class="keyword">if</span> (emhead.Flags.HasValue &amp;&amp; mailbox.FolderType == <span class="string">"Inbox"</span>) &#123;</span><br><span class="line">                 mailbox.IsRead = emhead.Flags.Value.HasFlag (MessageFlags.Seen);</span><br><span class="line">                 mailbox.IsAnswered = emhead.Flags.Value.HasFlag (MessageFlags.Answered);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// 附件个数</span></span><br><span class="line">             mailbox.AttaCount = emhead.Attachments.Count ();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (embody != <span class="literal">null</span>) &#123;</span><br><span class="line">             mailbox.OwnerMailAccount = AccountId;</span><br><span class="line">             <span class="comment">// 正文</span></span><br><span class="line">             mailbox.MailTextBody = embody.TextBody;</span><br><span class="line">             mailbox.MailHtmlBody = embody.HtmlBody;</span><br><span class="line">             <span class="keyword">foreach</span> (<span class="keyword">var</span> _Cc <span class="keyword">in</span> embody.Cc) <span class="comment">//抄送</span></span><br><span class="line">                 mailbox.Cc = embody.Cc + <span class="string">"|"</span> + ((MailboxAddress) _Cc).Address.Trim ();</span><br><span class="line">             mailbox.Cc = mailbox.Cc?.Trim (<span class="string">'|'</span>);</span><br><span class="line">             <span class="keyword">foreach</span> (<span class="keyword">var</span> _Bcc <span class="keyword">in</span> embody.Bcc) <span class="comment">//密送</span></span><br><span class="line">                 mailbox.Bcc = embody.Bcc + <span class="string">"|"</span> + ((MailboxAddress) _Bcc).Address.Trim ();</span><br><span class="line">             mailbox.Bcc = mailbox.Bcc?.Trim (<span class="string">'|'</span>);</span><br><span class="line">             <span class="keyword">foreach</span> (<span class="keyword">var</span> _References <span class="keyword">in</span> embody.References) <span class="comment">//引用</span></span><br><span class="line">                 mailbox.References = embody.References + <span class="string">"|"</span> + _References;</span><br><span class="line">             mailbox.References = mailbox.References?.Trim (<span class="string">'|'</span>);</span><br><span class="line">             <span class="keyword">if</span> (embody.Attachments.Count () &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="comment">// 收件箱箱附件保存路径</span></span><br><span class="line">                 <span class="keyword">string</span> _guid = !<span class="keyword">string</span>.IsNullOrEmpty (embody.MessageId) ? embody.MessageId : Guid.NewGuid ().ToString ();</span><br><span class="line">                 <span class="keyword">string</span> _rootPath = Directory.GetDirectoryRoot (Directory.GetCurrentDirectory ()) + <span class="string">@"RecMailAttachment\"</span> + <span class="string">$" <span class="subst">&#123; _guid &#125;</span></span></span><br><span class="line"><span class="string">                 "</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(_rootPath))</span><br><span class="line">                Directory.CreateDirectory(_rootPath);</span><br><span class="line">            FileInfo fileInfo;</span><br><span class="line">            <span class="comment">//附件路径集合</span></span><br><span class="line">            List&lt;<span class="keyword">string</span>&gt; _attachPaths = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="comment">// 这里要转成mimepart类型</span></span><br><span class="line">            <span class="keyword">foreach</span> (MimePart attachment <span class="keyword">in</span> embody.Attachments)</span><br><span class="line">            &#123;</span><br><span class="line">                fileInfo = <span class="keyword">new</span> FileInfo(Path.Combine(_rootPath, attachment.FileName));</span><br><span class="line">                _attachPaths.Add(fileInfo.ToString());</span><br><span class="line">                <span class="keyword">if</span> (File.Exists(fileInfo.ToString())) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(fileInfo.ToString(), FileMode.Create))</span><br><span class="line">                &#123;</span><br><span class="line">                    attachment.Content.DecodeTo(fs);</span><br><span class="line">                    fs.Flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mailbox.MailFilePath = _attachPaths.Aggregate((ttl, next) =&gt; <span class="keyword">string</span>.Format(<span class="string">$" <span class="subst">&#123; ttl &#125;</span> | <span class="subst">&#123; next &#125;</span>"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不需要循环或者未指定文件夹的直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (folder == <span class="literal">null</span> || !Loop)</span><br><span class="line">        <span class="keyword">return</span> mailbox;</span><br><span class="line">    <span class="comment">//需要循环的则循环整个文件夹取值</span></span><br><span class="line">    MailConfigEntity mailConfig = _mailConfigService.Get ().FirstOrDefault (a =&gt; a.FID == AccountId);</span><br><span class="line">    <span class="keyword">var</span> mails = _mailBoxService.GetAsNoTracking ().Where (a =&gt; a.OwnerMailAccount == mailConfig.FID &amp;&amp; a.MailType == <span class="number">1</span>).Select (a =&gt; a.UniqueId);</span><br><span class="line">    mailbox.MailBoxList = <span class="keyword">new</span> List&lt;MailBoxEntity&gt; ();</span><br><span class="line">    IList&lt;UniqueId&gt; uids;</span><br><span class="line">    <span class="comment">//如果之前更新过 则仅同步上次同步之后的邮件</span></span><br><span class="line">    DateTime Updateto = DateTime.MinValue;</span><br><span class="line">    <span class="keyword">if</span> (mailConfig.UpdateTo.IsNotNullAndWhiteSpace ())</span><br><span class="line">    &#123;</span><br><span class="line">        DateTime.TryParse (mailConfig.UpdateTo, <span class="keyword">out</span> Updateto);</span><br><span class="line">        uids = client.GetFolder (folder.FullName).Search (SearchQuery.DeliveredAfter (Updateto));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//若是第一次更新 则取出所有邮件</span></span><br><span class="line">        uids = client.GetFolder (folder.FullName).Search (SearchQuery.All);</span><br><span class="line">    <span class="keyword">if</span> (uids.Count &lt; <span class="number">1</span>) <span class="keyword">return</span> mailbox;</span><br><span class="line">    <span class="keyword">int</span> pagecount;</span><br><span class="line">    <span class="keyword">int</span> sum = uids.Count &gt; <span class="number">1000</span> ? <span class="number">1000</span> : uids.Count;</span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">100</span>; <span class="comment">// 每页记录数</span></span><br><span class="line">    <span class="keyword">if</span> (sum % pageSize == <span class="number">0</span>)</span><br><span class="line">        pagecount =sum / pageSize;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pagecount = sum / pageSize + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pagecount; i++)<span class="comment">//分页取最后一千封邮件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cpage = uids.SkipLast ((i - <span class="number">1</span>) * pageSize).TakeLast (pageSize).ToList ();</span><br><span class="line">        <span class="keyword">var</span> items = folder.Fetch (cpage, MessageSummaryItems.UniqueId | MessageSummaryItems.All);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> items)</span><br><span class="line">        &#123;</span><br><span class="line">            DateTime.TryParse (item.Date.LocalDateTime.ToString (), <span class="keyword">out</span> DateTime date);</span><br><span class="line">            <span class="keyword">if</span> (date &lt; Updateto || mails.Any (a =&gt; a == item.UniqueId.Id))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//取出正文</span></span><br><span class="line">            MimeMessage ebody = folder.GetMessage (item.UniqueId);</span><br><span class="line">            <span class="keyword">var</span> mbox = FillEntity (item, ebody, folder, <span class="literal">null</span>, <span class="literal">false</span>, AccountId);</span><br><span class="line">            mailbox.MailBoxList.Add (mbox);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mailbox;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本逻辑为初次仅拉取邮件头，用户点击详情后再拉取详情。收件速度可成倍提升</p>
<p>但目前客户需求在列表预览邮件部分内容，所以暂时选择全部拉取，后续可以改为仅拉取加载出邮件头的详情</p>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置单个邮件状态</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MimeMessage <span class="title">SetMailFlag</span> (<span class="params">MessageFlags Flage, <span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    MimeMessage remail;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查找这个邮件,设置状态</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = _receiveEmailService.ImapClientInit (accountId)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (folderName == <span class="literal">null</span>)</span><br><span class="line">                folderName = client.Inbox.Name;</span><br><span class="line">            <span class="keyword">var</span> emailUniqueId = <span class="keyword">new</span> UniqueId (uniqueid);</span><br><span class="line">            <span class="keyword">var</span> folder = client.GetFolder (folderName);</span><br><span class="line">            folder.Open (FolderAccess.ReadWrite);</span><br><span class="line">            remail = folder.GetMessage (emailUniqueId);</span><br><span class="line">            folder.AddFlags (emailUniqueId, Flage, <span class="literal">true</span>);</span><br><span class="line">            folder.Close ();</span><br><span class="line">            client.Disconnect (<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> remail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将邮件保存到草稿箱 返回邮件的唯一标识</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SaveDrafts</span> (<span class="params">MailBoxEntity mailBox, <span class="keyword">int</span> accountId, <span class="keyword">int</span> uniqueId = <span class="number">-1</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MimeMessage mimeMessage = _mailMessageService.AssemblyMailMessage (mailBox);</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> client = _receiveEmailService.ImapClientInit (accountId)) &#123;</span><br><span class="line">            IMailFolder folder = client.GetFolder (SpecialFolder.Drafts);</span><br><span class="line">            folder.Open (FolderAccess.ReadWrite);</span><br><span class="line">            <span class="comment">// 如果保存的是已经有的草稿邮件,则删除它再保存新的草稿.(没找到保存已有草稿的办法)</span></span><br><span class="line">            <span class="keyword">if</span> (uniqueId &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                List&lt;UniqueId&gt; uidls = <span class="keyword">new</span> List&lt;UniqueId&gt; &#123;</span><br><span class="line">                    <span class="keyword">new</span> UniqueId ((<span class="keyword">uint</span>) uniqueId)</span><br><span class="line">                &#125;;</span><br><span class="line">                folder.SetFlags (uidls, MessageFlags.Seen | MessageFlags.Deleted, <span class="literal">true</span>);</span><br><span class="line">                folder.Expunge (uidls);</span><br><span class="line">            &#125;</span><br><span class="line">            UniqueId? uid = folder.Append (mimeMessage, MessageFlags.Seen | MessageFlags.Draft);</span><br><span class="line">            folder.Close ();</span><br><span class="line">            client.Disconnect (<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> uid.HasValue ? (<span class="keyword">int</span>) uid.Value.Id : <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置邮件已读</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SetSeen</span> (<span class="params"><span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">bool</span> r = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SetMailFlag (MessageFlags.Seen, uniqueid, accountId, folderName);</span><br><span class="line">        <span class="comment">// 将本地邮件状态设置为已读</span></span><br><span class="line">        <span class="keyword">var</span> mailBox = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid &amp;&amp; a.OwnerMailAccount == accountId).ToArray ();</span><br><span class="line">        mailBox.Each (a =&gt; a.IsRead = <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (_mailBoxService.UpdateRange (mailBox) &gt; <span class="number">0</span>) r = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置此邮件是对指定邮件的回复</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetReplyTo</span> (<span class="params"><span class="keyword">uint</span> uniqueid, MimeMessage message, <span class="keyword">int</span> AccountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MimeMessage remail = SetMailFlag (MessageFlags.Answered, uniqueid, AccountId, folderName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (remail.MessageId))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 设置此邮件是对这个MESSAGEID的邮件的回复</span></span><br><span class="line">        message.InReplyTo = remail.MessageId;</span><br><span class="line">        <span class="comment">// 此邮件的"对其它消息"的引用属性设为这个邮件的引用属性</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> id <span class="keyword">in</span> remail.References)</span><br><span class="line">            message.References.Add (id);</span><br><span class="line">        message.References.Add (remail.MessageId);</span><br><span class="line">        MailBoxEntity mail = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid).FirstOrDefault ();</span><br><span class="line">        mail.IsAnswered = <span class="literal">true</span>;</span><br><span class="line">        _mailBoxService.Update (mail, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置邮件已删除</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SetDelted</span> (<span class="params"><span class="keyword">uint</span> uniqueid, <span class="keyword">int</span> accountId, <span class="keyword">string</span> folderName = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">bool</span> r = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SetMailFlag (MessageFlags.Deleted, uniqueid, accountId, folderName);</span><br><span class="line">        <span class="comment">// 将本地邮件状态设置为已删除</span></span><br><span class="line">        MailBoxEntity mailBox = _mailBoxService.Get (a =&gt; a.UniqueId == uniqueid &amp;&amp; a.OwnerMailAccount == accountId).FirstOrDefault ();</span><br><span class="line">        mailBox.DataStatus = (<span class="keyword">int</span>) DataStatus.Deleted;</span><br><span class="line">        <span class="keyword">if</span> (_mailBoxService.Update (mailBox) &gt; <span class="number">0</span>) r = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组件使用感悟"><a href="#组件使用感悟" class="headerlink" title="组件使用感悟"></a>组件使用感悟</h2><p>MailKit和MimeKit组件在项目的使用中较为的便捷，基本包含了所有的基础邮件服务操作。组件提供的SmtpClient类提供的功能很丰富，例如连接邮件服务器，邮件账户认证，组装邮件消息，获取邮件服务器配置信息等等方法的提供，可以让我们在项目中快速的获取邮件服务的所有信息。</p>
<p>使用过邮件功能的项目 都会有困扰，客户端与邮件服务器的连接是否成功，以及邮件是否发送成功状态没有办法很快的获取，只能根据邮件服务器返回的一场状态进行判断。但是MailKit提供对应的方法和异常类，对邮件服务器返回的异常信息进行解析，客户端可以根据这些异常类获取邮件状态。</p>
<p>MailKit组件的提供了ProtocolLogger类，该类用于记录SMTP操作基础信息，该类作用为记录邮件服务日志。在邮件发送完毕后，需要及时的关闭连接，调用Disconnect(true)方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;邮件服务是一般的系统都会拥有和需要的功能，但是对于.Net项目来说，邮件服务的创建和使用会较为的麻烦。.NET对于邮件功能提供了System.Net.Mail用于创建邮件服务，该基础服务提供邮件的基础操作，并且使用也较为的简单。对于真正将该功能使用于项目的人，就会慢慢发现其中的优缺点，甚至有些时候不能忍受其中的问题。在这里介绍一种微软用于替代System.Net.Mail的邮件服务组件MailKit和MimeKit，官网地址：&lt;a href=&quot;http://www.mimekit.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mimekit.net/&lt;/a&gt; GitHub地址：&lt;a href=&quot;https://github.com/jstedfast/MimeKit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jstedfast/MimeKit&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="Email" scheme="VickChen.win/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework Core 之数据库迁移</title>
    <link href="VickChen.win/2018/201811041748/"/>
    <id>VickChen.win/2018/201811041748/</id>
    <published>2018-11-04T09:48:01.000Z</published>
    <updated>2019-07-20T08:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中用到了Entity Framework Core，发现网上很多文章讲的都是之前版本的用法，对于刚接触EF core的朋友来说可能有点懵。特意整理了几个细节</p>
<a id="more"></a>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>首先EF CORE跟以前的EF6是有不同点的，<br>微软官网列出的不同点：[<a href="https://docs.microsoft.com/en-us/ef/efcore-and-ef6/index" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/ef/efcore-and-ef6/index</a>]</p>
<h3 id="安装-EF-核心-NuGet-包"><a href="#安装-EF-核心-NuGet-包" class="headerlink" title="安装 EF 核心 NuGet 包"></a>安装 EF 核心 NuGet 包</h3><p>若要使用 EF 核心，请为你想要使用的数据库提供程序安装 NuGet 包。 例如，如果目标 SQL Server，你将安装<code>Microsoft.EntityFrameworkCore.SqlServer</code>。</p>
<p>如果你打算使用迁移，则还应安装<code>Microsoft.EntityFrameworkCore.Tools</code>包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">Install-Package Microsoft.EntityFrameworkCore.Tools</span><br></pre></td></tr></table></figure>
<p>首先新建一个 Model 类 SysUser:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6nzsgi5j20l60gnq3i.jpg" alt></p>
<p> 然后建立EFCoreContext类:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6nyoge5j20oq0cddga.jpg" alt></p>
<p>自动创建数据库:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6nzlzg4j20l30cijrv.jpg" alt></p>
<p>此时我们的数据库和数据都已经有了:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6nzlsmhj20e407wglu.jpg" alt></p>
<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>此时重点来了，当我们已经有数据库表的时候，我们需要修改字段，如何进行迁移?</p>
<p>首先打开VS-&gt;工具-&gt;NuGet包管理器-&gt;程序包管理控制台</p>
<p>输入命令：<code>Add-Migration init</code>（执行此命令项目生成一个目录<migration>）</migration></p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6o0e4lgj20sq08vmxu.jpg" alt></p>
<p>我们会发现Model程序集下多了一个文件夹为Migrations里面有3个文件.如下:</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6ny8zauj208e021743.jpg" alt></p>
<p>xxxxxxx_init.cs主迁移文件。包含应用迁移（in Up()）和恢复（in Down()）所需的操作。</p>
<p>xxxxxxx_init.Designer.cs - 迁移元数据文件。包含EF使用的信息。</p>
<p>EFCoreContextModelSnapshot.cs - 当前模型的快照。主要用于确定添加下一次迁移时发生了哪些变化.</p>
<p>然后我们执行命令: <code>Update-Database</code></p>
<p>如果你的数据库没创建,是第一次,就会执行成功。如果你前期创建过数据库.但是是第一次创建迁移，就会提示我们的表结构已经存在了。</p>
<p>我们看看xxxxxx_init.cs文件：</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6o0qqmmj20wj0g7wfc.jpg" alt></p>
<p>可以看到，这里第一次生成的迁移方法是按照新增来迁移的..而不是修改。</p>
<p>我们把<code>Up()</code>  <code>Down()</code>里面的代码删掉</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6nyzk0kj20il06t749.jpg" alt></p>
<p>这样就相当于 本次的迁移，没有做任何操作。</p>
<p>然后我们来创建真正的迁移版本：</p>
<p>首先添加一个Email字段,然后把UserName的长度改为60</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6o0ztg0j20kj0fwaak.jpg" alt></p>
<p>然后我们开始迁移：</p>
<p><code>Add-Migration  x2</code> （这里是迁移版本名称，可自定义，可以根据版本回滚）</p>
<p>成功创建迁移文件之后,我们更新数据库.</p>
<p><code>Update-Database x2</code></p>
<p>然后Email字段加上了，UserName长度也修改了，UserName的数据也还在。</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6og0hvoj20if08a74k.jpg" alt></p>
<h3 id="删除迁移"><a href="#删除迁移" class="headerlink" title="删除迁移"></a>删除迁移</h3><p>有的时候我们刚刚创建了一个迁移,还没应用到数据库,就发现自己需要变更实体.那我们就可以删除这个没有应用的迁移版本.</p>
<p>执行命令:<code>Remove-Migration</code></p>
<p><em>注意,这里是没有应用过的迁移,可以删除.如果应用过了.则会收到错误信息</em></p>
<h3 id="迁移回滚"><a href="#迁移回滚" class="headerlink" title="迁移回滚"></a>迁移回滚</h3><p>有些时候,我们需要回滚到之前的一个迁移版本.,比如我们部署的时候,开发版本和稳定版本肯定不一样..</p>
<p>那么我们就会用到回滚命令.</p>
<p>执行如下: </p>
<p><code>Update-Database</code>  这里填写需要回滚的版本名称</p>
<p>我们执行  <code>Update-Database</code>   这里填写需要回滚的版本名称</p>
<p>然后我们会发现, x2中的长度已经回到30了，Email字段也没有了….</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6og11llj20j9093q39.jpg" alt></p>
<h3 id="生成迁移SQL"><a href="#生成迁移SQL" class="headerlink" title="生成迁移SQL"></a>生成迁移SQL</h3><p>有的时候,我们的生产数据库,是需要用脚本来创建库的.所以我们也可以直接通过实体来生成SQL脚本.命令如下:</p>
<p><code>Script-Migration</code></p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1fww6ogsrvrj20yz0mrmz0.jpg" alt></p>
<p>举一反三：<code>Script-Migration x2</code>  这个脚本可以自定义需要迁移的版本号、文件名、需要生成迁移脚本的上下文</p>
<p><em>原文地址：<a href="https://www.cnblogs.com/shumin/p/8877297.html" target="_blank" rel="noopener">https://www.cnblogs.com/shumin/p/8877297.html</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中用到了Entity Framework Core，发现网上很多文章讲的都是之前版本的用法，对于刚接触EF core的朋友来说可能有点懵。特意整理了几个细节&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="Entity Framework" scheme="VickChen.win/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Redis 用户验证</title>
    <link href="VickChen.win/2018/201810202143/"/>
    <id>VickChen.win/2018/201810202143/</id>
    <published>2018-10-20T13:43:31.000Z</published>
    <updated>2019-07-26T03:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<p> redis没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑redis.conf配置来启用认证。</p>
<a id="more"></a>
<h3 id="初始化Redis密码"><a href="#初始化Redis密码" class="headerlink" title="初始化Redis密码"></a>初始化Redis密码</h3><p>在配置文件中有个参数： <code>requirepass</code>  这个就是配置redis访问密码的参数。</p>
<p>比如 <code>requirepass test123</code> <strong>需重启Redis才能生效</strong></p>
<p>redis的查询速度是非常快的，外部用户一秒内可以尝试多达150K个密码。</p>
<p>所以密码要尽量长（对于DBA 没有必要必须记住密码）。</p>
<h3 id="不重启Redis设置密码"><a href="#不重启Redis设置密码" class="headerlink" title="不重启Redis设置密码"></a>不重启Redis设置密码</h3><p>在配置文件中配置<code>requirepass</code>的密码（当redis重启时密码依然有效）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass test123</span><br></pre></td></tr></table></figure></p>
<p>查询密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">(error) ERR operation not permitted</span><br></pre></td></tr></table></figure></p>
<p>密码验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; auth test123</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p>
<p>再次查询：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">"test123"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>如果配置文件中没添加密码，密码会在redis重启后失效</strong></p>
<h3 id="登陆有密码的Redis"><a href="#登陆有密码的Redis" class="headerlink" title="登陆有密码的Redis"></a>登陆有密码的Redis</h3><p>在登录的时候的时候输入密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 -a test123</span><br></pre></td></tr></table></figure></p>
<p>先登陆后验证：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br><span class="line">redis 127.0.0.1:6379&gt; auth test123</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>AUTH命令跟其他redis命令一样，是没有加密的，阻止不了攻击者在网络上窃取你的密码。</p>
<p>认证层的目标是提供多一层的保护，如果防火墙或者用来保护redis的系统防御失败的话，外部用户如果没有通过密码认证还是无法访问redis的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; redis没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑redis.conf配置来启用认证。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Redis" scheme="VickChen.win/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Idea 使用 Git 时一直重复提示输入密码</title>
    <link href="VickChen.win/2018/201810122240/"/>
    <id>VickChen.win/2018/201810122240/</id>
    <published>2018-10-12T14:40:31.000Z</published>
    <updated>2019-07-26T03:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 idea 访问 git 项目时，无论是 pull/push。每次都要输入密码。</p>
<a id="more"></a>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>直接使用 git 命令行执行以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;使用 idea 访问 git 项目时，无论是 pull/push。每次都要输入密码。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="VickChen.win/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="VickChen.win/tags/Git/"/>
    
      <category term="Java" scheme="VickChen.win/tags/Java/"/>
    
      <category term="Idea" scheme="VickChen.win/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>jQuery实现滚动条到底部时加载数据</title>
    <link href="VickChen.win/2018/201810012332/"/>
    <id>VickChen.win/2018/201810012332/</id>
    <published>2018-10-01T15:32:01.000Z</published>
    <updated>2019-07-20T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>滚动条到底部加载数据原理很简单，就是为window或者滚动元素添加一个scroll事件，浏览器每次触发scroll事件时判断是否滚动到了浏览器底部，如果到了底部则加载新数据。关键是计算滚动条是否滚动到了浏览器底部</p>
<a id="more"></a>
<p>滚动条卷起来的高度 + 窗口高度 &gt; 文档的总高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//滚动响应区域高度取50px</span></span><br><span class="line">    <span class="keyword">if</span>(scrollTop() + windowHeight() &gt;= (documentHeight() - <span class="number">50</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        loadMore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadMore</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//todo XXX</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取页面顶部被卷起来的高度函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面顶部被卷起来的高度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(</span><br><span class="line">    <span class="comment">//chrome</span></span><br><span class="line">    <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">    <span class="comment">//firefox/IE</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>chrome浏览器和Firefox/IE对滚动条是属于body还是html理解不同导致处理不同。</em></p>
<p>获取页面文档的总高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面文档的总高度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">documentHeight</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//现代浏览器（IE9+和其他浏览器）和IE8的document.body.scrollHeight和</span></span><br><span class="line">    <span class="comment">//document.documentElement.scrollHeight都可以 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight,<span class="built_in">document</span>.documentElement.scrollHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个算法和jQuery计算文档高度的方法一致。</p>
<p>获取页面浏览器视口的高度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">windowHeight</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)? </span><br><span class="line">     <span class="built_in">document</span>.documentElement.clientHeight: <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这里需要说明的是document.compatMode。很陌生，一般情况貌似没有遇到过。</p>
<p><code>document.compatMode</code>有两个取值”<strong>BackCompat</strong>“和”<strong>CSS1Compat</strong>“。</p>
<p>官方解释是BackCompat：标准兼容模式关闭。CSS1Compat：标准兼容模式开启。  </p>
<p>　　IE对盒模型的渲染在 <code>Standards Mode</code>和<code>Quirks Mode</code>是有很大差别的，在<code>Standards Mode</code>下对于盒模型的解释和其他的标准浏览器是一样，</p>
<p>但在<code>Quirks Mode</code>模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。  </p>
<p>　　举个例子说明两种模式之间的差别有多大。</p>
<p>　　当document.compatMode等于BackCompat时，浏览器客户区宽度是<code>document.body.clientWidth</code></p>
<p>　　当document.compatMode等于CSS1Compat时，浏览器客户区宽度是<code>document.documentElement.clientWidth</code></p>
<p>　　还有其他属性类似。这里不说了，但是我们可以预见两种模式导致IE渲染的基石都更改了，可想而知构建出来的建筑物差别当有多大。</p>
<p>　　所以请为每一个页面声明Doctype不仅仅是一个好习惯，而且是一个必要的处理。Quirks Mode可以进垃圾堆了。</p>
<p>当用户滚动元素中到一个不同的地方时，scroll事件将发送到这个元素。它适用于<strong>window对象</strong>，但也可滚动框架与CSS overflow属性设置为scroll的元素</p>
<h3 id="普通的div滚动到底部加载更多的方法"><a href="#普通的div滚动到底部加载更多的方法" class="headerlink" title="普通的div滚动到底部加载更多的方法"></a>普通的div滚动到底部加载更多的方法</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="test"&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#test'</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> top = $(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">		<span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();</span><br><span class="line">		<span class="keyword">var</span> scrollHeight = $(<span class="keyword">this</span>).get(<span class="number">0</span>).scrollHeight;  </span><br><span class="line">		<span class="keyword">if</span>(scrollHeight &lt;= top+height)&#123;</span><br><span class="line">			loadMore();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
<p>运行发现#test的div怎么样也不能接受scroll时间，最后经过查找资料和测试，发现要给div加上overflow和height的属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test</span>&#123;</span><br><span class="line">		<span class="attribute">overflow</span>:scroll;</span><br><span class="line">		<span class="attribute">height</span>:<span class="number">655px</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="window滚动事件"><a href="#window滚动事件" class="headerlink" title="window滚动事件"></a>window滚动事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop(); <span class="comment">// 滚动条距离顶部的高度</span></span><br><span class="line">     <span class="comment">//scrollHeight,windowHeight,scrollHeight1三个height相同，都是这个页面的高度</span></span><br><span class="line">     <span class="keyword">var</span> scrollHeight = $(<span class="built_in">document</span>).height(); <span class="comment">// 当前页面的总高度</span></span><br><span class="line">     <span class="comment">// 当前可视的页面高度，jquery获取的不是屏幕的高度，而是整个文档的高度</span></span><br><span class="line">     <span class="keyword">var</span> windowHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">     <span class="keyword">var</span> scrollHeight1 = $(<span class="string">"#test"</span>).get(<span class="number">0</span>).scrollHeight;</span><br><span class="line">     <span class="keyword">var</span> windowidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">     <span class="keyword">var</span> documentwidtht = $(<span class="built_in">document</span>).width();</span><br><span class="line">     <span class="keyword">var</span> innerHeight = <span class="built_in">window</span>.innerHeight; <span class="comment">//window的高度，即手机的高度</span></span><br><span class="line">     <span class="keyword">var</span> clientHeight = <span class="built_in">document</span>.body.clientHeight; <span class="comment">//window的高度</span></span><br><span class="line">     <span class="comment">//这个是body的整个高度，chrom测试</span></span><br><span class="line">     <span class="keyword">var</span> clientHeight1 = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">     <span class="comment">// 距离顶部+当前高度 &gt;=文档总高度，即代表滑动到底部</span></span><br><span class="line">     <span class="keyword">if</span>(scrollTop + innerHeight &gt;= scrollHeight)&#123;</span><br><span class="line">         loadMore();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p><em>原文链接：<a href="https://blog.csdn.net/wuyou1336/article/details/56035560" target="_blank" rel="noopener">https://blog.csdn.net/wuyou1336/article/details/56035560</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;滚动条到底部加载数据原理很简单，就是为window或者滚动元素添加一个scroll事件，浏览器每次触发scroll事件时判断是否滚动到了浏览器底部，如果到了底部则加载新数据。关键是计算滚动条是否滚动到了浏览器底部&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jQuery" scheme="VickChen.win/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>发布Core程序时遇到的错误</title>
    <link href="VickChen.win/2018/201809211813/"/>
    <id>VickChen.win/2018/201809211813/</id>
    <published>2018-09-21T10:13:04.000Z</published>
    <updated>2019-07-20T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>此贴主要用于记录Core程序在发布时遇到的错误。</p>
<a id="more"></a>
<ol>
<li><h3 id="“该项目使用-Microsoft-NETCore-App-版本-2-1-0-进行了还原”"><a href="#“该项目使用-Microsoft-NETCore-App-版本-2-1-0-进行了还原”" class="headerlink" title="“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原”"></a>“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原”</h3><blockquote>
<p>“该项目使用 Microsoft.NETCore.App 版本 2.1.0 进行了还原……请确保将相同的设置用于 restore 和后续操作，例如 build 或 publish。 如果在 build 或 publish 期间设置了 RuntimeIdentifier 属性……”</p>
</blockquote>
<p> 解决办法，将发布设置中的部署模式设置为框架依赖，取消发布设置里的RuntimeIdentifier 设置，即中文版设置里的”目标运行时“选项，选回“可移植”即可。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此贴主要用于记录Core程序在发布时遇到的错误。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="DeBug" scheme="VickChen.win/tags/DeBug/"/>
    
  </entry>
  
  <entry>
    <title>Linux下IDEA无法输入中文问题</title>
    <link href="VickChen.win/2018/201809172351/"/>
    <id>VickChen.win/2018/201809172351/</id>
    <published>2018-09-17T15:51:09.000Z</published>
    <updated>2019-07-26T03:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在Debian下使用Idea编写Java，感觉还不错，但偶尔会发生无法使用中文的情况，导致写注释很不方便，奇怪的是在Idea外面没问题。</p>
<a id="more"></a>
<p>解决方法：</p>
<p>在IDEA的bin目录下的idea.sh文件的前面加上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在Debian下使用Idea编写Java，感觉还不错，但偶尔会发生无法使用中文的情况，导致写注释很不方便，奇怪的是在Idea外面没问题。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="VickChen.win/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Linux" scheme="VickChen.win/tags/Linux/"/>
    
      <category term="Idea" scheme="VickChen.win/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core使用 MiniProfiler 进行性能分析</title>
    <link href="VickChen.win/2018/201809010211/"/>
    <id>VickChen.win/2018/201809010211/</id>
    <published>2018-08-31T18:11:52.000Z</published>
    <updated>2019-07-20T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用EF和在很大程度提高了开发速度，不过随之带来的是很多性能低下的写法和生成不太高效的sql。</p>
<p>虽然我们可以使用SQL Server Profiler来监控执行的sql，不过个人觉得实属麻烦，每次需要打开、过滤、清除、关闭。</p>
<p>MiniProfiler此时就派上用场了，这是<a href="http://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a>团队设计的一款对ASP.NET MVC的性能分析的小程序。可以对一个页面本身，及该页面通过直接引用、Ajax、Iframe形式访问的其它页面进行监控,监控内容包括数据库内容，并可以显示数据库访问的SQL（支持EF、EF CodeFirst等 ）。并且以很友好的方式展现在页面上。</p>
<a id="more"></a>
<p>官方文档： <a href="https://miniprofiler.com/dotnet/AspDotNetCore" target="_blank" rel="noopener">https://miniprofiler.com/dotnet/AspDotNetCore</a></p>
<p>1、添加包 <a href="https://www.nuget.org/packages/MiniProfiler.AspNetCore.Mvc/" target="_blank" rel="noopener">MiniProfiler.AspNetCore.Mvc</a>   和    <a href="https://www.nuget.org/packages/MiniProfiler.EntityFrameworkCore" target="_blank" rel="noopener">MiniProfiler.EntityFrameworkCore</a></p>
<p>2、在 Startup.cs 中的 ConfigureServices 下添加，也可以根据官方文档中的说明进行相应的配置</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddMiniProfiler().AddEntityFramework();</span><br></pre></td></tr></table></figure>
<p>3、在 Startup.cs 中的 Configure 下添加</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseMiniProfiler();</span><br></pre></td></tr></table></figure>
<p>4、修改 _ViewImports.cshtml </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">using</span> StackExchange.Profiling</span><br><span class="line">@addTagHelper *, MiniProfiler.AspNetCore.Mvc</span><br></pre></td></tr></table></figure>
<p>5、将MiniProfiler添加到布局文件（Shared/_Layout.cshtml）中</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mini-profiler /&gt;</span><br></pre></td></tr></table></figure>
<p>完成~</p>
<mini-profiler>


</mini-profiler>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们使用EF和在很大程度提高了开发速度，不过随之带来的是很多性能低下的写法和生成不太高效的sql。&lt;/p&gt;
&lt;p&gt;虽然我们可以使用SQL Server Profiler来监控执行的sql，不过个人觉得实属麻烦，每次需要打开、过滤、清除、关闭。&lt;/p&gt;
&lt;p&gt;MiniProfiler此时就派上用场了，这是&lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack Overflow&lt;/a&gt;团队设计的一款对ASP.NET MVC的性能分析的小程序。可以对一个页面本身，及该页面通过直接引用、Ajax、Iframe形式访问的其它页面进行监控,监控内容包括数据库内容，并可以显示数据库访问的SQL（支持EF、EF CodeFirst等 ）。并且以很友好的方式展现在页面上。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>HangFire快速入门</title>
    <link href="VickChen.win/2018/201808272148/"/>
    <id>VickChen.win/2018/201808272148/</id>
    <published>2018-08-27T13:48:07.000Z</published>
    <updated>2019-07-20T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/HangfireIO/Hangfire" target="_blank" rel="noopener">Hangfire</a>作为一款高人气且容易上手的分布式后台执行服务，支持多种数据库。在.net core的环境中，由Core自带的DI管理着生命周期，免去了在NF4.X环境中配置<a href="http://docs.hangfire.io/en/latest/deployment-to-production/making-aspnet-app-always-running.html" target="_blank" rel="noopener">always running</a>的麻烦，真正做到开箱即用。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Hangfie官方支持是MsSql和redis，除此之外，可供选择的还有<a href="https://github.com/frankhommers/Hangfire.PostgreSql" target="_blank" rel="noopener">PostgreSql</a>和<a href="https://github.com/sergeyzwezdin/Hangfire.Mongo" target="_blank" rel="noopener">Mongo</a>。<br>在应用入口项目需要引用<a href="https://www.nuget.org/packages/Hangfire.AspNetCore/" target="_blank" rel="noopener">Hangfire.AspNetCore</a>和特定持久库，比如使用了MsSql数据库的<a href="https://www.nuget.org/packages/Hangfire.SqlServer/" target="_blank" rel="noopener">Hangfire.SqlServer</a>。<br>而在其他项目（比如bll层的项目），只需引用基础的<a href="https://www.nuget.org/packages/Hangfire.Core/" target="_blank" rel="noopener">Hangfire.Core</a>就可以了。</p>
<h2 id="Startup-配置"><a href="#Startup-配置" class="headerlink" title="Startup 配置"></a>Startup 配置</h2><h3 id="注入Hnagfire服务"><a href="#注入Hnagfire服务" class="headerlink" title="注入Hnagfire服务"></a>注入Hnagfire服务</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddHangfire(x =&gt; x.UseSqlServerStorage(<span class="string">"&lt;connection string&gt;"</span>));</span><br></pre></td></tr></table></figure>
<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><p>启动Hangfire服务和对应的web面板如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseHangfireServer();<span class="comment">//启动Hangfire服务</span></span><br><span class="line">app.UseHangfireDashboard();<span class="comment">//启动hangfire仪表盘</span></span><br></pre></td></tr></table></figure>
<p>细心的观众可能会发现，这两个方法都有可选参数，可以提供更多的配置。</p>
<h4 id="配置任务属性"><a href="#配置任务属性" class="headerlink" title="配置任务属性"></a>配置任务属性</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jobOptions = <span class="keyword">new</span> BackgroundJobServerOptions</span><br><span class="line">&#123;</span><br><span class="line">       Queues = <span class="keyword">new</span>[] &#123; <span class="string">"test"</span>,<span class="string">"default"</span> &#125;,<span class="comment">//队列名称，只能为小写</span></span><br><span class="line">       WorkerCount = Environment.ProcessorCount * <span class="number">5</span>, <span class="comment">//并发任务数</span></span><br><span class="line">       ServerName=<span class="string">"hangfire1"</span>,<span class="comment">//服务器名称</span></span><br><span class="line"> &#125;;</span><br><span class="line">app.UseHangfireServer(jobOptions);</span><br></pre></td></tr></table></figure>
<p><code>Queues</code> 要处理的队列列表  </p>
<p>对于有多个服务器同时连接到数据库，Hangfire会认为他们是分布式中的一份子。现实中不同服务器往往存在着差异，这个时候就需要合理配置服务器(应用)的处理队列，举两个例子：  </p>
<p>1.对于服务器性能差异的处理，有100个A任务和50个B任务需要处理，假设A服务器的性能是B服务器的两倍，如果不配置队列，那么会平分任务给两个服务器。如果我们只让B服务器处理B任务，而A服务器同时处理两种任务，这样B就能减少一些压力。</p>
<p>2.对于服务器能力差异的处理，假设A服务器能处理A和B两种任务，B服务器只能处理B任务（没有处理A任务的方法或对象），如果不配置队列，默认会让B也执行A任务，从而产生错误。反面一想，如果A服务器和B服务器都有共同的接口，B服务器不实现接口的方法，发起一个专属于A服务器队列的任务，而A服务器通过注入实现接口的方法，可以达到传递任务的效果。</p>
<p><code>WorkerCount</code> 并发任务数，超出并发数将等待之前的任务完成  </p>
<p>默认的并发任务数是线程（cpu）的5倍，如果IO密集型任务多而CPU密集型的任务少，可以考虑调高并发任务数。</p>
<p>以上是我用到的，当然还有其他配置参数等着你去开发。</p>
<h4 id="配置访问权限"><a href="#配置访问权限" class="headerlink" title="配置访问权限"></a>配置访问权限</h4><p>在实际生产中，我们可能不希望任何人都可以访问面板，或暂停执行某些任务，这时就需要重写面板的权限了。默认情况下，只有本地访问权限才能使用Hangfire仪表板。所以需要重写控制面板，以便远程访问。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> DashboardOptions</span><br><span class="line">&#123;</span><br><span class="line">    Authorization = <span class="keyword">new</span>[] &#123; <span class="keyword">new</span> HangfireAuthorizationFilter() &#125;</span><br><span class="line">&#125;;</span><br><span class="line">app.UseHangfireDashboard(<span class="string">"/hangfire"</span>, options);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HangfireAuthorizationFilter</span> : <span class="title">IDashboardAuthorizationFilter</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//这里需要配置权限规则</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Authorize</span>(<span class="params">DashboardContext context</span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-官方文档"><a href="#使用-官方文档" class="headerlink" title="使用(官方文档)"></a>使用(<a href="http://docs.hangfire.io/en/latest/index.html" target="_blank" rel="noopener">官方文档</a>)</h2><p>任务类型：</p>
<p><code>Fire-and-forget</code> 直接将任务加入到待执行任务队列<br><code>Delayed</code> 在当前时间后的某个时间将任务加入到待执行任务队列<br><code>Recurring</code> 周期性任务，每一个周期就将任务加入到待执行任务队列<br><code>Continuations</code> 顾名思义，继续执行任务</p>
<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = JobStorage.Current.GetConnection())</span><br><span class="line"> &#123;</span><br><span class="line">       <span class="keyword">var</span> storageConnection = connection <span class="keyword">as</span> JobStorageConnection;</span><br><span class="line">       <span class="keyword">if</span> (storageConnection != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//立即启动：Fire-And-forget（发布/订阅）</span></span><br><span class="line">           <span class="keyword">var</span> jobId = BackgroundJob.Enqueue(()=&gt;Console.WriteLine(<span class="string">"Fire-and-forget!"</span>));</span><br><span class="line">           <span class="comment">//延迟：如果想要延迟某些任务的执行，可以是用以下任务</span></span><br><span class="line">           <span class="comment">//在给定延迟时间后，任务会被排入队列，并且和发布/订阅任务一样执行。</span></span><br><span class="line">           <span class="keyword">var</span> jobId =BackgroundJob.Schedule(() =&gt; Console.WriteLine(<span class="string">"Delayed"</span>), TimeSpan.FromDays(<span class="number">1</span>));</span><br><span class="line">           <span class="comment">//循环：按照周期性（小时，天等）来调用方法</span></span><br><span class="line">           <span class="comment">//请使用RecurringJob类。在复杂的场景，您可以使用CRON表达式指定计划时间来处理任务。</span></span><br><span class="line">           <span class="keyword">var</span> jobId =RecurringJob.AddOrUpdate(() =&gt; Console.WriteLine(<span class="string">"Daily Job"</span>), Cron.Daily);</span><br><span class="line">           <span class="comment">//连续：连续性允许您通过将多个后台任务链接在一起来定义复杂的工作流。</span></span><br><span class="line">           <span class="keyword">var</span> id = BackgroundJob.Enqueue(() =&gt; Console.WriteLine(<span class="string">"Hello, "</span>));</span><br><span class="line">           BackgroundJob.ContinueWith(id, () =&gt; Console.WriteLine(<span class="string">"world!"</span>));</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>当然，不仅仅只有静态方法可以执行，Hangfire的任务也是支持.net core的依赖注入的，会构造一个对象并执行对应的方法。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即执行</span></span><br><span class="line">jobId = BackgroundJob.Enqueue&lt;SomeClass&gt;(a =&gt; a.SomeMethod(someParams))</span><br><span class="line"><span class="comment">//延迟任务</span></span><br><span class="line">jobId = BackgroundJob.Schedule&lt;SomeClass&gt;(a =&gt; a.RunTask(someParams), RunDateTime);</span><br><span class="line"><span class="comment">//以此类推...</span></span><br></pre></td></tr></table></figure>
<h3 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h3><h4 id="任务的新增删除："><a href="#任务的新增删除：" class="headerlink" title="任务的新增删除："></a>任务的新增删除：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作定时任务</span></span><br><span class="line">RecurringJob.RemoveIfExists(JobId);</span><br><span class="line">RecurringJob.AddOrUpdate(JobId, () =&gt; Method(param), Cron.Daily(hour, min));</span><br><span class="line"><span class="comment">//删除延迟任务</span></span><br><span class="line">BackgroundJob.Delete(JobId);<span class="comment">//删除原有任务</span></span><br></pre></td></tr></table></figure>
<h4 id="使用日志过滤器-点我查看"><a href="#使用日志过滤器-点我查看" class="headerlink" title="使用日志过滤器(点我查看)"></a>使用日志过滤器(<a href="http://docs.hangfire.io/en/latest/extensibility/using-job-filters.html" target="_blank" rel="noopener">点我查看</a>)</h4><p>Hangfire支持自定义过滤器,可以对任务在创建时、执行中、执行后等等状态执行特定特定的操作。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特定方法过滤器</span></span><br><span class="line">[<span class="meta">LogEverything</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局过滤器</span></span><br><span class="line">GlobalJobFilters.Filters.Add(<span class="keyword">new</span> LogEverythingAttribute());</span><br></pre></td></tr></table></figure>
<p><em>参考文章:[<a href="https://www.cnblogs.com/chenug/p/6655636.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenug/p/6655636.html</a>]</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/HangfireIO/Hangfire&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hangfire&lt;/a&gt;作为一款高人气且容易上手的分布式后台执行服务，支持多种数据库。在.net core的环境中，由Core自带的DI管理着生命周期，免去了在NF4.X环境中配置&lt;a href=&quot;http://docs.hangfire.io/en/latest/deployment-to-production/making-aspnet-app-always-running.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;always running&lt;/a&gt;的麻烦，真正做到开箱即用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>在IIS上部署你的ASP.NET Core 2.1项目</title>
    <link href="VickChen.win/2018/201808021940/"/>
    <id>VickChen.win/2018/201808021940/</id>
    <published>2018-08-02T11:40:31.000Z</published>
    <updated>2019-07-20T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是<code>AspNetCoreModule</code>，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。</p>
<a id="more"></a>
<ol>
<li><p>开启控制台</p>
<p>在控制面板→程序→启用或关闭Windows功能→勾选Internet Information Services以及Web管理工具下的IIS管理控制台</p>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1ftxjhhkyelj20lj0gl0us.jpg" alt></p>
</li>
<li><p>IIS 安装AspNetCoreModule 模块</p>
<p>部署之前要确保你的IIS上已经安装了AspNetCoreModule托管模块，如果没有的话，点击<a href="https://www.microsoft.com/net/download/windows" target="_blank" rel="noopener">这里</a>进行下载并安装</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1ftxjhhjtoaj20rm0gs0tc.jpg" alt><br><strong>安装完后一定要重启，否则 Http Error 502</strong></p>
<ol>
<li><p>发布</p>
<p>项目右键–发布</p>
</li>
<li><p>添加网站</p>
<p>添加一个网站，设置一下名称，并将路径指向你刚才发布的文件夹</p>
<p>设置应用程序池的.NET CLR版本为“无托管代码” 。因为IIS是作为一个反向代理的角色，并不需要它来托管代码</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1ftxjhhjecvj20kt0e1gmd.jpg" alt><br><img src="https://raw.githubusercontent.com/VickChen1992/PicRepository/master/9460f058gy1ftxjhhlf4aj20y30jn0vv.jpg" alt></p>
<p>OK!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是&lt;code&gt;AspNetCoreModule&lt;/code&gt;，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="IIS" scheme="VickChen.win/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2.1 使用Cookie验证身份</title>
    <link href="VickChen.win/2018/201806131846/"/>
    <id>VickChen.win/2018/201806131846/</id>
    <published>2018-06-13T10:46:01.000Z</published>
    <updated>2019-07-20T08:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 <code>HttpContext.User</code> 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。</p>
<p>ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在<em>Startup.cs</em>文件中的Configure方法中的调用 <code>UseAuthentication</code> 方法会添加设置 <code>HttpContext.User</code> 属性的 <code>AuthenticationMiddleware</code> 中间件。</p>
<a id="more"></a>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>按下列步骤操作：</p>
<ol>
<li><p>如果不使用 <code>Microsoft.AspNetCore.All</code> <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage" target="_blank" rel="noopener">元包</a>，则在您的项目中安装2.X版的 <code>Microsoft.AspNetCore.Authentication.Cookies</code> NuGet包。</p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>Configure</code> 方法中调用<code>UseAuthentication</code> 方法：<code>app.UseAuthentication();</code></p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>ConfigureServices</code> 方法中调用 <code>AddAuthentication</code> 和 <code>AddCookie</code> 方法：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</span><br><span class="line">        .AddCookie(<span class="string">"MyCookieAuthenticationScheme"</span>, options =&gt; &#123;</span><br><span class="line">            options.AccessDeniedPath = <span class="string">"/Account/Forbidden/"</span>;</span><br><span class="line">            options.LoginPath = <span class="string">"/Account/Unauthorized/"</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的代码片段配置了以下部分或全部选项：</p>
<ul>
<li>AccessDeniedPath - 当用户尝试访问资源但没有通过任何授权策略时，这是请求会重定向的相对路径资源。</li>
<li>AuthenticationScheme - 这是一个已知的特定Cookie认证方案的值。当有多个Cookie验证实例，并且您想限制对一个实例的授权时，这就非常有用。   </li>
<li><p>LoginPath - 当用户尝试访问资源但尚未认证时，这是请求重定向的相对路径。</p>
<p>其它选项包括为Cookie认证创建的设置选项，身份验证的Cookie的名称，Cookie的域和Cookie各种安全属性。默认情况下，Cookie身份验证为其创建的任何Cookie使用适当的安全选项，例如：</p>
</li>
<li>设置HttpOnly标志以防止客户端<code>JavaScript</code>中访问Cookie</li>
<li>如果请求是通过HTTPS访问，则将Cookie限制为HTTPS</li>
</ul>
</li>
</ol>
<h2 id="创建身份认证Cookie"><a href="#创建身份认证Cookie" class="headerlink" title="创建身份认证Cookie"></a>创建身份认证Cookie</h2><p>要创建一个保存用户信息的cookie，您必须构建一个<a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal?view=netframework-4.7.2" target="_blank" rel="noopener">ClaimsPrincipal</a>保存您希望序列化到Cookie中的信息。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> HttpContext.SignInAsync(<span class="string">"MyCookieAuthenticationScheme"</span>, principal);</span><br></pre></td></tr></table></figure></p>
<p>这将创建一个加密的Cookie并将其添加到当前响应中。在调用<code>SignInAsync</code>时，必须在配置中指定的<code>AuthenticationScheme</code><br>顺便提一下，使用的加密方式是ASP.NET Core的<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-2.1&amp;tabs=aspnetcore2x#data-protection-configuring" target="_blank" rel="noopener">Data Protection</a>系统。如果您在多台机器上进行托管、负载平衡或使用Web集群，则需要配置<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection?view=aspnetcore-2.1#security-data-protection-getting-started" target="_blank" rel="noopener">Data Protection</a>才能使用相同的密钥和应用程序标识符。</p>
<h2 id="Signing-out-登出"><a href="#Signing-out-登出" class="headerlink" title="Signing out(登出)"></a>Signing out(登出)</h2><p>要退出当前用户并删除其Cookie，请在控制器中调用以下方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="服务端变化反馈"><a href="#服务端变化反馈" class="headerlink" title="服务端变化反馈"></a>服务端变化反馈</h2><blockquote>
<p>警告： 一旦创建了认证的Cookie，它将成为唯一的身份来源。即使您在服务系统中禁用用户，Cookie身份验证也无法了解此信息，只要Cookie有效，用户仍可登录。</p>
</blockquote>
<p>Cookie认证在其选项中提供了一系列事件。<code>ValidateAsync()</code>事件可用于拦截和重写Cookie身份验证。</p>
<p>可以考虑在后端用户数据库中增加<code>LastChanged</code>列。为了在数据库更改时使Cookie无效，您应该首先在创建Cookie时添加一个<code>LastChanged</code>包含当前值的声明。数据库更改时，更新<code>LastChanged</code>例的值。</p>
<p>要重写<code>ValidateAsync()</code>事件的实现，您必须编写一个具有以下签名的方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span>;</span><br></pre></td></tr></table></figure></p>
<p>ASP.NET Core Identity 在<code>SecurityStampValidator</code>实现了这一逻辑，<a href="https://github.com/aspnet/Identity/blob/rel/2.0.0/src/Microsoft.AspNetCore.Identity/SecurityStampValidator.cs" target="_blank" rel="noopener">链接地址</a>。示例如下所示：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LastChangedValidator</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="comment">// Pull database from registered DI services.</span></span><br><span class="line">          <span class="keyword">var</span> userRepository = context.HttpContext.RequestServices.GetRequiredService&lt;IUserRepository&gt;();</span><br><span class="line">          <span class="keyword">var</span> userPrincipal = context.Principal;</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Look for the last changed claim.</span></span><br><span class="line">          <span class="keyword">string</span> lastChanged;</span><br><span class="line">          lastChanged = (<span class="keyword">from</span> c <span class="keyword">in</span> userPrincipal.Claims</span><br><span class="line">                          <span class="keyword">where</span> c.Type == <span class="string">"LastUpdated"</span></span><br><span class="line">                          <span class="keyword">select</span> c.Value).FirstOrDefault();</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(lastChanged) ||</span><br><span class="line">              !userRepository.ValidateLastChanged(userPrincipal, lastChanged))</span><br><span class="line">          &#123;</span><br><span class="line">              context.RejectPrincipal();</span><br><span class="line">              <span class="keyword">await</span> context.HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，将在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中将Cookie服务注册进行配置：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</span><br><span class="line">           .AddCookie(options =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               options.Events = <span class="keyword">new</span> CookieAuthenticationEvents</span><br><span class="line">               &#123;</span><br><span class="line">                   OnValidatePrincipal = LastChangedValidator.ValidateAsync</span><br><span class="line">               &#125;;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<p>如果要非破坏性地更新用户主体，可以调用<code>context.ReplacePrincipal()</code>，并将<code>context.ShouldRenew</code>属性设置为<code>true</code>。</p>
<h2 id="Cookie设置选项"><a href="#Cookie设置选项" class="headerlink" title="Cookie设置选项"></a>Cookie设置选项</h2><p><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.cookieauthenticationoptions" target="_blank" rel="noopener">CookieAuthenticationOptions</a>类提供了各种配置选项，在创建时调整Cookie的配置。</p>
<ul>
<li><code>ClaimsIssuer</code>是由Cookie认证创建的任何声明时使用的Issuer属性。</li>
<li><code>CookieBuilder.Domain</code>是提供Cookie的域名。默认情况下，这是发送请求的主机名。浏览器仅将Cookie提供给匹配的主机名。您可能希望对此进行调整，以便您的域中的任何主机都可以使用Cookie。例如，将Cookie域名设置为<code>.contoso.com</code>，可以使用Cookie的域名有<code>contoso.com</code>、<code>www.contoso.com</code>、<code>staging.www.contoso.com</code>等</li>
<li><code>CookieBuilder.HttpOnly</code>是一个标识，指定Cookie是否只能由服务器访问。默认为true。如果您的应用程序具有Cross-Site Scripting(XSS)的问题，更改此值可能会导致Cookie被盗用。</li>
<li><code>CookieBuilder.Path</code>可用于隔离在相同主机名上运行的应用程序。如果你有一个应用程序在<code>/app1</code>中运行，并希望限制发送的Cookie只发送到该应用程序，那么您应该将<code>CookiePath</code>属性设置为<code>/app1</code>。通过这样做，Cookie只适用于对<code>/app1</code>或其下任何内容的请求。</li>
<li><code>CookieBuilder.SameSite</code>表示浏览器是否允许Cookie被附加到同一站点或跨站点的请求。默认为<code>SameSiteMode.Lax</code>。</li>
<li><code>CookieBuilder.SecurePolicy</code>是一个标识，表示创建的Cookie是否应该被限制为HTTPS，HTTP或HTTPS，或与请求相同的协议。默认为<code>SameAsRequest</code>。</li>
<li><code>ExpireTimeSpan</code>是TimeSpan类型，在此时间段之后Cookie将过期。将当前日期加上此时间段为创建Cookie的到期日期。</li>
<li><code>SlidingExpiration</code>是一个标识，指示当超过一半的<code>ExpireTimeSpan</code>间隔时，Cookie到期日期是否复位。新的到期日是当前时间加上<code>ExpireTimespan</code>。调用<code>SignInAsync</code>时，可以使用<code>AuthenticationProperties</code>类设置绝对到期时间。绝对到期时间可以通过限制认证Cookie有效的时间来提高应用程序的安全性。<br>在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中使用<code>CookieAuthenticationOptions</code>的例子如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddAuthentication()</span><br><span class="line">        .AddCookie(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.Cookie.Name = <span class="string">"AuthCookie"</span>;</span><br><span class="line">            options.Cookie.Domain = <span class="string">"contoso.com"</span>;</span><br><span class="line">            options.Cookie.Path = <span class="string">"/"</span>;</span><br><span class="line">            options.Cookie.HttpOnly = <span class="literal">true</span>;</span><br><span class="line">            options.Cookie.SameSite = SameSiteMode.Lax;</span><br><span class="line">            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="持久Cookie和绝对到期时间"><a href="#持久Cookie和绝对到期时间" class="headerlink" title="持久Cookie和绝对到期时间"></a>持久Cookie和绝对到期时间</h2><p>您可能希望Cookie在浏览器会话中持续存在，并希望设置身份和Cookie传输的绝对过期时间。这种持久性应该只能是用户显示同意，在登录时的“记住我”复选框或类似的机制启用。您可以通过在创建身份认证Cookie时调用的<code>SignInAsync</code>方法中使用<code>AuthenticationProperties</code>参数来执行这些操作。例如：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</span><br><span class="line">      <span class="string">"MyCookieAuthenticationScheme"</span>,</span><br><span class="line">      principal,</span><br><span class="line">      <span class="keyword">new</span> AuthenticationProperties</span><br><span class="line">      &#123;</span><br><span class="line">          IsPersistent = <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></p>
<p>上面的代码段创建一个身份和相应的Cookie，直到浏览器关闭。以前通过Cookie设置选项配置的任何滑动过期设置仍然有效。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</span><br><span class="line">        <span class="string">"MyCookieAuthenticationScheme"</span>,</span><br><span class="line">        principal,</span><br><span class="line">        <span class="keyword">new</span> AuthenticationProperties</span><br><span class="line">        &#123;</span><br><span class="line">            ExpiresUtc = DateTime.UtcNow.AddMinutes(<span class="number">20</span>)</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>上述代码段创建一个持续20分钟的身份和相应的cookie。这将忽略以前通过Cookie设置选项配置的任何滑动过期设置。</p>
<p><code>ExpiresUtc</code>和<code>IsPersistent</code>属性是互斥的。只能同时生效一个</p>
<p>原文：<a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x" target="_blank" rel="noopener">《Using Cookie Authentication without ASP.NET Core Identity》</a></p>
<p>翻译：<a href="http://www.cnblogs.com/tdfblog" target="_blank" rel="noopener">Sweet Tang</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。&lt;/p&gt;
&lt;p&gt;ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在&lt;em&gt;Startup.cs&lt;/em&gt;文件中的Configure方法中的调用 &lt;code&gt;UseAuthentication&lt;/code&gt; 方法会添加设置 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性的 &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; 中间件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>Emmet语法入门</title>
    <link href="VickChen.win/2017/201708172327/"/>
    <id>VickChen.win/2017/201708172327/</id>
    <published>2017-08-17T15:27:18.000Z</published>
    <updated>2019-07-20T08:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Emmet是一个编辑器插件，以前被称作为 Zen Coding。使用类似于 CSS 选择器的语法描述元素在生成的文档树中的位置及其属性。</p>
<p>使用 Emmet 可以帮助程序员快速的编写 HTML 和 CSS 代码，从而提高 Web前端开发的效率。<a href="https://www.emmet.io/" target="_blank" rel="noopener">官网</a>提供多编辑器支持。我一般使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>，下面就以VS Code插件举例。</p>
<a id="more"></a>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>在编辑器中输入<code>html:5</code>或<code>!</code>，按下Tab键，将会生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>是的，你没看错，生成这么一大段，你只需要输入一个<code>!</code></p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>可以使用元素名（如 div 或者 p）来<em>生成</em> HTML 标签。Emmet 没有预定义的有效元素名的集合，可以把任何单词当作标签来生成和使用：<code>div</code> → <code>&lt;div&gt;&lt;/div&gt;</code>, <code>foo</code> → <code>&lt;foo&gt;&lt;/foo&gt;</code> 等。</p>
<h2 id="层级操作符"><a href="#层级操作符" class="headerlink" title="层级操作符"></a>层级操作符</h2><p>嵌套运算符用于以缩写的方式安排元素在生成文档树中的位置：将其放在内部或成为相邻的元素。</p>
<h3 id="子元素：-gt"><a href="#子元素：-gt" class="headerlink" title="子元素：&gt;"></a>子元素：&gt;</h3><p>可以使用 <code>&gt;</code> 运算符指定嵌套元素在另一个元素内部：</p>
<p><code>div&gt;ul&gt;li</code></p>
<p>生成的结果为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="兄弟元素："><a href="#兄弟元素：" class="headerlink" title="兄弟元素：+"></a>兄弟元素：+</h3><p>使用 <code>+</code> 运算符将相邻的其它元素处理为同级：</p>
<p><code>div+p+bq</code></p>
<p>生成的结果为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;blockquote&gt;&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<h3 id="父元素："><a href="#父元素：" class="headerlink" title="父元素：^"></a>父元素：^</h3><p>使用 <code>&gt;</code> 运算符将会降低所有后续所有元素在生成树中的级别，每一级的兄弟元素也被解析成相同深度的元素：</p>
<p><code>div+div&gt;p&gt;span+em</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>使用 <code>^</code> 运算符，能够提升元素在生成树中的一个级别，并同时影响其后的元素：</p>
<p><code>div+div&gt;p&gt;span+em^bq</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">    &lt;blockquote&gt;&lt;/blockquote&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>可以连续使用多个 <code>^</code> 运算符，每次提高一个级别：</p>
<p><code>div+div&gt;p&gt;span+em^^^bq</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;blockquote&gt;&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<h3 id="重复："><a href="#重复：" class="headerlink" title="重复：*"></a>重复：*</h3><p>使用 <code>*</code> 运算符可以定义一组元素：</p>
<p><code>ul&gt;li*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h3 id="分组："><a href="#分组：" class="headerlink" title="分组：()"></a>分组：()</h3><p>括号用于在复杂的 Emmet 缩写中处理一组子树：</p>
<p><code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>如果想与浏览器 DOM 协同工作，可能想要对文档片段分组：每个组包含一个子树，所有的后续元素都插入到与组中第一个元素相同的级别中。可以在组中嵌套组并且使用 <code>*</code> 运算符绑定它们：</p>
<p><code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>
<p>使用分组，可以使用单个缩写逐个写出整页的标签，不过尽量不要这么做。</p>
<h2 id="属性运算符"><a href="#属性运算符" class="headerlink" title="属性运算符"></a>属性运算符</h2><p>属性运算符用于编辑所生成的元素的属性，在 HTML 和 XML 中可以快速地为生成元素添加 <code>class</code> 属性。</p>
<h3 id="ID和Class"><a href="#ID和Class" class="headerlink" title="ID和Class"></a>ID和Class</h3><p>在 CSS 中，可以使用 <code>elem#id</code> 和 <code>elem.class</code> 注解来达到为元素指定 <code>id</code> 或 <code>class 属性的目的。</code>在 Emmet 中，可以使用几乎相同的语法来为指定的元素添加这些属性：</p>
<p><code>div#header+div.page+div#footer.class1.class2.class3</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="header"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="page"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id="footer" class="class1 class2 class3"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>可以使用 <code>[attr]</code> 注解（就像在 CSS 中一样）来为元素添加自定义属性：</p>
<p><code>td[title=&quot;Hello world!&quot; colspan=3]</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td title="Hello world!" colspan="3"&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>能够在方括号中放置许多属性。</li>
<li>可以不为属性指定值： <code>td[colspan title]</code> 将生成 <code>&lt;td colspan=&quot;&quot; title=&quot;&quot;&gt;</code> ，如果你的编辑器支持，可以使用 Tab 来跳到每个空属性中填写。</li>
<li>属性可以用单引号或双引号作为定界符。</li>
<li>如果属性不包含空格，不需要用定界符括住它：<code>td[title=hello colspan=3]</code> 是正确的。</li>
</ol>
<h3 id="编号"><a href="#编号" class="headerlink" title="编号: $"></a>编号: $</h3><p>使用 <code>*</code> 运算符可以重复生成元素，如果带 <code>$</code> 就可以为它们编号。把 <code>$</code> 放在元素名、属性名或者属性值中，将为每个元素生成正确的编号：</p>
<p><code>ul&gt;li.item$*5</code></p>
<p>将生成</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class="item1"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item2"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>使用多 <code>$</code> 可以填充前导的零：</p>
<p><code>ul&gt;li.item$$$*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class="item001"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item002"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item003"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item004"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item005"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h4 id="改变编号的基数和方向"><a href="#改变编号的基数和方向" class="headerlink" title="改变编号的基数和方向"></a>改变编号的基数和方向</h4><p>使用 <code>@</code> ，可以改变数字的走向（升序或降序）和基数（例如起始值）。</p>
<p>在 <code>$</code> 后添加 <code>@-</code> 来改变数字走向：</p>
<p><code>ul&gt;li.item$@-*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item2"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item1"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>在 <code>$</code> 后面添加 <code>@N</code> 改变编号的基数：</p>
<p><code>ul&gt;li.item$@3*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item6"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item7"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>这些附加的运算符可以同时使用：</p>
<p><code>ul&gt;li.item$@-3*5</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class="item7"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item6"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item5"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item4"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class="item3"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h3 id="文本："><a href="#文本：" class="headerlink" title="文本：{}"></a>文本：{}</h3><p>可以用花括号向元素中添加文本：</p>
<p><code>a{Click me}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=""&gt;Click me&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>注意，这个 <code>{text}</code> 是被当成独立元素解析的（类似于 <code>div</code>, <code>p</code> ），但当其跟在其它元素后面时则有所不同。例如， <code>a{click}</code> 和 <code>a&gt;{click}</code> 产生相同的输出，但是 <code>a{click}+b{here}</code> 和 <code>a&gt;{click}+b{here}</code> 的输出就不同了：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- a&#123;click&#125;+b&#123;here&#125; --&gt;</span><br><span class="line">&lt;a href=""&gt;click&lt;/a&gt;&lt;b&gt;here&lt;/b&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- a&gt;&#123;click&#125;+b&#123;here&#125; --&gt;</span><br><span class="line">&lt;a href=""&gt;click&lt;b&gt;here&lt;/b&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>在第二示例中， <code>&lt;b&gt;</code> 元素放在了 <code>&lt;a&gt;</code> 元素的里面。差别如下：当 <code>{text}</code> 写在元素的后面，它不影响父元素的上下文。下面是展示这种差别的重要性的较复杂的例子：</p>
<p><code>p&gt;{Click }+a{here}+{ to continue}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Click &lt;a href=""&gt;here&lt;/a&gt; to continue&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>在这个例子里， 我们用 <code>&gt;</code> 运算符明确的将 <code>Click here to continue</code> 下移一级，放在 <code>&lt;p&gt;</code> 元素内，但对于 <code>a</code> 元素的内容就不需要了，因为 <code>&lt;a&gt;</code> 仅有 <code>here</code> 这一部分内容，它不改变父元素的上下文。</p>
<p>作为比较，下面是不带有 <code>&gt;</code> 运算符的相同缩写：</p>
<p><code>p{Click }+a{here}+{ to continue}</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Click &lt;/p&gt;</span><br><span class="line">&lt;a href=""&gt;here&lt;/a&gt; to continue</span><br></pre></td></tr></table></figure>
<h2 id="生成测试文本"><a href="#生成测试文本" class="headerlink" title="生成测试文本"></a>生成测试文本</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>在编写HTML代码时，有时需要添加一些内容，Emmet提供了一段随机的看不懂的英文字段，作为测试数据我们就可以调用。而生成Lorem Ipsum文本也非常简单，输入<code>lorem</code>，按Tab键，就可以生成下面这段文字：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Velit, non, minima, voluptas ducimus    </span><br><span class="line">voluptatem perspiciatis id delectus maiores saepe porro aliquam sunt pariatur eaque. Enim,    </span><br><span class="line">voluptatem nesciunt voluptate ad veritatis.</span><br></pre></td></tr></table></figure>
<h3 id="控制单词的数量"><a href="#控制单词的数量" class="headerlink" title="控制单词的数量"></a>控制单词的数量</h3><p>Emmet的lorem这一功能不仅仅只为生成一段文本，使用lorem默认生成30个单词的文本，可以为它指定单词的数量来随机生成一大段文本。</p>
<p>比如：<code>lorem4</code>将生成下面的标题：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit.</span><br></pre></td></tr></table></figure>
<h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>上面的例子只是生成单独的测试文本，与HTML标签一起编写也很简单，就像Emmet快速编写HTML代码文章中生成父子关系的代码一样：</p>
<p><code>h2&gt;lorem4</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Lorem ipsum dolor sit.&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<p><code>p*4&gt;lorem4</code></p>
<p>将生成：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Lorem ipsum dolor sit.&lt;/p&gt;  </span><br><span class="line">&lt;p&gt;Dolores, similique veritatis reprehenderit.&lt;/p&gt;  </span><br><span class="line">&lt;p&gt;Cupiditate repudiandae numquam earum.&lt;/p&gt;  </span><br><span class="line">&lt;p&gt;Atque, sequi autem praesentium?&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>所以<code>lorem</code>为我们提供了强大的测试数据，提高了编写HTML代码的速度，让我们专心编写代码。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>当熟悉了 Emmet 的缩写语法后，可能会想要使用一些格式来生成更可读的缩写。例如，在元素和运算符之间使用空格间隔：</p>
<p><code>(header &gt; ul.nav &gt; li*5) + footer</code></p>
<p>但是这种写法是错误的，因为空格是 Emmet 停止缩写解析的标识符。</p>
</li>
<li><p>很多用户误以为每个缩写都应写在新行上，但是他们错了：可以在文本的任意位置键入和扩展缩写。</p>
</li>
</ol>
<p>如果你仍然认为复杂的缩写需要一些格式使其更易读：</p>
<ul>
<li><p>缩写不是模板语言，它们不需要”易读“，它们必须”可快速扩展和移动“。</p>
</li>
<li><p>不需要写复杂的缩写。不要认为在 web 编程中”键入“是最慢的运算。想快速找出构建单个的复杂缩写比构造和键入一些较短较简单的缩写更慢。</p>
</li>
</ul>
<p>参考：<a href="https://www.cnblogs.com/cnjava/p/3225174.html" target="_blank" rel="noopener">https://www.cnblogs.com/cnjava/p/3225174.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emmet是一个编辑器插件，以前被称作为 Zen Coding。使用类似于 CSS 选择器的语法描述元素在生成的文档树中的位置及其属性。&lt;/p&gt;
&lt;p&gt;使用 Emmet 可以帮助程序员快速的编写 HTML 和 CSS 代码，从而提高 Web前端开发的效率。&lt;a href=&quot;https://www.emmet.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;提供多编辑器支持。我一般使用&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio Code&lt;/a&gt;，下面就以VS Code插件举例。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Emmet" scheme="VickChen.win/tags/Emmet/"/>
    
      <category term="Html" scheme="VickChen.win/tags/Html/"/>
    
  </entry>
  
</feed>
