<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vick&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="VickChen.win/"/>
  <updated>2018-08-02T10:35:19.428Z</updated>
  <id>VickChen.win/</id>
  
  <author>
    <name>Vick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在IIS上部署你的ASP.NET Core 2.1项目</title>
    <link href="VickChen.win/2018/deploy-your-core-project-on-the-iis/"/>
    <id>VickChen.win/2018/deploy-your-core-project-on-the-iis/</id>
    <published>2018-08-02T11:40:31.000Z</published>
    <updated>2018-08-02T10:35:19.428Z</updated>
    
    <content type="html"><![CDATA[<p>与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是<code>AspNetCoreModule</code>，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。</p>
<a id="more"></a>
<ol>
<li>在控制面板→程序→启用或关闭Windows功能→勾选Internet Information Services以及Web管理工具下的IIS管理控制台</li>
</ol>
<p><img src="https://images2018.cnblogs.com/blog/15305/201806/15305-20180617205633842-263052847.png" alt=""></p>
<ol>
<li>IIS 安装AspNetCoreModule 模块</li>
</ol>
<p>部署之前要确保你的IIS上已经安装了AspNetCoreModule托管模块，如果没有的话，点击<a href="https://www.microsoft.com/net/download/windows" target="_blank" rel="external">这里</a>进行下载并安装</p>
<p><img src="https://images2018.cnblogs.com/blog/15305/201806/15305-20180617205443403-863396077.png" alt=""><br><strong>安装完后一定要重启，否则 Http Error 502</strong></p>
<ol>
<li>发布</li>
</ol>
<p>项目右键–发布</p>
<ol>
<li>添加网站</li>
</ol>
<p>添加一个网站，设置一下名称，并将路径指向你刚才发布的文件夹</p>
<p>设置应用程序池的.NET CLR版本为“无托管代码” 。因为IIS是作为一个反向代理的角色，并不需要它来托管代码<br><img src="https://images2018.cnblogs.com/blog/15305/201806/15305-20180617210540581-86550743.png" alt=""><br><img src="https://images2018.cnblogs.com/blog/15305/201806/15305-20180617215120153-1448416605.png" alt=""></p>
<p>OK!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与ASP.NET时代不同，ASP.NET Core不再是由IIS工作进程（w3wp.exe）托管，而是使用自托管Web服务器（Kestrel）运行，IIS则是作为反向代理的角色转发请求到Kestrel不同端口的ASP.NET Core程序中，随后就将接收到的请求推送至中间件管道中去，处理完你的请求和相关业务逻辑之后再将HTTP响应数据重新回写到IIS中，最终转达到不同的客户端（浏览器，APP，客户端等）。而配置文件和过程都会由些许调整，中间最重要的角色便是&lt;code&gt;AspNetCoreModule&lt;/code&gt;，它是其中一个的IIS模块，请求进入到IIS之后便立即由它转发，并迅速重定向到ASP.NET Core项目中，所以这时候我们无需设置应用程序池来托管我们的代码，它只负责转发请求而已。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
      <category term="IIS" scheme="VickChen.win/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2.1 使用Cookie验证身份</title>
    <link href="VickChen.win/2018/aspnet-core-security-authentication-cookie/"/>
    <id>VickChen.win/2018/aspnet-core-security-authentication-cookie/</id>
    <published>2018-08-01T10:46:01.000Z</published>
    <updated>2018-08-02T03:14:29.029Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 <code>HttpContext.User</code> 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。</p>
<p>ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在<em>Startup.cs</em>文件中的Configure方法中的调用 <code>UseAuthentication</code> 方法会添加设置 <code>HttpContext.User</code> 属性的 <code>AuthenticationMiddleware</code> 中间件。</p>
<a id="more"></a>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>按下列步骤操作：</p>
<ol>
<li><p>如果不使用 <code>Microsoft.AspNetCore.All</code> <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage" target="_blank" rel="external">元包</a>，则在您的项目中安装2.X版的 <code>Microsoft.AspNetCore.Authentication.Cookies</code> NuGet包。</p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>Configure</code> 方法中调用<code>UseAuthentication</code> 方法：<code>app.UseAuthentication();</code></p>
</li>
<li><p>在<em>Startup.cs</em>文件中的 <code>ConfigureServices</code> 方法中调用 <code>AddAuthentication</code> 和 <code>AddCookie</code> 方法：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</div><div class="line">        .AddCookie(<span class="string">"MyCookieAuthenticationScheme"</span>, options =&gt; &#123;</div><div class="line">            options.AccessDeniedPath = <span class="string">"/Account/Forbidden/"</span>;</div><div class="line">            options.LoginPath = <span class="string">"/Account/Unauthorized/"</span>;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>上面的代码片段配置了以下部分或全部选项：</p>
<ul>
<li>AccessDeniedPath - 当用户尝试访问资源但没有通过任何授权策略时，这是请求会重定向的相对路径资源。</li>
<li>AuthenticationScheme - 这是一个已知的特定Cookie认证方案的值。当有多个Cookie验证实例，并且您想限制对一个实例的授权时，这就非常有用。   </li>
<li><p>LoginPath - 当用户尝试访问资源但尚未认证时，这是请求重定向的相对路径。</p>
<p>其它选项包括为Cookie认证创建的设置选项，身份验证的Cookie的名称，Cookie的域和Cookie各种安全属性。默认情况下，Cookie身份验证为其创建的任何Cookie使用适当的安全选项，例如：</p>
</li>
<li>设置HttpOnly标志以防止客户端<code>JavaScript</code>中访问Cookie</li>
<li>如果请求是通过HTTPS访问，则将Cookie限制为HTTPS</li>
</ul>
</li>
</ol>
<h2 id="创建身份认证Cookie"><a href="#创建身份认证Cookie" class="headerlink" title="创建身份认证Cookie"></a>创建身份认证Cookie</h2><p>要创建一个保存用户信息的cookie，您必须构建一个<a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal?view=netframework-4.7.2" target="_blank" rel="external">ClaimsPrincipal</a>保存您希望序列化到Cookie中的信息。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(<span class="string">"MyCookieAuthenticationScheme"</span>, principal);</div></pre></td></tr></table></figure></p>
<p>这将创建一个加密的Cookie并将其添加到当前响应中。在调用<code>SignInAsync</code>时，必须在配置中指定的<code>AuthenticationScheme</code><br>顺便提一下，使用的加密方式是ASP.NET Core的<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-2.1&amp;tabs=aspnetcore2x#data-protection-configuring" target="_blank" rel="external">Data Protection</a>系统。如果您在多台机器上进行托管、负载平衡或使用Web集群，则需要配置<a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection?view=aspnetcore-2.1#security-data-protection-getting-started" target="_blank" rel="external">Data Protection</a>才能使用相同的密钥和应用程序标识符。</p>
<h2 id="Signing-out-登出"><a href="#Signing-out-登出" class="headerlink" title="Signing out(登出)"></a>Signing out(登出)</h2><p>要退出当前用户并删除其Cookie，请在控制器中调用以下方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="服务端变化反馈"><a href="#服务端变化反馈" class="headerlink" title="服务端变化反馈"></a>服务端变化反馈</h2><blockquote>
<p>警告： 一旦创建了认证的Cookie，它将成为唯一的身份来源。即使您在服务系统中禁用用户，Cookie身份验证也无法了解此信息，只要Cookie有效，用户仍可登录。</p>
</blockquote>
<p>Cookie认证在其选项中提供了一系列事件。<code>ValidateAsync()</code>事件可用于拦截和重写Cookie身份验证。</p>
<p>可以考虑在后端用户数据库中增加<code>LastChanged</code>列。为了在数据库更改时使Cookie无效，您应该首先在创建Cookie时添加一个<code>LastChanged</code>包含当前值的声明。数据库更改时，更新<code>LastChanged</code>例的值。</p>
<p>要重写<code>ValidateAsync()</code>事件的实现，您必须编写一个具有以下签名的方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span>;</div></pre></td></tr></table></figure></p>
<p>ASP.NET Core Identity 在<code>SecurityStampValidator</code>实现了这一逻辑，<a href="https://github.com/aspnet/Identity/blob/rel/2.0.0/src/Microsoft.AspNetCore.Identity/SecurityStampValidator.cs" target="_blank" rel="external">链接地址</a>。示例如下所示：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LastChangedValidator</span></div><div class="line">  &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ValidateAsync</span>(<span class="params">CookieValidatePrincipalContext context</span>)</span></div><div class="line">      &#123;</div><div class="line">          <span class="comment">// Pull database from registered DI services.</span></div><div class="line">          <span class="keyword">var</span> userRepository = context.HttpContext.RequestServices.GetRequiredService&lt;IUserRepository&gt;();</div><div class="line">          <span class="keyword">var</span> userPrincipal = context.Principal;</div><div class="line">  </div><div class="line">          <span class="comment">// Look for the last changed claim.</span></div><div class="line">          <span class="keyword">string</span> lastChanged;</div><div class="line">          lastChanged = (<span class="keyword">from</span> c <span class="keyword">in</span> userPrincipal.Claims</div><div class="line">                          <span class="keyword">where</span> c.Type == <span class="string">"LastUpdated"</span></div><div class="line">                          <span class="keyword">select</span> c.Value).FirstOrDefault();</div><div class="line">  </div><div class="line">          <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(lastChanged) ||</div><div class="line">              !userRepository.ValidateLastChanged(userPrincipal, lastChanged))</div><div class="line">          &#123;</div><div class="line">              context.RejectPrincipal();</div><div class="line">              <span class="keyword">await</span> context.HttpContext.SignOutAsync(<span class="string">"MyCookieAuthenticationScheme"</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>然后，将在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中将Cookie服务注册进行配置：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication(<span class="string">"MyCookieAuthenticationScheme"</span>)</div><div class="line">           .AddCookie(options =&gt;</div><div class="line">           &#123;</div><div class="line">               options.Events = <span class="keyword">new</span> CookieAuthenticationEvents</div><div class="line">               &#123;</div><div class="line">                   OnValidatePrincipal = LastChangedValidator.ValidateAsync</div><div class="line">               &#125;;</div><div class="line">           &#125;);</div></pre></td></tr></table></figure>
<p>如果要非破坏性地更新用户主体，可以调用<code>context.ReplacePrincipal()</code>，并将<code>context.ShouldRenew</code>属性设置为<code>true</code>。</p>
<h2 id="Cookie设置选项"><a href="#Cookie设置选项" class="headerlink" title="Cookie设置选项"></a>Cookie设置选项</h2><p><a href="https://docs.microsoft.com/aspnet/core/api/microsoft.aspnetcore.builder.cookieauthenticationoptions" target="_blank" rel="external">CookieAuthenticationOptions</a>类提供了各种配置选项，在创建时调整Cookie的配置。</p>
<ul>
<li><code>ClaimsIssuer</code>是由Cookie认证创建的任何声明时使用的Issuer属性。</li>
<li><code>CookieBuilder.Domain</code>是提供Cookie的域名。默认情况下，这是发送请求的主机名。浏览器仅将Cookie提供给匹配的主机名。您可能希望对此进行调整，以便您的域中的任何主机都可以使用Cookie。例如，将Cookie域名设置为<code>.contoso.com</code>，可以使用Cookie的域名有<code>contoso.com</code>、<code>www.contoso.com</code>、<code>staging.www.contoso.com</code>等</li>
<li><code>CookieBuilder.HttpOnly</code>是一个标识，指定Cookie是否只能由服务器访问。默认为true。如果您的应用程序具有Cross-Site Scripting(XSS)的问题，更改此值可能会导致Cookie被盗用。</li>
<li><code>CookieBuilder.Path</code>可用于隔离在相同主机名上运行的应用程序。如果你有一个应用程序在<code>/app1</code>中运行，并希望限制发送的Cookie只发送到该应用程序，那么您应该将<code>CookiePath</code>属性设置为<code>/app1</code>。通过这样做，Cookie只适用于对<code>/app1</code>或其下任何内容的请求。</li>
<li><code>CookieBuilder.SameSite</code>表示浏览器是否允许Cookie被附加到同一站点或跨站点的请求。默认为<code>SameSiteMode.Lax</code>。</li>
<li><code>CookieBuilder.SecurePolicy</code>是一个标识，表示创建的Cookie是否应该被限制为HTTPS，HTTP或HTTPS，或与请求相同的协议。默认为<code>SameAsRequest</code>。</li>
<li><code>ExpireTimeSpan</code>是TimeSpan类型，在此时间段之后Cookie将过期。将当前日期加上此时间段为创建Cookie的到期日期。</li>
<li><code>SlidingExpiration</code>是一个标识，指示当超过一半的<code>ExpireTimeSpan</code>间隔时，Cookie到期日期是否复位。新的到期日是当前时间加上<code>ExpireTimespan</code>。调用<code>SignInAsync</code>时，可以使用<code>AuthenticationProperties</code>类设置绝对到期时间。绝对到期时间可以通过限制认证Cookie有效的时间来提高应用程序的安全性。<br>在<em>Startup.cs</em>的<code>ConfigureServices</code>方法中使用<code>CookieAuthenticationOptions</code>的例子如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">services.AddAuthentication()</div><div class="line">        .AddCookie(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.Cookie.Name = <span class="string">"AuthCookie"</span>;</div><div class="line">            options.Cookie.Domain = <span class="string">"contoso.com"</span>;</div><div class="line">            options.Cookie.Path = <span class="string">"/"</span>;</div><div class="line">            options.Cookie.HttpOnly = <span class="literal">true</span>;</div><div class="line">            options.Cookie.SameSite = SameSiteMode.Lax;</div><div class="line">            options.Cookie.SecurePolicy = CookieSecurePolicy.Always;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="持久Cookie和绝对到期时间"><a href="#持久Cookie和绝对到期时间" class="headerlink" title="持久Cookie和绝对到期时间"></a>持久Cookie和绝对到期时间</h2><p>您可能希望Cookie在浏览器会话中持续存在，并希望设置身份和Cookie传输的绝对过期时间。这种持久性应该只能是用户显示同意，在登录时的“记住我”复选框或类似的机制启用。您可以通过在创建身份认证Cookie时调用的<code>SignInAsync</code>方法中使用<code>AuthenticationProperties</code>参数来执行这些操作。例如：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</div><div class="line">      <span class="string">"MyCookieAuthenticationScheme"</span>,</div><div class="line">      principal,</div><div class="line">      <span class="keyword">new</span> AuthenticationProperties</div><div class="line">      &#123;</div><div class="line">          IsPersistent = <span class="literal">true</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码段创建一个身份和相应的Cookie，直到浏览器关闭。以前通过Cookie设置选项配置的任何滑动过期设置仍然有效。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。如果Cookie在浏览器关闭时过期，浏览器会在重新启动后清除它。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> HttpContext.SignInAsync(</div><div class="line">        <span class="string">"MyCookieAuthenticationScheme"</span>,</div><div class="line">        principal,</div><div class="line">        <span class="keyword">new</span> AuthenticationProperties</div><div class="line">        &#123;</div><div class="line">            ExpiresUtc = DateTime.UtcNow.AddMinutes(<span class="number">20</span>)</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>上述代码段创建一个持续20分钟的身份和相应的cookie。这将忽略以前通过Cookie设置选项配置的任何滑动过期设置。</p>
<p><code>ExpiresUtc</code>和<code>IsPersistent</code>属性是互斥的。只能同时生效一个</p>
<p>原文：<a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x" target="_blank" rel="external">《Using Cookie Authentication without ASP.NET Core Identity》</a></p>
<p>翻译：<a href="http://www.cnblogs.com/tdfblog" target="_blank" rel="external">Sweet Tang</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASP.NET Core 1.x提供了通过Cookie 中间件将用户主体序列化为一个加密的Cookie，然后在后续请求中验证Cookie并重新创建主体，并将其分配给 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性。如果您要提供自己的登录界面和用户数据库，可以使用作为独立功能的Cookie中间件。&lt;/p&gt;
&lt;p&gt;ASP.NET Core 2.x的一个主要变化是不再存在Cookie中间件。取而代之的是在&lt;em&gt;Startup.cs&lt;/em&gt;文件中的Configure方法中的调用 &lt;code&gt;UseAuthentication&lt;/code&gt; 方法会添加设置 &lt;code&gt;HttpContext.User&lt;/code&gt; 属性的 &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; 中间件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term=".Net Core" scheme="VickChen.win/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>不限长度RAS加密解密</title>
    <link href="VickChen.win/2017/unlimited-length-RAS-encryption-and-decryption/"/>
    <id>VickChen.win/2017/unlimited-length-RAS-encryption-and-decryption/</id>
    <published>2017-06-18T19:02:41.000Z</published>
    <updated>2017-07-10T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>RSA 是常用的非对称加密算法。最近使用时却出现了提示“不正确的长度”，排查发现是由于待加密的数据超长所致。</p>
<p>.NET Framework 中提供的 RSA 算法规定：</p>
<blockquote>
<p>待加密的字节数不能超过密钥的长度值除以 8 再减去 11（即：RSACryptoServiceProvider.KeySize / 8 - 11），而加密后得到密文的字节数，正好是密钥的长度值除以 8（即：RSACryptoServiceProvider.KeySize / 8）。</p>
</blockquote>
<p>所以，如果要加密较长的数据，则可以采用分段加解密的方式，实现方式如下：</p>
<a id="more"></a>
<p>加密部分代码如下:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Encrypt</span>(<span class="params"><span class="keyword">string</span> xmlPublicKey, <span class="keyword">string</span> EncryptString</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (RSACryptoServiceProvider RSACryptography = <span class="keyword">new</span> RSACryptoServiceProvider())</div><div class="line">    &#123;</div><div class="line">        RSACryptography.FromXmlString(xmlPublicKey);</div><div class="line">        Byte[] PlaintextData = Encoding.UTF8.GetBytes(EncryptString);</div><div class="line">        <span class="keyword">int</span> MaxBlockSize = RSACryptography.KeySize / <span class="number">8</span> - <span class="number">11</span>;    <span class="comment">//加密块最大长度限制</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (PlaintextData.Length &lt;= MaxBlockSize)</div><div class="line">            <span class="keyword">return</span> Convert.ToBase64String(RSACryptography.Encrypt(PlaintextData, <span class="literal">false</span>));</div><div class="line"></div><div class="line">        <span class="keyword">using</span> (MemoryStream PlaiStream = <span class="keyword">new</span> MemoryStream(PlaintextData))</div><div class="line">        <span class="keyword">using</span> (MemoryStream CrypStream = <span class="keyword">new</span> MemoryStream())</div><div class="line">        &#123;</div><div class="line">            Byte[] Buffer = <span class="keyword">new</span> Byte[MaxBlockSize];</div><div class="line">            <span class="keyword">int</span> BlockSize = PlaiStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (BlockSize &gt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                Byte[] ToEncrypt = <span class="keyword">new</span> Byte[BlockSize];</div><div class="line">                Array.Copy(Buffer, <span class="number">0</span>, ToEncrypt, <span class="number">0</span>, BlockSize);</div><div class="line"></div><div class="line">                Byte[] Cryptograph = RSACryptography.Encrypt(ToEncrypt, <span class="literal">false</span>);</div><div class="line">                CrypStream.Write(Cryptograph, <span class="number">0</span>, Cryptograph.Length);</div><div class="line"></div><div class="line">                BlockSize = PlaiStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> Convert.ToBase64String(CrypStream.ToArray(), Base64FormattingOptions.None);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//解密部分代码如下<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Decrypt</span>(<span class="params"><span class="keyword">string</span> xmlPrivateKey, <span class="keyword">string</span> EncryptString</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (RSACryptoServiceProvider RSACryptography = <span class="keyword">new</span> RSACryptoServiceProvider())</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            RSACryptography.FromXmlString(xmlPrivateKey);</div><div class="line">            Byte[] CiphertextData = Convert.FromBase64String(EncryptString);</div><div class="line">            <span class="keyword">int</span> MaxBlockSize = RSACryptography.KeySize / <span class="number">8</span>;    <span class="comment">//解密块最大长度限制</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (CiphertextData.Length &lt;= MaxBlockSize)</div><div class="line">                <span class="keyword">return</span> Encoding.UTF8.GetString(RSACryptography.Decrypt(CiphertextData, <span class="literal">false</span>));</div><div class="line"></div><div class="line">            <span class="keyword">using</span> (MemoryStream CrypStream = <span class="keyword">new</span> MemoryStream(CiphertextData))</div><div class="line">            <span class="keyword">using</span> (MemoryStream PlaiStream = <span class="keyword">new</span> MemoryStream())</div><div class="line">            &#123;</div><div class="line">                Byte[] Buffer = <span class="keyword">new</span> Byte[MaxBlockSize];</div><div class="line">                <span class="keyword">int</span> BlockSize = CrypStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (BlockSize &gt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    Byte[] ToDecrypt = <span class="keyword">new</span> Byte[BlockSize];</div><div class="line">                    Array.Copy(Buffer, <span class="number">0</span>, ToDecrypt, <span class="number">0</span>, BlockSize);</div><div class="line"></div><div class="line">                    Byte[] Plaintext = RSACryptography.Decrypt(ToDecrypt, <span class="literal">false</span>);</div><div class="line">                    PlaiStream.Write(Plaintext, <span class="number">0</span>, Plaintext.Length);</div><div class="line"></div><div class="line">                    BlockSize = CrypStream.Read(Buffer, <span class="number">0</span>, MaxBlockSize);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Encoding.UTF8.GetString(PlaiStream.ToArray());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"解密失败,请检查传输数据"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSA 是常用的非对称加密算法。最近使用时却出现了提示“不正确的长度”，排查发现是由于待加密的数据超长所致。&lt;/p&gt;
&lt;p&gt;.NET Framework 中提供的 RSA 算法规定：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待加密的字节数不能超过密钥的长度值除以 8 再减去 11（即：RSACryptoServiceProvider.KeySize / 8 - 11），而加密后得到密文的字节数，正好是密钥的长度值除以 8（即：RSACryptoServiceProvider.KeySize / 8）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果要加密较长的数据，则可以采用分段加解密的方式，实现方式如下：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="RAS" scheme="VickChen.win/tags/RAS/"/>
    
  </entry>
  
  <entry>
    <title>分部视图的使用</title>
    <link href="VickChen.win/2017/How-to-use-partial-views/"/>
    <id>VickChen.win/2017/How-to-use-partial-views/</id>
    <published>2017-05-20T17:10:52.000Z</published>
    <updated>2017-07-10T08:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到分部视图，我相信大家会想到和web form时代的对应物ascx分部控件，我们在Mvc时代可以更加轻松的控制分部视图。</p>
<p>要说明分部视图，我们先来讨论一下分部视图可以带给我们的优点：</p>
<ol>
<li><p>分部视图可以使系统插件化。我现在非常推崇一个原则，就是可以分离的东西绝对不要让他们在一起，因为只有每个功能模块都是单独的，我们才可以在其他位置重用它。</p>
</li>
<li><p>分部视图还可以带来一个优点，就是分工合作。现在是一个合作的时代，没有任何一个人可以单独完成规定的任务而不与别人合作，牛人例外。分部视图可以带给我们开发不同模块中的分工合作。</p>
</li>
<li><p>分部视图还有一个在Mvc时代的优点，就是实现简单。我自从学习使用Mvc以后，我基本上就很少写web form的代码了，因为我感觉没有Mvc写的那么流畅。html.partial(partialName)就可以显示一个分部视图的页面。</p>
</li>
</ol>
<a id="more"></a>
<p>简单的叙述了一下优点，既然我们能发现优点存在，那么我们就想在实际项目中更好的使用它，毕竟程序员都追求懒，一段代码，三句可以搞定，绝对不会写三句半，当然最小化原则也是我们代码优化的最终目的。</p>
<p>那么究竟在Mvc中有哪些可以实现分部视图的功能呢？以及我们要注意点什么呢？</p>
<ul>
<li><p>Html.Partial(partialName)和html.RenderPartial(partialName) 就是首选。<br>其实这两个方法我们可以指定任何的.cshtml文件，不一定只是分部视图。大家来回忆一下分部视图和视图的区别在哪里？就是视图有head、body标签，可以定义js，可以指定母板页，但是在我们用Vs右键添加分部视图的时候，我们会看到只是一些基本的html标签，没有任何的head、body，但是这不等于我们不可以添加，所以说partialName可以是任何的视图文件。但是我们最好是创建分部视图，因为我们最终是要把这些分部视图合并成为一个页面，如果只是分部视图的html标签，那么在整体页面中html标签就会显得很干净。</p>
</li>
<li><p>不要在分部视图中定义或者引用css以及js。如果需要我们在整体页面中定义或引用。原因有2：</p>
<ol>
<li><p>是我们的分部视图文件和整体页面的路径可能不在同一个目录下，那么会造成找不到css或js文件的情况。</p>
</li>
<li><p>对整体页面的html代码是一种伤害。</p>
</li>
</ol>
</li>
<li><p>html.Action和html.RenderAction()方法也可以用来作为分部视图使用.具体使用方式我想就不需要细说了，大家对htmlHelper都会非常熟悉，因为常用嘛。</p>
</li>
</ul>
<p>这段时间就大量的使用到了分部视图，现在来总结一下，让后来的学习者少走一点弯路。</p>
<ol>
<li><p>如果可以，尽量使用母板页，这样可以很好的控制网站的样式。</p>
</li>
<li><p>采用单独的css文件，单独的js文件，尽量不要在分部视图中定义样式，而是在整体页面中。</p>
</li>
<li><p>分部视图的html标签应该尽可能的少，除了要显示的内容之外，不要有任何杂质存在。样式css、js等在整体页面添加。</p>
</li>
<li><p>如果可以，尽量采用html.partial(partialName)或html.RenderPartial(partialName)的方式，而不要用html.Action来作为分部视图的方式，因为这种方法会和控制器交互。</p>
</li>
<li><p>对分部视图的传值尽量采用Model的方式进行，如果一个分部视图需要传递两个参数，那么我建议你分成两个分部视图。</p>
</li>
<li><p>采用分部视图会对整体页面的样式调整带来困难，所以我建议先整体做出页面，然后再分成不同的分部视图。</p>
</li>
<li><p>过多的分部视图会增加服务器的延迟，所以分部视图的控制要得当，我建议控制在10个以内吧，如果服务器允许，更多也是可以的。</p>
</li>
<li><p>要注意分部视图的标签id的命名，最好采用固定的要规则的命名方式，尽量减少冲突的发生，毕竟同名的标签存在会对程序造成隐患。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提到分部视图，我相信大家会想到和web form时代的对应物ascx分部控件，我们在Mvc时代可以更加轻松的控制分部视图。&lt;/p&gt;
&lt;p&gt;要说明分部视图，我们先来讨论一下分部视图可以带给我们的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;分部视图可以使系统插件化。我现在非常推崇一个原则，就是可以分离的东西绝对不要让他们在一起，因为只有每个功能模块都是单独的，我们才可以在其他位置重用它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分部视图还可以带来一个优点，就是分工合作。现在是一个合作的时代，没有任何一个人可以单独完成规定的任务而不与别人合作，牛人例外。分部视图可以带给我们开发不同模块中的分工合作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分部视图还有一个在Mvc时代的优点，就是实现简单。我自从学习使用Mvc以后，我基本上就很少写web form的代码了，因为我感觉没有Mvc写的那么流畅。html.partial(partialName)就可以显示一个分部视图的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C#" scheme="VickChen.win/tags/C/"/>
    
      <category term="MVC" scheme="VickChen.win/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>访问https接口出现未能为SSL/TLS安全通道建立信任关系错误</title>
    <link href="VickChen.win/2017/how-to-access-https-api/"/>
    <id>VickChen.win/2017/how-to-access-https-api/</id>
    <published>2017-05-07T02:34:21.000Z</published>
    <updated>2017-07-10T09:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候调用https接口时会提示如下错误:</p>
<blockquote>
<p>基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。</p>
</blockquote>
<a id="more"></a>
<p>1,先加入命名空间：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Net.Security;</div><div class="line"></div><div class="line"><span class="keyword">using</span> System.Security.Authentication;</div><div class="line"></div><div class="line"><span class="keyword">using</span> System.Security.Cryptography.X509Certificates;</div></pre></td></tr></table></figure>
<p>2，再重载CheckValidationResult方法，返回true</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">CheckValidationResult</span>(<span class="params"><span class="keyword">object</span> sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors</span>)</span></div><div class="line"></div><div class="line">    &#123;   <span class="comment">// 总是接受</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>3,然后在 <code>HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);</code>  前面加上如下一行代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ServicePointManager.ServerCertificateValidationCallback = </div><div class="line">    <span class="keyword">new</span> System.Net.Security.RemoteCertificateValidationCallback(CheckValidationResult);<span class="comment">//验证服务器证书回调自动验证</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候调用https接口时会提示如下错误:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="API" scheme="VickChen.win/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>最常用的正则表达式</title>
    <link href="VickChen.win/2017/regular-expression/"/>
    <id>VickChen.win/2017/regular-expression/</id>
    <published>2017-03-15T09:51:18.000Z</published>
    <updated>2017-03-16T12:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p>
<a id="more"></a>
<p>一、校验数字的表达式</p>
<ol>
<li><p>数字：</p>
<pre><code>^[0-9]*$
</code></pre></li>
<li><p>n位的数字：</p>
<pre><code>^\d{n}$
</code></pre></li>
<li><p>至少n位的数字：</p>
<pre><code>^\d{n,}$
</code></pre></li>
<li><p>m-n位的数字：</p>
<pre><code>^\d{m,n}$
</code></pre></li>
<li><p>零和非零开头的数字：</p>
<pre><code>^(0|[1-9][0-9]*)$
</code></pre></li>
<li><p>非零开头的最多带两位小数的数字：</p>
<pre><code>^([1-9][0-9]*)+(.[0-9]{1,2})?$
</code></pre></li>
<li><p>带1-2位小数的正数或负数：</p>
<pre><code>^(\-)?\d+(\.\d{1,2})?$
</code></pre></li>
<li><p>正数、负数、和小数：</p>
<pre><code>^(\-|\+)?\d+(\.\d+)?$
</code></pre></li>
<li><p>有两位小数的正实数：</p>
<pre><code>^[0-9]+(.[0-9]{2})?$
</code></pre></li>
<li><p>有1~3位小数的正实数：</p>
<pre><code>^[0-9]+(.[0-9]{1,3})?$
</code></pre></li>
<li><p>非零的正整数：</p>
<pre><code>^[1-9]\d*$ 
</code></pre><p>或 </p>
<pre><code>^([1-9][0-9]*){1,3}$ 
</code></pre><p>或</p>
<pre><code>^\+?[1-9][0-9]*$
</code></pre></li>
<li><p>非零的负整数：</p>
<pre><code>^\-[1-9][]0-9&quot;*$ 
</code></pre><p>或 </p>
<pre><code>^-[1-9]\d*$
</code></pre></li>
<li><p>非负整数：</p>
<pre><code>^\d+$ 
</code></pre><p>或 </p>
<pre><code>^[1-9]\d*|0$
</code></pre></li>
<li><p>非正整数：</p>
<pre><code>^-[1-9]\d*|0$ 
</code></pre><p>或 </p>
<pre><code>^((-\d+)|(0+))$
</code></pre></li>
<li><p>非负浮点数：</p>
<pre><code>^\d+(\.\d+)?$ 
</code></pre><p>或 </p>
<pre><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
</code></pre></li>
<li><p>非正浮点数：</p>
<pre><code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 
</code></pre><p>或 </p>
<pre><code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
</code></pre></li>
<li><p>正浮点数：</p>
<pre><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 
</code></pre><p>或 </p>
<pre><code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
</code></pre></li>
<li><p>负浮点数：</p>
<pre><code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 
</code></pre><p>或 </p>
<pre><code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
</code></pre></li>
<li><p>浮点数：</p>
<pre><code>^(-?\d+)(\.\d+)?$ 
</code></pre><p>或 </p>
<pre><code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
</code></pre></li>
</ol>
<p>二、校验字符的表达式</p>
<ol>
<li><p>汉字：</p>
<pre><code>^[\u4e00-\u9fa5]{0,}$
</code></pre></li>
<li><p>英文和数字：</p>
<pre><code>^[A-Za-z0-9]+$ 
</code></pre><p> 或 </p>
<pre><code>^[A-Za-z0-9]{4,40}$
</code></pre></li>
<li><p>长度为3-20的所有字符：</p>
<pre><code>^.{3,20}$
</code></pre></li>
<li><p>由26个英文字母组成的字符串：</p>
<pre><code>^[A-Za-z]+$
</code></pre></li>
<li><p>由26个大写英文字母组成的字符串：</p>
<pre><code>^[A-Z]+$
</code></pre></li>
<li><p>由26个小写英文字母组成的字符串：</p>
<pre><code>^[a-z]+$
</code></pre></li>
<li><p>由数字和26个英文字母组成的字符串：</p>
<pre><code>^[A-Za-z0-9]+$
</code></pre></li>
<li><p>由数字、26个英文字母或者下划线组成的字符串：</p>
<pre><code>^\w+$ 
</code></pre><p> 或 </p>
<pre><code>^\w{3,20}$
</code></pre></li>
<li><p>中文、英文、数字包括下划线：</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9_]+$
</code></pre></li>
<li><p>中文、英文、数字但不包括下划线等符号：</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 
</code></pre><p>或者</p>
<pre><code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
</code></pre></li>
<li><p>可以输入含有^%&amp;’,;=?$\”等字符：</p>
<pre><code>[^%&amp;&apos;,;=?$\x22]+ 12 
</code></pre><p>禁止输入含有~的字符：</p>
<pre><code>[^~\x22]+
</code></pre></li>
</ol>
<p>三、特殊需求表达式</p>
<ol>
<li><p>Email地址：</p>
<pre><code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
</code></pre></li>
<li><p>域名：</p>
<pre><code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
</code></pre></li>
<li><p>InternetURL：</p>
<pre><code>[a-zA-z]+://[^\s]* 
</code></pre><p> 或者</p>
<pre><code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$
</code></pre></li>
<li><p>手机号码：</p>
<pre><code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
</code></pre></li>
<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：</p>
<pre><code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$
</code></pre></li>
<li><p>国内电话号码(0511-4405222、021-87888822)：</p>
<pre><code>\d{3}-\d{8}|\d{4}-\d{7}
</code></pre></li>
<li><p>身份证号(15位、18位数字)：</p>
<pre><code>^\d{15}|\d{18}$
</code></pre></li>
<li><p>短身份证号码(数字、字母x结尾)：</p>
<pre><code>^([0-9]){7,18}(x|X)?$ 
</code></pre><p> 或 </p>
<pre><code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
</code></pre></li>
<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</p>
<pre><code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$
</code></pre></li>
<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</p>
<pre><code>^[a-zA-Z]\w{5,17}$
</code></pre></li>
<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</p>
<pre><code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
</code></pre></li>
<li><p>日期格式：</p>
<pre><code>^\d{4}-\d{1,2}-\d{1,2}
</code></pre></li>
<li><p>一年的12个月(01～09和1～12)：</p>
<pre><code>^(0?[1-9]|1[0-2])$
</code></pre></li>
<li><p>一个月的31天(01～09和1～31)：</p>
<pre><code>^((0?[1-9])|((1|2)[0-9])|30|31)$
</code></pre></li>
<li><p>钱的输入格式：</p>
<ul>
<li><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：</p>
<pre><code>^[1-9][0-9]*$ 
</code></pre><p> 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：</p>
<pre><code>^(0|[1-9][0-9]*)$ 
</code></pre><p> 表示一个0或者一个不以0开头的数字.</p>
</li>
<li><p>我们还可以允许开头有一个负号：</p>
<pre><code>^(0|-?[1-9][0-9]*)$ 
</code></pre><p>  这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.</p>
</li>
<li><p>下面我们要加的是说明可能的小数部分：</p>
<pre><code>^[0-9]+(.[0-9]+)?$
</code></pre><p>  必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：</p>
<pre><code>^[0-9]+(.[0-9]{2})?$
</code></pre><p>  这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以写成：</p>
<pre><code>^[0-9]+(.[0-9]{1,2})?$  
</code></pre><p>  这就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：</p>
<pre><code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
</code></pre><p>  1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：</p>
<pre><code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
</code></pre><p>  备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉那个反斜杠,一般的错误都在这里</p>
</li>
</ul>
</li>
<li><p>xml文件：</p>
<pre><code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
</code></pre></li>
<li><p>中文字符的正则表达式：</p>
<pre><code>[\u4e00-\u9fa5]
</code></pre></li>
<li><p>双字节字符：</p>
<pre><code>[^\x00-\xff] 
</code></pre><p>(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>
</li>
<li><p>空白行的正则表达式：</p>
<pre><code>\n\s*\r 
</code></pre><p>(可以用来删除空白行)</p>
</li>
<li><p>HTML标记的正则表达式：</p>
<pre><code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*?/&gt; 
</code></pre><p>(网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>
</li>
<li><p>首尾空白字符的正则表达式：</p>
<pre><code>^\s*|\s*$
</code></pre><p>或</p>
<pre><code>(^\s*)|(\s*$)
</code></pre><p> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>
</li>
<li><p>腾讯QQ号：</p>
<pre><code>[1-9][0-9]{4,} 
</code></pre><p>(腾讯QQ号从10000开始)</p>
</li>
<li><p>中国邮政编码：</p>
<pre><code>[1-9]\d{5}(?!\d)
</code></pre><p> (中国邮政编码为6位数字)</p>
</li>
<li><p>IP地址：</p>
<pre><code>\d+\.\d+\.\d+\.\d+ 
</code></pre><p>(提取IP地址时有用)</p>
</li>
<li><p>IP地址：</p>
<pre><code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="正则" scheme="VickChen.win/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>解决C#获取SQL的timestamp类型到程序中为byte[]类型的问题</title>
    <link href="VickChen.win/2016/sql-timestamp-to-cshap/"/>
    <id>VickChen.win/2016/sql-timestamp-to-cshap/</id>
    <published>2016-11-03T13:06:29.000Z</published>
    <updated>2017-07-10T09:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p> 项目中由于需求设计，数据库中需要一个timestamp时间戳类型的字段来作为区别数据添加和修改的标识。由于在SQL SERVER 中,不可为空的timestamp类型在语义上等同于binary(8)类型,可为空的 timestamp类型在语义上等同于varbinary(8)类型，这将导致在C#程序中获取到的timestamp类型则变成了byte[]类型。所以如果我们需要从数据库中获取并使用这个时间戳的话就必需经过转换。</p>
<a id="more"></a>
<ul>
<li><h3 id="SQL-Server-中timestamp类型的定义"><a href="#SQL-Server-中timestamp类型的定义" class="headerlink" title="SQL Server 中timestamp类型的定义"></a>SQL Server 中timestamp类型的定义</h3></li>
</ul>
<p>首先看下timestamp在SQL Server 2005中的定义，该定义摘抄自SQL Server 2005联机丛书(具体详情 <a href="http://msdn.microsoft.com/zh-cn/library/ms182776(v=sql.90).aspx" target="_blank" rel="external">点此链接)</a>:</p>
<blockquote>
<p>timestamp 公开数据库中自动生成的唯一二进制数字的数据类型。timestamp 通常用作给表行加版本戳的机制。 存储大小为 8 个字节。 timestamp 数据类型只是递增的数字，不保留日期或时间。 若要记录日期或时间，请使用 datetime 数据类型。</p>
<p>每个数据库都有一个计数器，当对数据库中包含 timestamp 列的表执行插入或更新操作时，该计数器值就会增加。 该计数器是数据库时间戳。 这可以跟踪数据库内的相对时间，而不是时钟相关联的实际时间。</p>
<p>一个表只能有一个 timestamp 列， 每次修改或插入包含 timestamp 列的行时，就会在 timestamp 列中插入增量数据库时间戳值。 这一属性使 timestamp 列不适合作为键使用，尤其是不能作为主键使用。</p>
<p>对数据行(row)的任何更新都会更改 timestamp 值，从而更改键值。 如果该列属于主键，那么旧的键值将无效，进而引用该旧值的外键也将不再有效。 如果该表在动态游标中引用，则所有更新均会更改游标中行的位置。 如果该列属于索引键，则对数据行的所有更新还将导致索引更新。</p>
<p>使用某一行中的 timestamp 列可以很容易地确定该行中的任何值自上次读取以后是否发生了更改。 如果对行进行了更改，就会更新该时间戳值。 如果没有对行进行更改，则该时间戳值将与以前读取该行时的时间戳值一致。 若要返回数据库的当前时间戳值，请使用 @@DBTS。</p>
<p>Transact-SQL timestamp 数据类型不同于在 SQL-2003 标准中定义的 timestamp 数据类型。 SQL-2003 timestamp 数据类型等同于 Transact-SQL datetime 数据类型。</p>
<p>rowversion 的数据类型为 timestamp 数据类型的同义词，并具有数据类型同义词的行为。 在 DDL 语句，请尽量使用 rowversion 而不是 timestamp。 有关详细信息，请参阅 <a href="http://msdn.microsoft.com/zh-cn/library/ms177566(v=sql.90).aspx" target="_blank" rel="external">数据类型同义词 (Transact-SQL)</a> </p>
</blockquote>
<ul>
<li><h3 id="解决数据库中timestamp类型和C-中byte-类型转换问题"><a href="#解决数据库中timestamp类型和C-中byte-类型转换问题" class="headerlink" title="解决数据库中timestamp类型和C#中byte[]类型转换问题"></a>解决数据库中timestamp类型和C#中byte[]类型转换问题</h3></li>
</ul>
<p>在程序中我们发现，通过ADO.NET获取数据库中timestamp字段值到程序中，结果类型为byte[]。假设在数据库中timestamp的值为0x00000000000007D6，那么获取到.net程序中的值就不是这样了，一把来说会变成byte[]的数组类型。那么我们的解决方式有两种，第一种方式是直接在数据库中将timestamp进行转换，可以转换成十六进制字符串类型或者BIGINT的长整形，这也是我推荐的方法。还有一种是在.NET 程序中使用BitConverter方法进行转换。以下是两种方式的代码：</p>
<h4 id="方法一（在SQL中转换）："><a href="#方法一（在SQL中转换）：" class="headerlink" title="方法一（在SQL中转换）："></a>方法一（在SQL中转换）：</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TS</div><div class="line">,<span class="keyword">CAST</span>(TS <span class="keyword">AS</span> VARBINARY(<span class="number">8</span>)) <span class="keyword">AS</span> <span class="string">'timestamp转十六进制字符串'</span> </div><div class="line">,<span class="keyword">CONVERT</span>(<span class="built_in">BIGINT</span>,TS) <span class="keyword">AS</span> <span class="string">'timestamp转bigint类型'</span></div><div class="line"><span class="keyword">FROM</span> tb_Ts</div></pre></td></tr></table></figure>
<p> 这样一来我们就可以获取到timestamp的十六进制字符串或者bigint，最终查询出来的结果如下图：<br> <img src="http://shiyousan.com/UserFiles/images/2014/06/635373323909511292/000001.jpg" alt=""></p>
<p> 另外要说明的一点是，VARBINARY(8)对应的c# 类型是byte[]，所以建议直接转换成bigint类型，否则在C#中还要调用下面的方法</p>
<h4 id="方法二（在程序中转换-调用下面的方法即可）："><a href="#方法二（在程序中转换-调用下面的方法即可）：" class="headerlink" title="方法二（在程序中转换,调用下面的方法即可）："></a>方法二（在程序中转换,调用下面的方法即可）：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 将数据库中timespan转换成十六进制字符串</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="objTs"&gt;</span>从数据库中获取的timespan值<span class="doctag">&lt;/param&gt;</span>      </span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>timespan十六进制字符串<span class="doctag">&lt;/returns&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">string</span> <span class="title">ConvertToTimeSpanString</span>(<span class="params"><span class="keyword">object</span> objTs</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">byte</span>[] btTsArray=objTs <span class="keyword">as</span> <span class="keyword">byte</span>[];</div><div class="line">String strTimeSpan = <span class="string">"0x"</span>+ BitConverter.ToString(btTsArray).Replace(<span class="string">"-"</span>,<span class="string">""</span>);</div><div class="line"><span class="keyword">return</span> strTimeSpan;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>参考:<a href="http://shiyousan.com/post/635373323909511292" target="_blank" rel="external">十有三博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 项目中由于需求设计，数据库中需要一个timestamp时间戳类型的字段来作为区别数据添加和修改的标识。由于在SQL SERVER 中,不可为空的timestamp类型在语义上等同于binary(8)类型,可为空的 timestamp类型在语义上等同于varbinary(8)类型，这将导致在C#程序中获取到的timestamp类型则变成了byte[]类型。所以如果我们需要从数据库中获取并使用这个时间戳的话就必需经过转换。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSharp" scheme="VickChen.win/tags/CSharp/"/>
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>查询整个数据库中某个特定值所在的位置</title>
    <link href="VickChen.win/2016/find-value-in-db/"/>
    <id>VickChen.win/2016/find-value-in-db/</id>
    <published>2016-10-31T15:15:48.000Z</published>
    <updated>2016-11-04T03:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们想通过一个值知道这个值来自数据库的哪个表以及哪个字段，在网上搜了一下，找到一个比较好的方法，通过一个存储过程实现的。只需要传入一个想要查找的值，即可查询出这个值所在的表和字段名。</p>
<p>前提是要将这个存储过程放在所查询的数据库。</p>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[SP_FindValueInDB]</div><div class="line">(</div><div class="line">    @<span class="keyword">value</span> <span class="built_in">VARCHAR</span>(<span class="number">1024</span>)</div><div class="line">)        </div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></div><div class="line">    <span class="comment">-- interfering with SELECT statements.</span></div><div class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">sql</span> <span class="built_in">VARCHAR</span>(<span class="number">1024</span>) </div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">table</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">column</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #t ( </div><div class="line">    tablename <span class="built_in">VARCHAR</span>(<span class="number">64</span>), </div><div class="line">    columnname <span class="built_in">VARCHAR</span>(<span class="number">64</span>) </div><div class="line">) </div><div class="line"></div><div class="line"><span class="keyword">DECLARE</span> <span class="keyword">TABLES</span> <span class="keyword">CURSOR</span> </div><div class="line"><span class="keyword">FOR</span> </div><div class="line"></div><div class="line">    <span class="keyword">SELECT</span> o.name, c.name </div><div class="line">    <span class="keyword">FROM</span> syscolumns c </div><div class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sysobjects o <span class="keyword">ON</span> c.id = o.id </div><div class="line">    <span class="keyword">WHERE</span> o.type = <span class="string">'U'</span> <span class="keyword">AND</span> c.xtype <span class="keyword">IN</span> (<span class="number">167</span>, <span class="number">175</span>, <span class="number">231</span>, <span class="number">239</span>) </div><div class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> o.name, c.name </div><div class="line"></div><div class="line"><span class="keyword">OPEN</span> <span class="keyword">TABLES</span> </div><div class="line"></div><div class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> <span class="keyword">TABLES</span> </div><div class="line"><span class="keyword">INTO</span> @<span class="keyword">table</span>, @<span class="keyword">column</span> </div><div class="line"></div><div class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS = <span class="number">0</span> </div><div class="line"><span class="keyword">BEGIN</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = <span class="string">'IF EXISTS(SELECT NULL FROM ['</span> + @<span class="keyword">table</span> + <span class="string">'] '</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + <span class="string">'WHERE RTRIM(LTRIM(['</span> + @<span class="keyword">column</span> + <span class="string">'])) LIKE ''%'</span> + @<span class="keyword">value</span> + <span class="string">'%'') '</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + <span class="string">'INSERT INTO #t VALUES ('''</span> + @<span class="keyword">table</span> + <span class="string">''', '''</span> </div><div class="line">    <span class="keyword">SET</span> @<span class="keyword">sql</span> = @<span class="keyword">sql</span> + @<span class="keyword">column</span> + <span class="string">''')'</span> </div><div class="line"></div><div class="line">    EXEC(@<span class="keyword">sql</span>) </div><div class="line"></div><div class="line">    <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> <span class="keyword">TABLES</span> </div><div class="line">    <span class="keyword">INTO</span> @<span class="keyword">table</span>, @<span class="keyword">column</span> </div><div class="line"><span class="keyword">END</span> </div><div class="line"></div><div class="line"><span class="keyword">CLOSE</span> <span class="keyword">TABLES</span> </div><div class="line"><span class="keyword">DEALLOCATE</span> <span class="keyword">TABLES</span> </div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * </div><div class="line"><span class="keyword">FROM</span> #t </div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #t </div><div class="line"></div><div class="line"><span class="keyword">End</span></div></pre></td></tr></table></figure>
<p><em>参考:<a href="http://www.cnblogs.com/michaelxu/archive/2009/11/04/1596106.html" target="_blank" rel="external">徐洪军的博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们想通过一个值知道这个值来自数据库的哪个表以及哪个字段，在网上搜了一下，找到一个比较好的方法，通过一个存储过程实现的。只需要传入一个想要查找的值，即可查询出这个值所在的表和字段名。&lt;/p&gt;
&lt;p&gt;前提是要将这个存储过程放在所查询的数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>用存储过程生成实体类</title>
    <link href="VickChen.win/2016/proc-generate-entity-class/"/>
    <id>VickChen.win/2016/proc-generate-entity-class/</id>
    <published>2016-10-26T13:46:18.000Z</published>
    <updated>2016-11-03T09:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实网上已经有有很多实体类生成工具的存在,但多了解点知识总是没错的.</p>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">IF EXISTS (<span class="keyword">select</span> * <span class="keyword">FROM</span> dbo.sysobjects <span class="keyword">WHERE</span> <span class="keyword">id</span> = object_id(N<span class="string">'procGenerateEntityClass'</span>) <span class="keyword">AND</span> OBJECTPROPERTY(<span class="keyword">id</span>, N<span class="string">'IsProcedure'</span>) = <span class="number">1</span>)</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> procGenerateEntityClass</div><div class="line"><span class="keyword">GO</span></div><div class="line"><span class="comment">/*======================================================================</span></div><div class="line">Business Entity Class Generator</div><div class="line">This SP accepts a DATABASE object (table, view) name's parameter AND</div><div class="line">generates (C# code) custom entity class based ON the object's fields</div><div class="line">======================================================================*/</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procGenerateEntityClass</div><div class="line">@ObjectName <span class="built_in">varchar</span>(<span class="number">100</span>)</div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">  @<span class="keyword">type</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</div><div class="line"><span class="keyword">DECLARE</span> objCursor <span class="keyword">CURSOR</span></div><div class="line"><span class="keyword">FOR</span></div><div class="line"><span class="keyword">SELECT</span> sc.name, st.name <span class="keyword">type</span> <span class="keyword">FROM</span> syscolumns sc</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> systypes st</div><div class="line"><span class="keyword">ON</span> st.xusertype = sc.xusertype</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span>=OBJECT_ID(@ObjectName)</div><div class="line"><span class="keyword">DECLARE</span> @propertyCodes <span class="built_in">varchar</span>(<span class="number">8000</span>)</div><div class="line"><span class="keyword">SET</span> @propertyCodes = <span class="string">''</span></div><div class="line"><span class="keyword">OPEN</span> objCursor</div><div class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> objCursor</div><div class="line"><span class="keyword">INTO</span> @<span class="keyword">name</span>, @<span class="keyword">type</span></div><div class="line"><span class="keyword">DECLARE</span> @cType <span class="built_in">varchar</span>(<span class="number">20</span>)<span class="comment">-- C# type</span></div><div class="line"><span class="keyword">IF</span> @@FETCH_STATUS &lt;&gt; <span class="number">0</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">CLOSE</span> objCursor</div><div class="line">  <span class="keyword">DEALLOCATE</span> objCursor</div><div class="line">  PRINT <span class="string">'Error... Please CHECK passed parameter'</span></div><div class="line">  <span class="keyword">RETURN</span></div><div class="line"> <span class="keyword">END</span></div><div class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS = <span class="number">0</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">  <span class="comment">-- 将SQL Server数据库数据类型转换为C#数据类型</span></div><div class="line">  <span class="keyword">SET</span> @cType =</div><div class="line">  <span class="keyword">CASE</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span> <span class="keyword">OR</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%text%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'string'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">IN</span> (<span class="string">'decimal'</span>, <span class="string">'numeric'</span>)</div><div class="line">   <span class="keyword">THEN</span> <span class="string">'decimal'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'real'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'float'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%money%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'decimal'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'bit'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'bool'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">IN</span> (<span class="string">'bigint'</span>, <span class="string">'timestamp'</span>)  </div><div class="line">   <span class="keyword">THEN</span> <span class="string">'long'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> <span class="keyword">LIKE</span> <span class="string">'%int%'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'int'</span></div><div class="line">  <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'datetime'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'DateTime'</span> </div><div class="line">   <span class="keyword">WHEN</span> @<span class="keyword">type</span> = <span class="string">'uniqueidentifier'</span></div><div class="line">   <span class="keyword">THEN</span> <span class="string">'Guid'</span>  </div><div class="line">  <span class="keyword">ELSE</span></div><div class="line">   @<span class="keyword">type</span></div><div class="line">  <span class="keyword">END</span></div><div class="line">  <span class="keyword">SET</span> @propertyCodes = @propertyCodes + <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'public '</span> + @ctype + <span class="string">' '</span> + @<span class="keyword">name</span> + <span class="string">'&#123; get; set; &#125;'</span> + <span class="built_in">CHAR</span>(<span class="number">13</span>) + <span class="built_in">CHAR</span>(<span class="number">13</span>)</div><div class="line">  <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> objCursor</div><div class="line">  <span class="keyword">INTO</span> @<span class="keyword">name</span>, @<span class="keyword">type</span></div><div class="line"> <span class="keyword">END</span></div><div class="line"><span class="comment">--PRINT '[Serializable]'</span></div><div class="line">PRINT <span class="string">'public class '</span> + @ObjectName + <span class="string">'Info'</span></div><div class="line">PRINT <span class="string">'&#123;'</span></div><div class="line">PRINT <span class="string">''</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'public '</span> + @ObjectName + <span class="string">'Info()'</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'&#123;'</span></div><div class="line">PRINT <span class="built_in">CHAR</span>(<span class="number">9</span>) + <span class="string">'&#125;'</span></div><div class="line">PRINT <span class="string">''</span></div><div class="line">PRINT @propertyCodes</div><div class="line">PRINT <span class="string">'&#125;'</span></div><div class="line"><span class="keyword">CLOSE</span> objCursor</div><div class="line"><span class="keyword">DEALLOCATE</span> objCursor</div></pre></td></tr></table></figure>
<p>使用方法:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC procGenerateEntityClass 'tabname'</div></pre></td></tr></table></figure></p>
<p><em>参考地址: <a href="http://www.cnblogs.com/jacktang/archive/2008/12/10/1352176.html" target="_blank" rel="external">Jack Tang的博客</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实网上已经有有很多实体类生成工具的存在,但多了解点知识总是没错的.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="VickChen.win/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 入门</title>
    <link href="VickChen.win/2016/learn-markdown/"/>
    <id>VickChen.win/2016/learn-markdown/</id>
    <published>2016-09-20T04:47:54.000Z</published>
    <updated>2016-09-21T02:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="什么是Markdown语法？"><a href="#什么是Markdown语法？" class="headerlink" title="什么是Markdown语法？"></a>什么是Markdown语法？</h3> Markdown 是一种轻量级标记语言，目标是实现「易读易写」。越来越多的网站开始采用了Markdown语法，比如 GitHub、Coding、简书、有道云笔记 等。</li>
</ol>
<a id="more"></a>
<ol>
<li><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p> 在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zypdyzhwj20gf09cq3i.jpg" alt=""></p>
</li>
<li><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p> Hexo 会针对每个标题，在解析时都会添加锚点id，如</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># 锚点</div></pre></td></tr></table></figure>
<p> 会被解析成：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"user-content-锚点"</span>&gt;</span>锚点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 注意:我们添加了一个user-content-的前缀所以如果要自己添加跳转链接要使用markdown的形式，且链接要加一个’user-content-‘前缀，如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[问内链接](#user-content-锚点);</div></pre></td></tr></table></figure>
</li>
<li><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p> Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式，只需要在整个段落的第一行最前面加上 &gt; :</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; GitHub 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zyuw2sw6j20ge02v74p.jpg" alt=""></p>
<p> 区块引用可以嵌套，只要根据层次加上不同数量的 &gt; ：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 这是第一级引用。</div><div class="line">&gt;</div><div class="line">&gt; &gt; 这是第二级引用。</div><div class="line">&gt;</div><div class="line">&gt; 现在回到第一级引用。</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zyw0q9oqj20gk04eaa9.jpg" alt=""></p>
<p> 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; ## 这是一个标题。</div><div class="line">&gt;</div><div class="line">&gt; 1. 这是第一行列表项。</div><div class="line">&gt; 2. 这是第二行列表项。</div><div class="line">&gt;</div><div class="line">&gt; 给出一些例子代码：</div><div class="line">&gt;</div><div class="line">&gt; return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zyyay4vlj20gq06st9d.jpg" alt=""></p>
</li>
<li><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p> 列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。</p>
<ul>
<li><p>无序列表：使用星号、加号或是减号作为列表标记</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Red</div><div class="line">- Green</div><div class="line">- Blue</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz0fooujj20go03rwei.jpg" alt=""></p>
</li>
<li><p>有序列表：使用数字接着一个英文句点</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. Red</div><div class="line">2. Green</div><div class="line">3. Blue</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzg35wtij20gf03pq2z.jpg" alt=""></p>
</li>
<li><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*  Coding.net有以下主要功能:</div><div class="line">&gt; 代码托管平台</div><div class="line">&gt; 在线运行环境    </div><div class="line">&gt; 代码质量监控    </div><div class="line">&gt; 项目管理平台</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz3rludnj20gi066wev.jpg" alt=""></p>
</li>
<li><p>代办列表: 表示列表是否勾选状态</p>
  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>[ ] 不勾选</div><div class="line"><span class="bullet">- </span>[x] 勾选</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zz5kunayj20iu036glo.jpg" alt=""></p>
</li>
</ul>
</li>
<li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p> 只要把你的代码块包裹在 ```之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f803bs0ejcj20fi03k3yl.jpg" alt=""></p>
<p> 效果图如下：</p>
<p> <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zz7wkcrzj20gi03yaad.jpg" alt=""></p>
</li>
<li><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p> 在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。</p>
<ul>
<li><p>斜体：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*Coding，让开发更简单*</div><div class="line">_Coding，让开发更简单_</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zzamysjqj20gi030q34.jpg" alt=""></p>
</li>
<li><p>加粗：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**Coding，让开发更简单**</div><div class="line">__Coding，让开发更简单__</div></pre></td></tr></table></figure>
<p>  效果图如下：</p>
<p>  <img src="http://ww3.sinaimg.cn/large/9460f058gw1f7zzbkl3ktj20gj02umxd.jpg" alt=""></p>
</li>
</ul>
</li>
<li><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p> 方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[超强大的云开发平台Coding](http://coding.net)</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzekwr8pj20gn02wgln.jpg" alt=""></p>
<p> 或者也可以直接用&lt; &gt;，将网址或者邮箱地址放在中间，也能将地址直接转成链接：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;support@coding.net&gt;</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zzhmtclzj20go02tt8q.jpg" alt=""></p>
</li>
<li><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p> 在 Markdown 中，可以制作表格，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header | Second Header | Third Header</div><div class="line">------------ | ------------- | ------------</div><div class="line">Content Cell | Content Cell  | Content Cell</div><div class="line">Content Cell | Content Cell  | Content Cell</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww3.sinaimg.cn/large/9460f058gw1f800qn8m10j20b603o74o.jpg" alt=""></p>
<p> 或者也可以让表格两边内容对齐，中间内容居中，例如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header | Second Header | Third Header</div><div class="line">:----------- | :-----------: | -----------:</div><div class="line">Left         | Center        | Right</div><div class="line">Left         | Center        | Right</div></pre></td></tr></table></figure>
<p> 效果图如下：</p>
<p> <img src="http://ww1.sinaimg.cn/large/9460f058gw1f800tewbbhj20b203kdg2.jpg" alt=""></p>
</li>
<li><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在 Markdown 中，可以制作分割线，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/9460f058gw1f800v7u0inj20go04qq36.jpg" alt=""></p>
</li>
<li><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: 内联 和 引用.</p>
<ul>
<li><p>内联图片语法如下:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div></pre></td></tr></table></figure>
<p>  或</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure>
<p>  也就是:</p>
<p>  一个感叹号: ! ; 紧跟一对方括号, 包含了可选填的图片 alt 属性; 紧跟一对圆括号, 包含了图片的 URL 或者路径, 以及一个可选的用单引号或双引号包裹的 title 属性.</p>
</li>
<li><p>引用图片语法如下:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text][id]</div></pre></td></tr></table></figure>
<p>  “id” 是图片引用的名称. 图片引用使用链接定义的相同语法:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id]: url/to/image &quot;Optional title attribute&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h3 id="符号转义"><a href="#符号转义" class="headerlink" title="符号转义"></a>符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <em> # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \</em> # * 进行避免。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\_不想这里的文本变斜体\_</div><div class="line">\*\*不想这里的文本被加粗\*\*</div></pre></td></tr></table></figure>
</li>
<li><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>Markdown 编辑器语法指南 - <a href="https://segmentfault.com/markdown" target="_blank" rel="external">https://segmentfault.com/markdown</a></p>
<p>Markdown 语法说明 (简体中文版) - <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
</li>
</ol>
<p><em>本文转载自<a href="https://coding.net/help/doc/project/markdown.html#section-2" target="_blank" rel="external">https://coding.net/help/doc/project/markdown.html#section-2</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;什么是Markdown语法？&quot;&gt;&lt;a href=&quot;#什么是Markdown语法？&quot; class=&quot;headerlink&quot; title=&quot;什么是Markdown语法？&quot;&gt;&lt;/a&gt;什么是Markdown语法？&lt;/h3&gt; Markdown 是一种轻量级标记语言，目标是实现「易读易写」。越来越多的网站开始采用了Markdown语法，比如 GitHub、Coding、简书、有道云笔记 等。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="VickChen.win/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo在GitHub上搭建自己的bolg</title>
    <link href="VickChen.win/2016/create-hexo-blog-on-github/"/>
    <id>VickChen.win/2016/create-hexo-blog-on-github/</id>
    <published>2016-09-19T16:41:53.000Z</published>
    <updated>2018-08-01T09:55:29.914Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="前言：搭建博客的几大要素"><a href="#前言：搭建博客的几大要素" class="headerlink" title="前言：搭建博客的几大要素"></a>前言：搭建博客的几大要素</h3><ul>
<li>一个服务器（即博客的代码存放的地方，这里选用github）</li>
<li>一个Blog生成工具（这里选用Hexo，类似的还有 WordPress，jekyll）</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><h3 id="介绍Git和GitHub"><a href="#介绍Git和GitHub" class="headerlink" title="介绍Git和GitHub"></a>介绍Git和GitHub</h3><p> Git，一个非常强大的版本管理工具。</p>
<p> GitHub,一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。</p>
<p> 你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码</p>
</li>
<li><h3 id="Github的安装和配置"><a href="#Github的安装和配置" class="headerlink" title="Github的安装和配置"></a>Github的安装和配置</h3><ol>
<li>注册，这个总会吧，官网-<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>安装及配置可以看<a href="http://vickchen.win/about-git-installation/" target="_blank" rel="external">这里</a></li>
</ol>
</li>
<li><h3 id="使用Github-Pages生成博客"><a href="#使用Github-Pages生成博客" class="headerlink" title="使用Github Pages生成博客"></a>使用Github Pages生成博客</h3><ol>
<li>在Github网站上新建一个仓库（repository），网站右上角：<br><img src="http://ww3.sinaimg.cn/large/9460f058gw1f7zaho97v0j20bo06ddgc.jpg" alt=""></li>
<li>输入库的名字，注意：一定要以这种形式yourname.github.com进行命名，比如我的用户名是vickchen1992，于是我的命名就是vickchen1992.github.com<br><img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zaho1bv9j20ke0ebtbh.jpg" alt=""></li>
<li>创建完成之后进入这个界面后点击右边的设置。<br><img src="http://ww4.sinaimg.cn/large/9460f058gw1f7zahndv9nj20qu046wfc.jpg" alt=""></li>
<li>把界面往下拉就可以看到一个“页面自动生成”按钮了，点击该按钮<br><img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zaho7n5fj20mp0k2jvw.jpg" alt=""></li>
<li>然后进入Github自带的Markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮Continue to Layouts。</li>
<li>然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！</li>
<li>试着在地址栏输入<code>http://yourname.github.io/</code> 就可以进入你刚刚创建的博客。</li>
</ol>
</li>
<li><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul>
<li>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="http://nodejs.org/" target="_blank" rel="external">下载</a>安装文件并执行即可完成安装。</li>
</ul>
</li>
<li><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol>
<li><p>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择 Git bash ）</p>
<p> <code>npm install -g hexo</code></p>
</li>
<li><p>创建hexo文件夹</p>
<p> 安装完成后，在你喜爱的文件夹下（如 D:\hexo），点击鼠标右键，选择 Git bash 执行以下指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>
<p> <code>hexo init</code></p>
</li>
<li><p>安装依赖包</p>
<p> <code>npm install</code></p>
</li>
<li><p>本地预览</p>
<p> 现在我们已经搭建起本地的hexo博客了，先在本地看看怎么样。在hexo安装的目录执行以下命令启动服务</p>
<p> <code>hexo generate</code> //生成静态网页，简写方式为 hexo g</p>
<p> <code>hexo server</code>  //启动本地服务，简写方式为 hexo s</p>
<p> 然后到浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>即可</p>
<p> 至此，本地博客已经搭建起来了。</p>
</li>
</ol>
</li>
<li><h3 id="博客部署到Github"><a href="#博客部署到Github" class="headerlink" title="博客部署到Github"></a>博客部署到Github</h3><ul>
<li><p>修改配置文件</p>
<p>  打开安装目录下的 _config.yml(在 D:\hexo下)，找到deploy并进行如下修改，记得把相应的地方改成你自己的账号或URL。</p>
<blockquote>
<p>别告诉我你不知道你github pages的git提交地址。。。好吧，我还是附上一张截图吧，进入到你的github刚创建好的那个github pages仓库就能看到了。</p>
</blockquote>
<p>  <img src="http://ww2.sinaimg.cn/large/9460f058gw1f7zbcc4ekrj20g908cmyl.jpg" alt=""></p>
<p>  <strong>执行下列指令完成部署</strong></p>
<p>  <code>hexo generate</code> //可简写为 hexo g</p>
<p>  <code>hexo deploy</code> //发布至GitHub 可简写为 hexo d</p>
</li>
<li><p>注意</p>
<p>  <strong>每次修改本地文件后，需要 hexo generate才能保存。每次使用命令时，都要在 D:\hexo目录下。</strong></p>
<p>OK,我们的博客已经完全搭建起来了，在浏览器访问 <a href="http://yourname.github.io/" target="_blank" rel="external">http://yourname.github.io/</a> 就能看到你的成果了！</p>
<p>还有一点，有一些用户在hexo deploy之后会有个这个提示</p>
<p><img src="http://ww1.sinaimg.cn/large/9460f058gw1f7zbi1z5y7j20fa06zjs5.jpg" alt=""></p>
<p>那么我们要输入我们在git上验证的邮箱，再次hexo deploy便成功发布上去。<br>就可以访问我们的网站了。</p>
</li>
</ul>
</li>
<li><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>配置文件_config.yml 编辑了title subtile之类的信息保存后，在git下输入hexo server(或其他指令)，出现大量报错，形如’…can not read a block mapping entry…‘？</p>
<p> 解决方法：检查_config.yml内容，<strong>特别注意冒号后面需要有一个空格</strong></p>
</li>
<li><p>hexo deploy之后报错 ERROR Deployer not found: github ?</p>
<p> 解决方法：在安装目录下（D:\hexo）右键Git Bash执行命令</p>
<p> <code>npm install hexo -deployer -git --save</code></p>
<p> 然后检查根目录下配置文件_config.yml，将deploy 的 type由github改为git</p>
</li>
<li><p>hexo deploy之后出现 fatal: ‘username.github.io’ does not appear to be a git repository？</p>
<p> 解决方法：一是检查 repo 的名字是否合乎规范、是否含有大写字母、config.yml 中的 deploy 配置是否正确，二是把 git bash 关掉，重新打开再执行命令。</p>
</li>
<li><p>右键菜单中没有 git bash选项？</p>
<p> 解决方法：可以进入开始菜单找到 git bash，然后通过 cd进入相应目录执行命令。</p>
</li>
<li><p>在github部署完成之后，马上访问出现404错误？</p>
<p> 解决方法：这是正常的，（最多）等待十分钟左右就可以访问了。如果还不行，那很可能是 github 发送给你的验证邮件你没有打开看，验证后就没问题了。</p>
</li>
<li>shell 命令中输入密码时，你输入之后密码是不显示的，这是为了安全，并非是你没输上。</li>
<li>出现乱码的，不要使用 windows 中的「记事本」打开并编辑文件，推荐使用 VS Code</li>
<li>遇到什么其他的问题，不妨删除.deploy 和db.json 再重新生成试一试。</li>
<li>hexo安装没错，也能成功运行。启动也没错，但就是无法访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>?<br> 你的电脑端口被占用了。hexo默认的端口是4000，如果你的电脑安装了福昕阅读器，就是他，没错.<br> 启动hexo s 的时候，用这个命令，换一个端口。<br> <code>hexo s -p 5000</code> </li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;前言：搭建博客的几大要素&quot;&gt;&lt;a href=&quot;#前言：搭建博客的几大要素&quot; class=&quot;headerlink&quot; title=&quot;前言：搭建博客的几大要素&quot;&gt;&lt;/a&gt;前言：搭建博客的几大要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个服务器（即博客的代码存放的地方，这里选用github）&lt;/li&gt;
&lt;li&gt;一个Blog生成工具（这里选用Hexo，类似的还有 WordPress，jekyll）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="VickChen.win/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="VickChen.win/tags/Git/"/>
    
      <category term="GitHub" scheme="VickChen.win/tags/GitHub/"/>
    
      <category term="Hexo" scheme="VickChen.win/tags/Hexo/"/>
    
      <category term="Nodejs" scheme="VickChen.win/tags/Nodejs/"/>
    
      <category term="npm" scheme="VickChen.win/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>SVN 与 Git 的区别</title>
    <link href="VickChen.win/2016/why-git/"/>
    <id>VickChen.win/2016/why-git/</id>
    <published>2016-09-18T16:15:12.000Z</published>
    <updated>2016-09-21T02:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><h3 id="合并对提交过程的保留"><a href="#合并对提交过程的保留" class="headerlink" title="合并对提交过程的保留"></a>合并对提交过程的保留</h3><ul>
<li><code>Git</code>: 合并操作保留原有的提交过程（即保留了合并来源的作者、提交次数、分离提交的内容）。</li>
<li><p><code>SVN</code>: 合并操作把来源多个提交合并成了一个合并提交，即在提交历史中Crash了自然的提交过程。</p>
<p>  保留原有的提交过程，可以无需繁琐追踪历史就方便实现以下目的：</p>
<ol>
<li>跟踪修改过程。        </li>
<li>自然的提交过程。这极大方便了代码细节演进过程的查看。</li>
<li>极大方便查出那行提交是什么时间、谁做出的。svn因为合并Crash了自然的提交过程，要追踪很痛苦。</li>
</ol>
</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><h3 id="修正提交"><a href="#修正提交" class="headerlink" title="修正提交"></a>修正提交</h3><ul>
<li><p><code>Git</code>: 可以修正提交。</p>
<p>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</p>
</li>
<li><p><code>SVN</code>: 一旦提交就到服务器上，实际使用中就是不能修改。</p>
<p><em><code>SVN</code>可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做</em></p>
<p>实际使用中会有误提交的情况（如提交了一个不该提交的日志文件），对于svn来说，就是让大家一遍又一遍看到这个垃圾文件。</p>
<p>没有干净的提交，严重影响了Code Review，增加成本。</p>
<p>另外对于想了解演进过程的同学，垃圾提交影响了了解效果。</p>
</li>
</ul>
</li>
<li><h3 id="廉价好用的本地分支"><a href="#廉价好用的本地分支" class="headerlink" title="廉价好用的本地分支"></a>廉价好用的本地分支</h3><ul>
<li><code>Git</code>: 有本地分支</li>
<li><p><code>SVN</code>: 无本地分支</p>
<p>git可以方便创建本地分支，且瞬间就可以完成创建。由于分支可以是本地的，也就不存在svn目录权限的问题。</p>
<p>可以从想要工作点闪电般创建本地分支，本地实验不确定的修改，创建分支如此之廉价，git推荐创建分支来隔离修改。</p>
</li>
</ul>
</li>
<li><h3 id="更强大智能的合并能力"><a href="#更强大智能的合并能力" class="headerlink" title="更强大智能的合并能力"></a>更强大智能的合并能力</h3><ul>
<li><code>Git</code>: 重命名（无论文件还是目录）提交可以合并上文件重命名前的这些文件的提交。</li>
<li><p><code>SVN</code>: 重命名（无论文件还是目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时，恭喜，你会碰上传说中难搞的树冲突！</p>
<p>因为惧怕svn树冲突，在包名调整（重命名目录）或类名调整（重命名文件）前，我不得不先向一起开发的组员广播：</p>
</li>
</ul>
<ol>
<li>提交你的修改</li>
<li>暂停相关类的修改</li>
<li>我开始做调整</li>
<li><p>等我修改好后，你再开始修改</p>
<p>因为这个过程烦琐，结果就是影响了大家去做这样重构操作的积极性，进而影响项目的代码质量改进</p>
</li>
</ol>
</li>
<li><h3 id="灵活、迅速"><a href="#灵活、迅速" class="headerlink" title="灵活、迅速"></a>灵活、迅速</h3><ul>
<li><p>打断开发</p>
<p>  在开发新功能过程中，突然需要你去修复一个Bug，使用Git，你可以直接 保存贮藏/提交当前改动到本地，然后切换到主分支去修复Bug，之后 弹出贮藏/切换回你原来的分支 继续开发。</p>
</li>
<li><p>小步提交，互不干扰</p>
<p>  并行开发过程中各开发人员可以随时多次commit代码且互不影响，最后在merage到主分支，并且能记录所有成员的所有commint记录。SVN只能大量的一次性提交到中心库。</p>
</li>
</ul>
</li>
<li><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><ul>
<li><code>Git</code>: 本地包含了完整的日志，速度极快（并且无需网络)</li>
<li><code>SVN</code>: 需要从服务拉取。</li>
</ul>
</li>
<li><h3 id="Github-全球最大的开源社区"><a href="#Github-全球最大的开源社区" class="headerlink" title="Github-全球最大的开源社区"></a>Github-全球最大的开源社区</h3><ul>
<li><p>全球顶级科技公司纷纷加入 GitHub ，并贡献他们自己的项目代码</p>
<p>  Google: <a href="https://github.com/google" target="_blank" rel="external">https://github.com/google</a><br>  苹果: <a href="https://github.com/apple" target="_blank" rel="external">https://github.com/apple</a><br>  Facebook: <a href="https://github.com/facebook" target="_blank" rel="external">https://github.com/facebook</a><br>  Twitter：<a href="https://github.com/twitter" target="_blank" rel="external">https://github.com/twitter</a><br>  微软：<a href="https://github.com/microsoft" target="_blank" rel="external">https://github.com/microsoft</a><br>  Square：<a href="https://github.com/square" target="_blank" rel="external">https://github.com/square</a><br>  阿里：<a href="https://github.com/alibaba" target="_blank" rel="external">https://github.com/alibaba</a><br>  …</p>
</li>
<li><p>全球顶级开源项目都优先选择在 GitHub 上开源</p>
<p>  Linux：<a href="https://github.com/torvalds/linux" target="_blank" rel="external">https://github.com/torvalds/linux</a><br>  Android：<a href="https://github.com/owncloud/android" target="_blank" rel="external">https://github.com/owncloud/android</a><br>  Rails：<a href="https://github.com/rails/rails" target="_blank" rel="external">https://github.com/rails/rails</a><br>  Nodejs：<a href="https://github.com/nodejs/node" target="_blank" rel="external">https://github.com/nodejs/node</a><br>  Swift：<a href="https://github.com/apple/swift" target="_blank" rel="external">https://github.com/apple/swift</a><br>  CoffeeScript：<a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="external">https://github.com/jashkenas/coffeescript</a><br>  Ruby：<a href="https://github.com/ruby/ruby" target="_blank" rel="external">https://github.com/ruby/ruby</a><br>  …</p>
</li>
</ul>
</li>
</ol>
<p><em>本文部分转载自 - <a href="https://github.com/xirong/my-git/blob/master/why-git.md" target="_blank" rel="external">SVN 和 Git 在日常使用中的明显差异</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;合并对提交过程的保留&quot;&gt;&lt;a href=&quot;#合并对提交过程的保留&quot; class=&quot;headerlink&quot; title=&quot;合并对提交过程的保留&quot;&gt;&lt;/a&gt;合并对提交过程的保留&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Git&lt;/code&gt;: 合并操作保留原有的提交过程（即保留了合并来源的作者、提交次数、分离提交的内容）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SVN&lt;/code&gt;: 合并操作把来源多个提交合并成了一个合并提交，即在提交历史中Crash了自然的提交过程。&lt;/p&gt;
&lt;p&gt;  保留原有的提交过程，可以无需繁琐追踪历史就方便实现以下目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跟踪修改过程。        &lt;/li&gt;
&lt;li&gt;自然的提交过程。这极大方便了代码细节演进过程的查看。&lt;/li&gt;
&lt;li&gt;极大方便查出那行提交是什么时间、谁做出的。svn因为合并Crash了自然的提交过程，要追踪很痛苦。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="工具" scheme="VickChen.win/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="VickChen.win/tags/Git/"/>
    
      <category term="GitHub" scheme="VickChen.win/tags/GitHub/"/>
    
      <category term="SVN" scheme="VickChen.win/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>Git的安装与配置</title>
    <link href="VickChen.win/2016/about-git-installation/"/>
    <id>VickChen.win/2016/about-git-installation/</id>
    <published>2016-09-16T19:49:38.000Z</published>
    <updated>2018-08-01T10:51:35.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在2005年的某一天，Linux之父Linus Torvalds 发布了他的又一个里程碑作品——Git。它的出现改变了软件开发流程，大大地提高了开发流畅度，直到现在仍十分流行，完全没有衰退的迹象。其实一般情况下，只需要掌握Git的几个常用命令即可，但是在使用的过程中难免会遇到各种复杂的需求，这时候经常需要搜索，非常麻烦，故总结了一下自己平常会用到的Git操作。本文根据团队实践记录Git入门指南和Git常用命令，文章中不仅记录了Git的搭建和使用教程，还参考了大量Git团队使用规范上的经验，希望大家可以结合自己团队的实际应用场景让Git协作优雅的落地。</p>
<a id="more"></a>
<h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><blockquote>
<p>Git 是由 Linux 之父 Linus Tovalds 为了更好地管理linux内核开发而创立的分布式版本控制／软件配置管理软件。</p>
</blockquote>
<p>简单来说，Git 是一个管理你的「代码的历史记录」的工具。</p>
<blockquote>
<p>“Git是目前世界上最先进的分布式版本控制系统”</p>
</blockquote>
<h2 id="SVN与Git的最主要的区别"><a href="#SVN与Git的最主要的区别" class="headerlink" title="SVN与Git的最主要的区别"></a>SVN与Git的最主要的区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<blockquote>
<p>“SVN没有后悔药，Git有一堆后悔药”</p>
</blockquote>
<p>更多差异可以参考: <a href="http://vickchen.win/why-git/" target="_blank" rel="external">SVN 与 Git 的区别</a></p>
<h2 id="Git与Github的区别"><a href="#Git与Github的区别" class="headerlink" title="Git与Github的区别"></a>Git与Github的区别</h2><p>Git是一个版本控制的工具，而Github有点类似于远程仓库，用于存放用Git管理的各种项目。</p>
<h2 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h2><ol>
<li><h3 id="Git客户端下载地址-https-git-scm-com-，下载后安装。"><a href="#Git客户端下载地址-https-git-scm-com-，下载后安装。" class="headerlink" title="Git客户端下载地址: https://git-scm.com/ ，下载后安装。"></a>Git客户端下载地址: <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> ，下载后安装。</h3></li>
<li><h3 id="配置环境变量-新版的Git貌似可以自动设置环境变量"><a href="#配置环境变量-新版的Git貌似可以自动设置环境变量" class="headerlink" title="配置环境变量 (新版的Git貌似可以自动设置环境变量)"></a>配置环境变量 (<em>新版的Git貌似可以自动设置环境变量</em>)</h3><ol>
<li><p>鼠标在桌面右键“我的电脑”&gt;属性&gt;高级系统设置&gt;</p>
</li>
<li><p>点击“环境变量”按钮</p>
</li>
<li><p>新建系统变量，变量名为 GIT_HOME，变量值为你刚刚安装的GIT所在目录（比如D:\Program Files\Git）</p>
<p><img src="http://ww4.sinaimg.cn/mw690/9460f058gw1f7xnwm9o5cj20cp0hnmzl.jpg" alt=""></p>
</li>
<li><p>编辑系统Path变量 新增一向 %GIT_HOME%\bin (注意使用”;”半角分号来分割变量)</p>
<p><img src="http://ww1.sinaimg.cn/mw690/9460f058gw1f7xnw8s2bwj20cl080gn3.jpg" alt=""></p>
</li>
<li><p>确定并保存</p>
</li>
<li><p>以上方法设置完成后，你可以新开一个CMD窗口，输入Git命令 ，如图即表示环境变量以及GIT客户端安装正确。</p>
<p><img src="http://ww2.sinaimg.cn/large/9460f058gw1f7xnv4z0sij20it0a70va.jpg" alt=""></p>
</li>
</ol>
</li>
<li><p>配置ssh公钥 </p>
<p> 单单是安装完成了，GIT还不能直接使用，我们还需要配置一下公钥，不然会每次都让输入账号密码，或拒绝你登录。</p>
<ol>
<li>首先启动一个Git Bash窗口（非Windows用户直接打开终端）</li>
<li>执行 <code>cd ~/.ssh</code> 跳转至存储ssh密钥的目录，用于检测是否已生成ssh密钥<br>如果返回“… No such file or directory”，说明没有生成过SSH Key，直接进入第4步。否则进入第3步备份</li>
<li>备份 <code>mkdir key_backup mv id_isa* key_backup</code></li>
<li><code>git config --global user.name &quot;demo&quot;</code> 设置你的用户名，替换demo为自己的名字，<strong>不是注册账号</strong></li>
<li><code>git config --global user.email &quot;demo@qq.com&quot;</code> 引号内的内容替换为你自己的邮箱 </li>
<li><p><code>ssh-keygen -t rsa -C &quot;demo@qq.com&quot;</code> 生成密钥 <strong>-C 为大写</strong>  </p>
<p> 输出显示</p>
<blockquote>
<p>Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</p>
</blockquote>
<p>  直接回车，不要修改默认路径</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase): Enter same passphrase again:</p>
</blockquote>
<p>  设置一个密码短语，在每次远程操作之前会要求输入此密码。觉得麻烦也可以直接回车，不设置。</p>
<p>  <em>注意:输入密码不会有任何显示 直接输入就可以了</em></p>
</li>
<li><p>成功:</p>
<blockquote>
<p>Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa. Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub. The key fingerprint is: … …</p>
</blockquote>
</li>
<li><p>提交公钥:</p>
<ol>
<li><p>找到.ssh文件夹，用文本编辑器打开“id_rsa.pub”文件，复制内容到剪贴板。</p>
</li>
<li><p>打开 <a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> ，点击 New SSH Key 按钮，粘贴进去保存即可</p>
</li>
</ol>
</li>
<li><p>测试:</p>
<p> 可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改:</p>
<p> <code>ssh -T git@github.com</code><br> 如果是下面的反馈:</p>
<blockquote>
<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br> Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p> 不要紧张，输入yes就好，然后会看到:</p>
<blockquote>
<p>Hi cnfeat! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h2 id="Git使用规范提醒"><a href="#Git使用规范提醒" class="headerlink" title="Git使用规范提醒"></a>Git使用规范提醒</h2><ul>
<li>使用Git过程中，必须通过创建分支进行开发，坚决禁止在主干分支上直接开发。review的同事有责任检查其他同事是否遵循分支规范。</li>
<li>在Git中，默认是不会提交空目录的，如果想提交某个空目录到版本库中，需要在该目录下新建一个 .gitignore 的空白文件，就可以提交了</li>
<li>把外部文件纳入到自己的 Git 分支来的时候一定要记得是先比对，确认所有修改都是自己修改的，然后再纳入。不然，容易出现代码回溯</li>
<li>多人协作时，不要各自在自己的 Git 分支开发，然后发文件合并。正确的方法应该是开一个远程分支，然后一起在远程分支里协作。不然，容易出现代码回溯（即别人的代码被覆盖的情况）</li>
<li>每个人提交代码是一定要 Git diff 看提交的东西是不是都是自己修改的。如果有不是自己修改的内容，很可能就是代码回溯</li>
<li>review 代码的时候如果看到有被删除掉的代码，一定要确实是否是写代码的同事自己删除的。如果不是，很可能就是代码回溯</li>
</ul>
<h3 id="Git客户端"><a href="#Git客户端" class="headerlink" title="Git客户端"></a>Git客户端</h3><blockquote>
<p>Git客户端可以按个人习惯来选择，遵守团队协作中的Git规范标准才是更重要的</p>
</blockquote>
<p>Git - <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p>
<pre><code>使用Git必须安装，可以与TortoiseGit配合使用。熟悉了Git的各种操作指令后可以尝试单独使用
</code></pre><p>TortoiseGit - <a href="https://tortoisegit.org/" target="_blank" rel="external">https://tortoisegit.org/</a></p>
<pre><code>与TortoiseSVN操作类似，但是功能更加强大。
</code></pre><p><strong>扩展阅读</strong></p>
<p>git简明指南 - <a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></p>
<p>常用 Git 命令清单 - <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<p>猴子都能懂的GIT入门 - <a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">http://backlogtool.com/git-guide/cn/</a></p>
<p>Git教程 - <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在2005年的某一天，Linux之父Linus Torvalds 发布了他的又一个里程碑作品——Git。它的出现改变了软件开发流程，大大地提高了开发流畅度，直到现在仍十分流行，完全没有衰退的迹象。其实一般情况下，只需要掌握Git的几个常用命令即可，但是在使用的过程中难免会遇到各种复杂的需求，这时候经常需要搜索，非常麻烦，故总结了一下自己平常会用到的Git操作。本文根据团队实践记录Git入门指南和Git常用命令，文章中不仅记录了Git的搭建和使用教程，还参考了大量Git团队使用规范上的经验，希望大家可以结合自己团队的实际应用场景让Git协作优雅的落地。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="VickChen.win/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="VickChen.win/tags/Git/"/>
    
      <category term="GitHub" scheme="VickChen.win/tags/GitHub/"/>
    
  </entry>
  
</feed>
